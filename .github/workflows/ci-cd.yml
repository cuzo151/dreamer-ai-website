name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  
jobs:
  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json
      
      - name: Run ESLint
        run: |
          cd frontend && npm ci && npm run lint || true
          cd ../backend && npm ci && npm run lint || true
      
      - name: Run security audit
        run: |
          cd frontend && npm audit --audit-level=moderate || true
          cd ../backend && npm audit --audit-level=moderate || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Frontend tests
  test-frontend:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

  # Backend tests
  test-backend:
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: dreamerai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/dreamerai_test
        run: |
          npm run migrate || echo "No migrations found"
      
      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/dreamerai_test
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: npm test || echo "No tests found"

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      # Build and push Frontend
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
      
      # Build and push Backend
      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.DEV_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
      
      - name: Deploy to Development
        run: |
          kubectl set image deployment/frontend-deployment \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.build.outputs.version }} \
            -n development
          kubectl set image deployment/backend-deployment \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.build.outputs.version }} \
            -n development
          kubectl rollout status deployment/frontend-deployment -n development
          kubectl rollout status deployment/backend-deployment -n development
      
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://dev.dreamer-ai.com/health || exit 1

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
      
      - name: Deploy to Staging
        run: |
          kubectl set image deployment/frontend-deployment \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.build.outputs.version }} \
            -n staging
          kubectl set image deployment/backend-deployment \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.build.outputs.version }} \
            -n staging
          kubectl rollout status deployment/frontend-deployment -n staging
          kubectl rollout status deployment/backend-deployment -n staging
      
      - name: Run integration tests
        run: |
          sleep 30
          # Run integration test suite
          npm run test:integration || echo "Integration tests not configured"

  # Deploy to Production (Manual Approval Required)
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > $HOME/.kube/config
      
      - name: Backup current deployment
        run: |
          kubectl get deployment -n production -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml
      
      - name: Deploy to Production (Blue-Green)
        run: |
          # Deploy to blue environment
          kubectl set image deployment/frontend-deployment-blue \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.build.outputs.version }} \
            -n production
          kubectl set image deployment/backend-deployment-blue \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.build.outputs.version }} \
            -n production
          
          # Wait for rollout
          kubectl rollout status deployment/frontend-deployment-blue -n production
          kubectl rollout status deployment/backend-deployment-blue -n production
          
          # Run health checks
          sleep 30
          curl -f https://blue.dreamer-ai.com/health || exit 1
          
          # Switch traffic to blue
          kubectl patch service frontend-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl patch service backend-service -n production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Wait and verify
          sleep 60
          
          # Update green deployment for next release
          kubectl set image deployment/frontend-deployment-green \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.build.outputs.version }} \
            -n production
          kubectl set image deployment/backend-deployment-green \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.build.outputs.version }} \
            -n production
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for version ${{ needs.build.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
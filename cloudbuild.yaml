# Cloud Build configuration for Dreamer AI Website
# This file defines the CI/CD pipeline for automatic deployments

substitutions:
  _REGION: us-central1
  _SERVICE_ACCOUNT: dreamer-ai-sa@${PROJECT_ID}.iam.gserviceaccount.com

options:
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'

steps:
  # Step 1: Build Frontend Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/dreamer-frontend:${COMMIT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/dreamer-frontend:latest'
      - '--cache-from'
      - 'gcr.io/${PROJECT_ID}/dreamer-frontend:latest'
      - './frontend'
    waitFor: ['-']

  # Step 2: Build Backend Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/dreamer-backend:${COMMIT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/dreamer-backend:latest'
      - '--cache-from'
      - 'gcr.io/${PROJECT_ID}/dreamer-backend:latest'
      - './backend'
    waitFor: ['-']

  # Step 3: Run Backend Tests
  - name: 'gcr.io/${PROJECT_ID}/dreamer-backend:${COMMIT_SHA}'
    id: 'test-backend'
    args: ['npm', 'test']
    env:
      - 'NODE_ENV=test'
      - 'DATABASE_URL=postgresql://test:test@localhost:5432/test'
    waitFor: ['build-backend']

  # Step 4: Push Frontend Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/${PROJECT_ID}/dreamer-frontend'
    waitFor: ['build-frontend']

  # Step 5: Push Backend Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/${PROJECT_ID}/dreamer-backend'
    waitFor: ['test-backend']

  # Step 6: Get Database Connection Details
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-db-details'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        REDIS_HOST=$(gcloud redis instances describe dreamer-ai-redis --region=${_REGION} --format='value(host)')
        echo "$REDIS_HOST" > /workspace/redis_host.txt
    waitFor: ['-']

  # Step 7: Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        REDIS_HOST=$(cat /workspace/redis_host.txt)
        gcloud run deploy dreamer-backend \
          --image=gcr.io/${PROJECT_ID}/dreamer-backend:${COMMIT_SHA} \
          --platform=managed \
          --region=${_REGION} \
          --allow-unauthenticated \
          --service-account=${_SERVICE_ACCOUNT} \
          --add-cloudsql-instances=${PROJECT_ID}:${_REGION}:dreamer-ai-db \
          --update-env-vars="NODE_ENV=production,PORT=8080,REDIS_HOST=$REDIS_HOST,REDIS_PORT=6379" \
          --update-secrets="JWT_SECRET=jwt-secret:latest,OPENAI_API_KEY=openai-api-key:latest,ANTHROPIC_API_KEY=anthropic-api-key:latest,DATABASE_PASSWORD=db-password:latest" \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=1 \
          --max-instances=10 \
          --concurrency=100
    waitFor: ['push-backend', 'get-db-details']

  # Step 8: Get Backend URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(gcloud run services describe dreamer-backend --region=${_REGION} --format='value(status.url)')
        echo "$BACKEND_URL" > /workspace/backend_url.txt
    waitFor: ['deploy-backend']

  # Step 9: Deploy Frontend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        gcloud run deploy dreamer-frontend \
          --image=gcr.io/${PROJECT_ID}/dreamer-frontend:${COMMIT_SHA} \
          --platform=managed \
          --region=${_REGION} \
          --allow-unauthenticated \
          --update-env-vars="REACT_APP_API_URL=$BACKEND_URL" \
          --memory=256Mi \
          --cpu=1 \
          --min-instances=1 \
          --max-instances=20 \
          --concurrency=1000 \
          --port=80
    waitFor: ['push-frontend', 'get-backend-url']

  # Step 10: Run smoke tests
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'smoke-test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        FRONTEND_URL=$(gcloud run services describe dreamer-frontend --region=${_REGION} --format='value(status.url)')
        BACKEND_URL=$(gcloud run services describe dreamer-backend --region=${_REGION} --format='value(status.url)')
        
        echo "Testing frontend health..."
        curl -f "$FRONTEND_URL" || exit 1
        
        echo "Testing backend health..."
        curl -f "$BACKEND_URL/health" || exit 1
        
        echo "All smoke tests passed!"
    waitFor: ['deploy-frontend', 'deploy-backend']

# Images to be stored in Container Registry
images:
  - 'gcr.io/${PROJECT_ID}/dreamer-frontend:${COMMIT_SHA}'
  - 'gcr.io/${PROJECT_ID}/dreamer-frontend:latest'
  - 'gcr.io/${PROJECT_ID}/dreamer-backend:${COMMIT_SHA}'
  - 'gcr.io/${PROJECT_ID}/dreamer-backend:latest'

# Timeout for the entire build
timeout: '1200s'
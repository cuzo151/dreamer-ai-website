[{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/config/database.js","messages":[{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":18,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":18,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[588,637],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":35,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1058,1134],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Pool } = require('pg');\nrequire('dotenv').config();\n\n// Create a connection pool\nconst pool = new Pool({\n  host: process.env.DB_HOST || 'localhost',\n  port: process.env.DB_PORT || 5432,\n  database: process.env.DB_NAME || 'dreamer_ai',\n  user: process.env.DB_USER || 'postgres',\n  password: process.env.DB_PASSWORD,\n  max: 20, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle\n  connectionTimeoutMillis: 2000, // How long to try to connect before timing out\n});\n\n// Test the connection\npool.on('connect', () => {\n  console.log('✅ Database connected successfully');\n});\n\npool.on('error', (err) => {\n  console.error('❌ Unexpected database error:', err);\n  process.exit(-1);\n});\n\n// Query helper function\nconst query = async (text, params) => {\n  const start = Date.now();\n  try {\n    const res = await pool.query(text, params);\n    const duration = Date.now() - start;\n    \n    // Log slow queries in development\n    if (process.env.NODE_ENV === 'development' && duration > 100) {\n      console.log('Slow query detected:', { text, duration, rows: res.rowCount });\n    }\n    \n    return res;\n  } catch (error) {\n    console.error('Database query error:', error);\n    throw error;\n  }\n};\n\n// Transaction helper\nconst transaction = async (callback) => {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('COMMIT');\n    return result;\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n};\n\nmodule.exports = {\n  pool,\n  query,\n  transaction,\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/config/environments/development.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/config/index.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":1,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":11},{"ruleId":"security/detect-non-literal-require","severity":1,"message":"Found non-literal argument in require","line":6,"column":19,"nodeType":"CallExpression","endLine":6,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":47,"column":8,"nodeType":"MemberExpression","endLine":47,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const path = require('path');\nrequire('dotenv').config();\n\n// Load environment-specific configuration\nconst env = process.env.NODE_ENV || 'development';\nconst envConfig = require(`./environments/${env}`);\n\n// Merge with environment variables\nconst config = {\n  ...envConfig,\n  env,\n  isProduction: env === 'production',\n  isDevelopment: env === 'development',\n  isTest: env === 'test',\n  \n  // Override with environment variables if present\n  server: {\n    ...envConfig.server,\n    port: process.env.PORT || envConfig.server.port\n  },\n  \n  database: {\n    ...envConfig.database,\n    connectionString: process.env.DATABASE_URL || \n      `postgresql://${envConfig.database.user}:${envConfig.database.password}@${envConfig.database.host}:${envConfig.database.port}/${envConfig.database.database}`\n  },\n  \n  redis: {\n    ...envConfig.redis,\n    url: process.env.REDIS_URL || \n      `redis://:${envConfig.redis.password}@${envConfig.redis.host}:${envConfig.redis.port}`\n  }\n};\n\n// Validate required configuration\nconst requiredEnvVars = [\n  'JWT_SECRET',\n  'DATABASE_URL',\n  'REDIS_URL'\n];\n\nif (config.isProduction) {\n  requiredEnvVars.push('OPENAI_API_KEY', 'ANTHROPIC_API_KEY');\n}\n\nfor (const envVar of requiredEnvVars) {\n  if (!process.env[envVar] && config.isProduction) {\n    console.error(`Missing required environment variable: ${envVar}`);\n    process.exit(1);\n  }\n}\n\nmodule.exports = config;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/config/redis.js","messages":[{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":19,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[461,497],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":27,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[612,646],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const redis = require('redis');\n\n// Create Redis client\nconst client = redis.createClient({\n  url: process.env.REDIS_URL || 'redis://localhost:6379',\n  socket: {\n    reconnectStrategy: (retries) => {\n      if (retries > 10) {\n        console.error('Too many Redis reconnection attempts');\n        return new Error('Too many retries');\n      }\n      return Math.min(retries * 100, 3000);\n    }\n  }\n});\n\n// Handle connection events\nclient.on('connect', () => {\n  console.log('✅ Connected to Redis');\n});\n\nclient.on('error', (err) => {\n  console.error('Redis Client Error:', err);\n});\n\nclient.on('ready', () => {\n  console.log('Redis client ready');\n});\n\n// Connect to Redis\n(async () => {\n  try {\n    await client.connect();\n  } catch (error) {\n    console.error('Failed to connect to Redis:', error);\n  }\n})();\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  await client.quit();\n});\n\nprocess.on('SIGTERM', async () => {\n  await client.quit();\n});\n\nmodule.exports = client;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/controllers/authController.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":24,"nodeType":"CallExpression","endLine":3,"endColumn":39,"fix":{"range":[110,110],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`../utils/emailService` import should occur before import of `../utils/tokenUtils`","line":6,"column":23,"nodeType":"CallExpression","endLine":6,"endColumn":55,"fix":{"range":[173,315],"text":"const { sendEmail } = require('../utils/emailService');\nconst { generateAccessToken, generateRefreshToken } = require('../utils/tokenUtils');\n"}},{"ruleId":"no-shadow","severity":2,"message":"'refreshToken' is already declared in the upper scope on line 171 column 7.","line":172,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":172,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'decoded' is assigned a value but never used.","line":183,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":18},{"ruleId":"no-shadow","severity":2,"message":"'refreshToken' is already declared in the upper scope on line 171 column 7.","line":242,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":242,"endColumn":23},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":246,"column":5,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":258,"endColumn":6}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst { v4: uuidv4 } = require('uuid');\nconst { query, transaction } = require('../config/database');\nconst { generateAccessToken, generateRefreshToken } = require('../utils/tokenUtils');\nconst { sendEmail } = require('../utils/emailService');\n\n// Register new user\nconst register = async (req, res) => {\n  const { email, password, firstName, lastName, company } = req.body;\n\n  try {\n    // Check if user already exists\n    const existingUser = await query(\n      'SELECT id FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (existingUser.rows.length > 0) {\n      return res.status(409).json({\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // Create user with transaction\n    const userId = await transaction(async (client) => {\n      // Insert user\n      const userResult = await client.query(\n        `INSERT INTO users (id, email, password_hash, first_name, last_name, company, role, status)\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n         RETURNING id`,\n        [uuidv4(), email, hashedPassword, firstName, lastName, company, 'client', 'pending']\n      );\n\n      const newUserId = userResult.rows[0].id;\n\n      // Create verification token\n      const verificationToken = uuidv4();\n      await client.query(\n        `INSERT INTO user_verifications (user_id, token, type, expires_at)\n         VALUES ($1, $2, 'email', NOW() + INTERVAL '24 hours')`,\n        [newUserId, verificationToken]\n      );\n\n      // Send verification email\n      await sendEmail({\n        to: email,\n        subject: 'Verify your Dreamer AI account',\n        template: 'verify-email',\n        data: {\n          name: firstName,\n          verificationLink: `${process.env.FRONTEND_URL}/verify-email?token=${verificationToken}`\n        }\n      });\n\n      return newUserId;\n    });\n\n    res.status(201).json({\n      message: 'Registration successful. Please check your email to verify your account.',\n      userId\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      error: 'Registration failed',\n      code: 'REGISTRATION_ERROR'\n    });\n  }\n};\n\n// Login user\nconst login = async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    // Get user by email\n    const userResult = await query(\n      `SELECT id, email, password_hash, first_name, last_name, role, status, \n              mfa_enabled, mfa_secret\n       FROM users \n       WHERE email = $1`,\n      [email]\n    );\n\n    if (userResult.rows.length === 0) {\n      return res.status(401).json({\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    const user = userResult.rows[0];\n\n    // Check if account is active\n    if (user.status !== 'active') {\n      return res.status(403).json({\n        error: 'Account is not active. Please verify your email.',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password_hash);\n    if (!isValidPassword) {\n      return res.status(401).json({\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    }\n\n    // Check if MFA is required\n    if (user.mfa_enabled) {\n      // Generate temporary MFA token\n      const mfaToken = jwt.sign(\n        { userId: user.id, type: 'mfa' },\n        process.env.JWT_SECRET,\n        { expiresIn: '5m' }\n      );\n\n      return res.json({\n        requiresMfa: true,\n        mfaToken\n      });\n    }\n\n    // Generate tokens\n    const accessToken = generateAccessToken(user);\n    const refreshToken = generateRefreshToken(user);\n\n    // Store session\n    await query(\n      `INSERT INTO sessions (id, user_id, token, expires_at, ip_address, user_agent)\n       VALUES ($1, $2, $3, NOW() + INTERVAL '30 days', $4, $5)`,\n      [uuidv4(), user.id, refreshToken, req.ip, req.get('user-agent')]\n    );\n\n    // Update last login\n    await query(\n      'UPDATE users SET last_login = NOW() WHERE id = $1',\n      [user.id]\n    );\n\n    res.json({\n      user: {\n        id: user.id,\n        email: user.email,\n        firstName: user.first_name,\n        lastName: user.last_name,\n        role: user.role\n      },\n      accessToken,\n      refreshToken\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      error: 'Login failed',\n      code: 'LOGIN_ERROR'\n    });\n  }\n};\n\n// Refresh token\nconst refreshToken = async (req, res) => {\n  const { refreshToken } = req.body;\n\n  if (!refreshToken) {\n    return res.status(401).json({\n      error: 'Refresh token required',\n      code: 'TOKEN_REQUIRED'\n    });\n  }\n\n  try {\n    // Verify refresh token\n    const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);\n\n    // Check if session exists and is valid\n    const sessionResult = await query(\n      `SELECT s.*, u.email, u.first_name, u.last_name, u.role, u.status\n       FROM sessions s\n       JOIN users u ON s.user_id = u.id\n       WHERE s.token = $1 AND s.expires_at > NOW()`,\n      [refreshToken]\n    );\n\n    if (sessionResult.rows.length === 0) {\n      return res.status(401).json({\n        error: 'Invalid or expired refresh token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    const session = sessionResult.rows[0];\n\n    // Check if user is still active\n    if (session.status !== 'active') {\n      return res.status(403).json({\n        error: 'Account is not active',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    }\n\n    // Generate new access token\n    const newAccessToken = generateAccessToken({\n      id: session.user_id,\n      email: session.email,\n      firstName: session.first_name,\n      lastName: session.last_name,\n      role: session.role\n    });\n\n    res.json({\n      accessToken: newAccessToken\n    });\n\n  } catch (error) {\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Invalid token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n    \n    console.error('Token refresh error:', error);\n    res.status(500).json({\n      error: 'Token refresh failed',\n      code: 'REFRESH_ERROR'\n    });\n  }\n};\n\n// Logout\nconst logout = async (req, res) => {\n  const { refreshToken } = req.body;\n  const userId = req.user.id;\n\n  try {\n    if (refreshToken) {\n      // Remove specific session\n      await query(\n        'DELETE FROM sessions WHERE user_id = $1 AND token = $2',\n        [userId, refreshToken]\n      );\n    } else {\n      // Remove all sessions for user\n      await query(\n        'DELETE FROM sessions WHERE user_id = $1',\n        [userId]\n      );\n    }\n\n    res.json({\n      message: 'Logout successful'\n    });\n\n  } catch (error) {\n    console.error('Logout error:', error);\n    res.status(500).json({\n      error: 'Logout failed',\n      code: 'LOGOUT_ERROR'\n    });\n  }\n};\n\n// Verify email\nconst verifyEmail = async (req, res) => {\n  const { token } = req.body;\n\n  try {\n    // Check verification token\n    const verificationResult = await query(\n      `SELECT v.*, u.email, u.first_name\n       FROM user_verifications v\n       JOIN users u ON v.user_id = u.id\n       WHERE v.token = $1 AND v.type = 'email' AND v.expires_at > NOW()`,\n      [token]\n    );\n\n    if (verificationResult.rows.length === 0) {\n      return res.status(400).json({\n        error: 'Invalid or expired verification token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    const verification = verificationResult.rows[0];\n\n    // Update user status and remove verification token\n    await transaction(async (client) => {\n      await client.query(\n        'UPDATE users SET status = $1, email_verified_at = NOW() WHERE id = $2',\n        ['active', verification.user_id]\n      );\n\n      await client.query(\n        'DELETE FROM user_verifications WHERE token = $1',\n        [token]\n      );\n    });\n\n    res.json({\n      message: 'Email verified successfully',\n      email: verification.email\n    });\n\n  } catch (error) {\n    console.error('Email verification error:', error);\n    res.status(500).json({\n      error: 'Email verification failed',\n      code: 'VERIFICATION_ERROR'\n    });\n  }\n};\n\n// Request password reset\nconst requestPasswordReset = async (req, res) => {\n  const { email } = req.body;\n\n  try {\n    // Check if user exists\n    const userResult = await query(\n      'SELECT id, first_name FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (userResult.rows.length === 0) {\n      // Don't reveal if user exists\n      return res.json({\n        message: 'If an account exists with this email, you will receive password reset instructions.'\n      });\n    }\n\n    const user = userResult.rows[0];\n\n    // Create reset token\n    const resetToken = uuidv4();\n    await query(\n      `INSERT INTO user_verifications (user_id, token, type, expires_at)\n       VALUES ($1, $2, 'password_reset', NOW() + INTERVAL '1 hour')\n       ON CONFLICT (user_id, type) \n       DO UPDATE SET token = $2, expires_at = NOW() + INTERVAL '1 hour'`,\n      [user.id, resetToken]\n    );\n\n    // Send reset email\n    await sendEmail({\n      to: email,\n      subject: 'Reset your Dreamer AI password',\n      template: 'reset-password',\n      data: {\n        name: user.first_name,\n        resetLink: `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`\n      }\n    });\n\n    res.json({\n      message: 'If an account exists with this email, you will receive password reset instructions.'\n    });\n\n  } catch (error) {\n    console.error('Password reset request error:', error);\n    res.status(500).json({\n      error: 'Password reset request failed',\n      code: 'RESET_REQUEST_ERROR'\n    });\n  }\n};\n\n// Reset password\nconst resetPassword = async (req, res) => {\n  const { token, newPassword } = req.body;\n\n  try {\n    // Check reset token\n    const verificationResult = await query(\n      `SELECT v.*, u.email\n       FROM user_verifications v\n       JOIN users u ON v.user_id = u.id\n       WHERE v.token = $1 AND v.type = 'password_reset' AND v.expires_at > NOW()`,\n      [token]\n    );\n\n    if (verificationResult.rows.length === 0) {\n      return res.status(400).json({\n        error: 'Invalid or expired reset token',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    const verification = verificationResult.rows[0];\n\n    // Hash new password\n    const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n    // Update password and remove reset token\n    await transaction(async (client) => {\n      await client.query(\n        'UPDATE users SET password_hash = $1 WHERE id = $2',\n        [hashedPassword, verification.user_id]\n      );\n\n      await client.query(\n        'DELETE FROM user_verifications WHERE token = $1',\n        [token]\n      );\n\n      // Invalidate all existing sessions\n      await client.query(\n        'DELETE FROM sessions WHERE user_id = $1',\n        [verification.user_id]\n      );\n    });\n\n    res.json({\n      message: 'Password reset successful. Please login with your new password.'\n    });\n\n  } catch (error) {\n    console.error('Password reset error:', error);\n    res.status(500).json({\n      error: 'Password reset failed',\n      code: 'RESET_ERROR'\n    });\n  }\n};\n\nmodule.exports = {\n  register,\n  login,\n  refreshToken,\n  logout,\n  verifyEmail,\n  requestPasswordReset,\n  resetPassword\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/coverage/lcov-report/block-navigation.js","messages":[{"ruleId":"unicorn/no-abusive-eslint-disable","severity":2,"message":"Specify the rules you want to disable.","line":1,"column":0,"nodeType":null,"messageId":"no-abusive-eslint-disable","endLine":1,"endColumn":21}],"suppressedMessages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `blockNavigation.js` or `BlockNavigation.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case","suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":86,"endColumn":6,"fix":{"range":[21,24],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":4,"endColumn":76,"fix":{"range":[128,131],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":7,"endColumn":46,"fix":{"range":[259,262],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":10,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":10,"endColumn":80,"fix":{"range":[391,394],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":10,"column":23,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":10,"endColumn":79,"fix":{"range":[409,465],"text":"`:not(${  missingCoverageClasses.join('):not(')  }) > `"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":13,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":17,"endColumn":57,"fix":{"range":[572,575],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":14,"column":9,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":17,"endColumn":56,"fix":{"range":[595,720],"text":"`${fileListingElements.join(', ') \n        }, ${ \n        notSelector \n        }${missingCoverageClasses.join(', ' + notSelector)}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":17,"column":37,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":17,"endColumn":55,"fix":{"range":[701,719],"text":"`, ${  notSelector}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":20,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":20,"endColumn":71,"fix":{"range":[820,823],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":20,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":43,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":22,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":22,"endColumn":22,"fix":{"range":[892,895],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":42,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":42,"endColumn":27,"fix":{"range":[1436,1439],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":53,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":53,"endColumn":27,"fix":{"range":[1768,1771],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":67,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelector()` over `.getElementById()`.","line":67,"column":22,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":67,"endColumn":36,"fix":{"range":[2083,2110],"text":"querySelector('#fileSearch'"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":67,"column":55,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":63,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":68,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":87,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":87,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selecter that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/coverage/lcov-report/prettify.js","messages":[{"ruleId":"unicorn/no-abusive-eslint-disable","severity":2,"message":"Specify the rules you want to disable.","line":1,"column":0,"nodeType":null,"messageId":"no-abusive-eslint-disable","endLine":1,"endColumn":21}],"suppressedMessages":[{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":52,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":105,"fix":{"range":[72,75],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":105,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":272,"fix":{"range":[125,128],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":272,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":381,"fix":{"range":[292,295],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":381,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":646,"fix":{"range":[401,404],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":646,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":796,"fix":{"range":[666,669],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":796,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1071,"fix":{"range":[816,819],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1071,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1236,"fix":{"range":[1091,1094],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1236,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1323,"fix":{"range":[1256,1259],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1323,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1506,"fix":{"range":[1343,1346],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1506,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1667,"fix":{"range":[1526,1529],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1667,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1846,"fix":{"range":[1687,1690],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1846,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1919,"fix":{"range":[1866,1869],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1919,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":1941,"fix":{"range":[1939,1942],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1941,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2060,"fix":{"range":[1961,1964],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2060,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2072,"fix":{"range":[2080,2083],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2072,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2084,"fix":{"range":[2092,2095],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2084,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2096,"fix":{"range":[2104,2107],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2096,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2108,"fix":{"range":[2116,2119],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2108,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2120,"fix":{"range":[2128,2131],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2120,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2132,"fix":{"range":[2140,2143],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2132,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2144,"fix":{"range":[2152,2155],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2144,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2156,"fix":{"range":[2164,2167],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2156,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2168,"fix":{"range":[2176,2179],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2168,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2180,"fix":{"range":[2188,2191],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2180,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2192,"fix":{"range":[2200,2203],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2192,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2204,"fix":{"range":[2212,2215],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2204,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2219,"fix":{"range":[2224,2227],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2219,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2525,"fix":{"range":[2239,2242],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2539,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2548,"fix":{"range":[2559,2562],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2548,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2560,"fix":{"range":[2568,2571],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2560,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2573,"fix":{"range":[2580,2583],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2577,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2595,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2605,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2617,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":2612,"nodeType":"MemberExpression","endLine":2,"endColumn":2616,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":2675,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":2682,"fix":{"range":[2702,2702],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi can be optimized to /\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^ux]/gi.","line":2,"column":2683,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":2724,"fix":{"range":[2703,2744],"text":"/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^ux]/gi"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2755,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2791,"fix":{"range":[2775,2778],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2807,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2831,"fix":{"range":[2827,2830],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":2853,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":2873,"fix":{"range":[2873,2876],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":2876,"nodeType":"MemberExpression","endLine":2,"endColumn":2881,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":2,"column":2932,"nodeType":"Identifier","messageId":"error","endLine":2,"endColumn":2940,"fix":{"range":[2952,2960],"text":"Number.parseInt"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":2941,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":2956,"fix":{"range":[2964,2975],"text":"slice(1"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":2,"column":2965,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":2,"endColumn":3053,"fix":{"range":[2985,3073],"text":"return af===\"u\"||af===\"x\" ? parseInt(ah.substring(2),16) : ah.charCodeAt(1);"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":2,"column":2995,"nodeType":"Identifier","messageId":"error","endLine":2,"endColumn":3003,"fix":{"range":[3015,3023],"text":"Number.parseInt"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":3004,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":3019,"fix":{"range":[3027,3038],"text":"slice(2"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move function 'T' to the outer scope.","line":2,"column":3056,"nodeType":"FunctionDeclaration","messageId":"consistent-function-scoping","endLine":2,"endColumn":3066,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3124,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3155,"fix":{"range":[3144,3147],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":3202,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":3209,"fix":{"range":[3222,3229],"text":"`\\\\${ag}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3235,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3394,"fix":{"range":[3255,3258],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":3242,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":3269,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3394,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3404,"fix":{"range":[3414,3417],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3404,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3414,"fix":{"range":[3424,3427],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3414,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3433,"fix":{"range":[3434,3437],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3437,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3463,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3476,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3490,"fix":{"range":[3496,3499],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":3483,"nodeType":"MemberExpression","endLine":2,"endColumn":3489,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3532,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3546,"fix":{"range":[3552,3555],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3546,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3553,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3858,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3868,"fix":{"range":[3878,3881],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3868,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3885,"fix":{"range":[3888,3891],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.NaN` over `NaN`.","line":2,"column":3876,"nodeType":"Identifier","messageId":"error","endLine":2,"endColumn":3879,"fix":{"range":[3896,3899],"text":"Number.NaN"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.NaN` over `NaN`.","line":2,"column":3880,"nodeType":"Identifier","messageId":"error","endLine":2,"endColumn":3883,"fix":{"range":[3900,3903],"text":"Number.NaN"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3889,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3897,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ar' is already defined.","line":2,"column":3893,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":3895,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3917,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":3931,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":3924,"nodeType":"MemberExpression","endLine":2,"endColumn":3930,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":3999,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4012,"fix":{"range":[4019,4022],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4057,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4065,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ar' is already defined.","line":2,"column":4061,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4063,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4085,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4099,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'at' is already defined.","line":2,"column":4089,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4091,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":4092,"nodeType":"MemberExpression","endLine":2,"endColumn":4098,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4230,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4426,"fix":{"range":[4250,4253],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+) can be optimized to (?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\\\d+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+).","line":2,"column":4253,"nodeType":"NewExpression","messageId":"better-regex","endLine":2,"endColumn":4424,"fix":{"range":[4284,4439],"text":"\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\\\\\d+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\""},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4426,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4443,"fix":{"range":[4446,4449],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4443,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4453,"fix":{"range":[4463,4466],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4457,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4470,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4483,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4497,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":4490,"nodeType":"MemberExpression","endLine":2,"endColumn":4496,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4544,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4568,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":4552,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":4567,"fix":{"range":[4575,4586],"text":"slice(1"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4583,"nodeType":"MemberExpression","endLine":2,"endColumn":4589,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4600,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4608,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ak' is already defined.","line":2,"column":4604,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4606,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4636,"nodeType":"MemberExpression","endLine":2,"endColumn":4642,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4644,"nodeType":"MemberExpression","endLine":2,"endColumn":4650,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4661,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4674,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ak' is already defined.","line":2,"column":4665,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4667,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'am' is already defined.","line":2,"column":4670,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4672,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4687,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4701,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ag' is already defined.","line":2,"column":4691,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4693,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":4694,"nodeType":"MemberExpression","endLine":2,"endColumn":4700,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4722,"nodeType":"MemberExpression","endLine":2,"endColumn":4728,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4742,"nodeType":"MemberExpression","endLine":2,"endColumn":4748,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4785,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4809,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'af' is already defined.","line":2,"column":4789,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4791,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":4793,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":4808,"fix":{"range":[4816,4827],"text":"slice(1"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4824,"nodeType":"MemberExpression","endLine":2,"endColumn":4830,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":4831,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":4842,"fix":{"range":[4851,4862],"text":"`\\\\${an[am]}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4836,"nodeType":"MemberExpression","endLine":2,"endColumn":4842,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4850,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4863,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ak' is already defined.","line":2,"column":4854,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4856,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'am' is already defined.","line":2,"column":4859,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4861,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4885,"nodeType":"MemberExpression","endLine":2,"endColumn":4891,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":4909,"nodeType":"MemberExpression","endLine":2,"endColumn":4915,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4945,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4953,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ak' is already defined.","line":2,"column":4949,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4951,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4966,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":4980,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ag' is already defined.","line":2,"column":4970,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":4972,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":4973,"nodeType":"MemberExpression","endLine":2,"endColumn":4979,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":4980,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5000,"fix":{"range":[5000,5003],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":5027,"nodeType":"MemberExpression","endLine":2,"endColumn":5033,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":5059,"nodeType":"MemberExpression","endLine":2,"endColumn":5065,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":5069,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":5076,"fix":{"range":[5096,5096],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[a-zA-Z]/g can be optimized to /[A-Za-z]/g.","line":2,"column":5077,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":5088,"fix":{"range":[5097,5108],"text":"/[A-Za-z]/g"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5102,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5126,"fix":{"range":[5122,5125],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":5132,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":5173,"fix":{"range":[5152,5193],"text":"`[${String.fromCharCode(ap&~32,ap|32)}]`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5198,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5208,"fix":{"range":[5218,5221],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5212,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5230,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'V' is already defined.","line":2,"column":5216,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":5217,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'U' is already defined.","line":2,"column":5220,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":5221,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5240,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5252,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'ae' is already defined.","line":2,"column":5244,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":5246,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":5247,"nodeType":"MemberExpression","endLine":2,"endColumn":5251,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":5296,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":5301,"fix":{"range":[5316,5321],"text":"`${ae}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":5311,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":5326,"fix":{"range":[5331,5346],"text":"`(?:${W(ae)})`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":2,"column":5335,"nodeType":"NewExpression","endLine":2,"endColumn":5371,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5386,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5417,"fix":{"range":[5406,5409],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5417,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5426,"fix":{"range":[5437,5440],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5426,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5434,"fix":{"range":[5446,5449],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5434,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5443,"fix":{"range":[5454,5457],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5443,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5451,"fix":{"range":[5463,5466],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5451,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5457,"fix":{"range":[5471,5474],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":5512,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":5518,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":2,"column":5539,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":5547,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5618,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5652,"fix":{"range":[5638,5641],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":5635,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":5651,"fix":{"range":[5657,5666],"text":"slice"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5731,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5751,"fix":{"range":[5751,5754],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5800,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":5825,"nodeType":"MemberExpression","endLine":2,"endColumn":5829,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":5884,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":5904,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/explicit-length-check","severity":2,"message":"Use `.length > 0` when checking length is not zero.","line":2,"column":5907,"nodeType":"MemberExpression","messageId":"non-zero","endLine":2,"endColumn":5916,"fix":{"range":[5927,5936],"text":"ac.length > 0"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":2,"column":5918,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":2,"endColumn":5992,"fix":{"range":[5938,6012],"text":"ac = !Y ? ac.replace(/[ \\t\\r\\n]+/g,\" \") : ac.replace(/\\r\\n?/g,\"\\n\");"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":5931,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":5938,"fix":{"range":[5958,5958],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[ \\t\\r\\n]+/g can be optimized to /[\\t\\n\\r ]+/g.","line":2,"column":5939,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":5952,"fix":{"range":[5959,5972],"text":"/[\\t\\n\\r ]+/g"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":5969,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":5976,"fix":{"range":[5996,5996],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":5992,"nodeType":"MemberExpression","endLine":2,"endColumn":5996,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6143,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6174,"fix":{"range":[6163,6166],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6209,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6220,"fix":{"range":[6229,6232],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6234,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6250,"fix":{"range":[6254,6257],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6254,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6272,"fix":{"range":[6274,6277],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6292,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6309,"fix":{"range":[6312,6315],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":2,"column":6311,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":2,"endColumn":6362,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":2,"column":6327,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":2,"endColumn":6362,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6404,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6413,"fix":{"range":[6424,6427],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6413,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6419,"fix":{"range":[6433,6436],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6431,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6450,"fix":{"range":[6451,6454],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-spread","severity":2,"message":"Prefer the spread operator over `Array#concat(…)`.","line":2,"column":6440,"nodeType":"Identifier","messageId":"array-concat","endLine":2,"endColumn":6446,"suggestions":[{"messageId":"argument-is-spreadable","fix":{"range":[6458,6469],"text":"[...U, ...T]"},"data":{},"desc":"First argument is an `array`."},{"messageId":"argument-is-not-spreadable","fix":{"range":[6458,6469],"text":"[...U, T]"},"data":{},"desc":"First argument is not an `array`."},{"messageId":"test-argument","fix":{"range":[6458,6469],"text":"[...U, ...(Array.isArray(T) ? T : [T])]"},"data":{},"desc":"Test first argument with `Array.isArray(…)`."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6450,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6460,"fix":{"range":[6470,6473],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6460,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6470,"fix":{"range":[6480,6483],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6474,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6494,"fix":{"range":[6494,6497],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6506,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6519,"fix":{"range":[6526,6529],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":6512,"nodeType":"MemberExpression","endLine":2,"endColumn":6518,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6519,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6531,"fix":{"range":[6539,6542],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6542,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6558,"fix":{"range":[6562,6565],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6589,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6601,"fix":{"range":[6609,6612],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6601,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6614,"fix":{"range":[6621,6624],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":6608,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":6613,"fix":{"range":[6628,6633],"text":"`${af}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":2,"column":6621,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":2,"endColumn":6635,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[6638,6656],"text":"Object.prototype.hasOwnProperty.call(ag, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":6653,"nodeType":"MemberExpression","endLine":2,"endColumn":6659,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/escape-case","severity":2,"message":"Use uppercase characters for the value of the escape sequence.","line":2,"column":6674,"nodeType":"Literal","messageId":"escape-case","endLine":2,"endColumn":6687,"fix":{"range":[6694,6707],"text":"/[\\0-\\uFFFF]/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6701,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6716,"fix":{"range":[6721,6724],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6716,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7512,"fix":{"range":[6736,6739],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":2,"column":6735,"nodeType":"VariableDeclaration","messageId":"split","endLine":2,"endColumn":6768,"fix":{"range":[6774,6775],"text":"; var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6735,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6768,"fix":{"range":[6755,6758],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6768,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6781,"fix":{"range":[6788,6791],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6790,"fix":{"range":[6801,6804],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6790,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6812,"fix":{"range":[6810,6813],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6812,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6822,"fix":{"range":[6832,6835],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6826,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6847,"fix":{"range":[6846,6849],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6860,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6874,"fix":{"range":[6880,6883],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":6867,"nodeType":"MemberExpression","endLine":2,"endColumn":6873,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6874,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6888,"fix":{"range":[6894,6897],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":6881,"nodeType":"MemberExpression","endLine":2,"endColumn":6887,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6888,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6902,"fix":{"range":[6908,6911],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6902,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6909,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":6948,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":6971,"fix":{"range":[6968,6971],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7015,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7023,"fix":{"range":[7035,7038],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":7038,"nodeType":"MemberExpression","endLine":2,"endColumn":7043,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":7127,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":7144,"fix":{"range":[7150,7159],"text":"slice"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":7206,"nodeType":"MemberExpression","endLine":2,"endColumn":7212,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7217,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7227,"fix":{"range":[7237,7240],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7271,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7284,"fix":{"range":[7291,7294],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7284,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7306,"fix":{"range":[7304,7307],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7306,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7326,"fix":{"range":[7326,7329],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7378,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7401,"fix":{"range":[7398,7401],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":7385,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":7400,"fix":{"range":[7408,7419],"text":"slice(5"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":7408,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":7426,"fix":{"range":[7431,7445],"text":"slice(0,Math.max(0, ak)"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":7469,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":7485,"fix":{"range":[7492,7504],"text":"slice(Math.max(0, ac)"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'ah'.","line":2,"column":7493,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":2,"endColumn":7495,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":2,"column":7535,"nodeType":"VariableDeclaration","messageId":"split","endLine":2,"endColumn":7549,"fix":{"range":[7563,7564],"text":"; var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":7535,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":7549,"fix":{"range":[7555,7558],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":7585,"nodeType":"Literal","endLine":2,"endColumn":7769,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/ can be optimized to /^(?:'''(?:[^'\\\\]|\\\\[\\S\\s]|'{1,2}(?=[^']))*(?:'''|$)|\"\"\"(?:[^\"\\\\]|\\\\[\\S\\s]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$))/.","line":2,"column":7585,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":7769,"fix":{"range":[7605,7789],"text":"/^(?:'''(?:[^'\\\\]|\\\\[\\S\\s]|'{1,2}(?=[^']))*(?:'''|$)|\"\"\"(?:[^\"\\\\]|\\\\[\\S\\s]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$))/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7590,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7591,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7610,7611],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7610,7610],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7592,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7593,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7612,7613],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7612,7612],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7594,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7595,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7614,7615],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7614,7614],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7601,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7602,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7621,7622],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7621,7621],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7616,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7617,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7636,7637],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7636,7636],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7628,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7629,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7648,7649],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7648,7648],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7637,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7638,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7657,7658],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7657,7657],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7639,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7640,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7659,7660],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7659,7659],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7641,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7642,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7661,7662],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7661,7661],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7647,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7648,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7667,7668],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7667,7667],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7649,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7650,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7669,7670],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7669,7669],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7651,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7652,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7671,7672],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7671,7671],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7658,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7659,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7678,7679],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7678,7678],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7673,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7674,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7693,7694],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7693,7693],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7685,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7686,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7705,7706],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7705,7705],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7694,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7695,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7714,7715],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7714,7714],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7696,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7697,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7716,7717],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7716,7716],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7698,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7699,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7718,7719],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7718,7718],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7704,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7705,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7724,7725],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7724,7724],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7713,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7714,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7733,7734],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7733,7733],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7730,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7731,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7750,7751],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7750,7750],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7736,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7737,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7756,7757],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7756,7756],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7745,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7746,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7765,7766],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7765,7765],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7762,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7763,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7782,7783],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7782,7782],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/ can be optimized to /^(?:'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/.","line":2,"column":7821,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":7923,"fix":{"range":[7841,7943],"text":"/^(?:'(?:[^'\\\\]|\\\\[\\S\\s])*(?:'|$)|\"(?:[^\"\\\\]|\\\\[\\S\\s])*(?:\"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7826,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7827,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7846,7847],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7846,7846],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7835,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7836,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7855,7856],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7855,7855],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7852,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7853,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7872,7873],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7872,7872],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7858,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7859,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7878,7879],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7878,7878],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7867,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7868,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7887,7888],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7887,7887],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7884,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7885,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7904,7905],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7904,7904],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\`.","line":2,"column":7890,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7891,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7910,7911],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7910,7910],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\`.","line":2,"column":7899,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7900,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7919,7920],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7919,7919],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\`.","line":2,"column":7916,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7917,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7936,7937],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7936,7936],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/ can be optimized to /^(?:'(?:[^\\n\\r'\\\\]|\\\\.)*(?:'|$)|\"(?:[^\\n\\r\"\\\\]|\\\\.)*(?:\"|$))/.","line":2,"column":7953,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8021,"fix":{"range":[7973,8041],"text":"/^(?:'(?:[^\\n\\r'\\\\]|\\\\.)*(?:'|$)|\"(?:[^\\n\\r\"\\\\]|\\\\.)*(?:\"|$))/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7958,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7959,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7978,7979],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7978,7978],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7967,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7968,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7987,7988],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7987,7987],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":7983,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7984,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8003,8004],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8003,8003],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7989,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7990,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8009,8010],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8009,8009],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":7998,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":7999,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8018,8019],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8018,8018],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8014,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8015,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8034,8035],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8034,8034],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/ can be optimized to /^@\"(?:[^\"]|\"\")*(?:\"|$)/.","line":2,"column":8068,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8097,"fix":{"range":[8088,8117],"text":"/^@\"(?:[^\"]|\"\")*(?:\"|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8071,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8072,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8091,8092],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8091,8091],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8078,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8079,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8098,8099],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8098,8098],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8082,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8083,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8102,8103],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8102,8102],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8084,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8085,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8104,8105],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8104,8104],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":8091,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":8092,"suggestions":[{"messageId":"removeEscape","fix":{"range":[8111,8112],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[8111,8111],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":8105,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8126,"fix":{"range":[8125,8128],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/ can be optimized to /^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\n\\r]*)/.","line":2,"column":8237,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8335,"fix":{"range":[8257,8355],"text":"/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\n\\r]*)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":8357,"nodeType":"Literal","endLine":2,"endColumn":8427,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^#[^\\r\\n]*/ can be optimized to /^#[^\\n\\r]*/.","line":2,"column":8450,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8462,"fix":{"range":[8470,8482],"text":"/^#[^\\n\\r]*/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\/\\/[^\\r\\n]*/ can be optimized to /^\\/\\/[^\\n\\r]*/.","line":2,"column":8506,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8521,"fix":{"range":[8526,8541],"text":"/^\\/\\/[^\\n\\r]*/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":2,"column":8531,"nodeType":"Identifier","messageId":"error","endLine":2,"endColumn":8535,"fix":{"range":[8547,8591],"text":", [j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null]);"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/ can be optimized to /^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/.","line":2,"column":8539,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8564,"fix":{"range":[8559,8584],"text":"/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":8592,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8696,"fix":{"range":[8612,8615],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":8728,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":8743,"fix":{"range":[8748,8763],"text":"`^${M}(${X})`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":8747,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8761,"fix":{"range":[8767,8770],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":8781,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":8824,"fix":{"range":[8801,8804],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":8788,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":8801,"fix":{"range":[8808,8821],"text":"`${T.keywords}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":8803,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":8810,"fix":{"range":[8830,8830],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/explicit-length-check","severity":2,"message":"Use `.length > 0` when checking length is not zero.","line":2,"column":8827,"nodeType":"MemberExpression","messageId":"non-zero","endLine":2,"endColumn":8835,"fix":{"range":[8847,8855],"text":"U.length > 0"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":2,"column":8847,"nodeType":"NewExpression","endLine":2,"endColumn":8897,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":8858,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":8896,"fix":{"range":[8878,8916],"text":"`^(?:${U.replace(/[\\s,]+/g,\"|\")})\\\\b`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":8867,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":8874,"fix":{"range":[8894,8894],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^@[a-z_$][a-z_$@0-9]*/i can be optimized to /^@[$_a-z][\\w$@]*/i.","line":2,"column":8953,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":8977,"fix":{"range":[8973,8997],"text":"/^@[$_a-z][\\w$@]*/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/ can be optimized to /^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/.","line":2,"column":8987,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":9033,"fix":{"range":[9007,9053],"text":"/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[a-z_$][a-z_$@0-9]*/i can be optimized to /^[$_a-z][\\w$@]*/i.","line":2,"column":9043,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":9066,"fix":{"range":[9063,9086],"text":"/^[$_a-z][\\w$@]*/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression (new RegExp)","line":2,"column":9076,"nodeType":"NewExpression","endLine":2,"endColumn":9177,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\\\[\\s\\S]?/ can be optimized to /^\\\\[\\S\\s]?/.","line":2,"column":9200,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":9212,"fix":{"range":[9220,9232],"text":"/^\\\\[\\S\\s]?/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/ can be optimized to /^.[^\\s\\w\"#$'./@\\\\`]*/.","line":2,"column":9222,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":9250,"fix":{"range":[9242,9270],"text":"/^.[^\\s\\w\"#$'./@\\\\`]*/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\..","line":2,"column":9231,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9232,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9251,9252],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9251,9251],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":9235,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9236,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9255,9256],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9255,9255],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":9237,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9238,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9257,9258],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9257,9257],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\`.","line":2,"column":9239,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9240,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9259,9260],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9259,9259],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":2,"column":9241,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9242,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9261,9262],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9261,9261],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\#.","line":2,"column":9243,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":9244,"suggestions":[{"messageId":"removeEscape","fix":{"range":[9263,9264],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[9263,9263],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9272,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9373,"fix":{"range":[9292,9295],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9390,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9421,"fix":{"range":[9410,9413],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9421,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9439,"fix":{"range":[9441,9444],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9439,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9462,"fix":{"range":[9459,9462],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9462,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9468,"fix":{"range":[9482,9485],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":9523,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":9529,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9623,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9657,"fix":{"range":[9643,9646],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":9640,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":9656,"fix":{"range":[9662,9671],"text":"slice"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9657,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9687,"fix":{"range":[9677,9680],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9736,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9747,"fix":{"range":[9756,9759],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9909,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":9929,"fix":{"range":[9929,9932],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":9986,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10006,"fix":{"range":[10006,10009],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10006,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10026,"fix":{"range":[10026,10029],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10033,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10065,"fix":{"range":[10053,10056],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":10040,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":10064,"fix":{"range":[10063,10083],"text":"slice(0,Math.max(0, aj.index)"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'al'.","line":2,"column":10065,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":2,"endColumn":10067,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10081,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10124,"fix":{"range":[10101,10104],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":10088,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":10123,"fix":{"range":[10111,10142],"text":"slice(Math.max(0, aj.index+aj[0].length)"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10131,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10152,"fix":{"range":[10151,10154],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'ak'.","line":2,"column":10299,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":2,"endColumn":10301,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10351,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10384,"fix":{"range":[10371,10374],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10384,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10405,"fix":{"range":[10404,10407],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10412,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10428,"fix":{"range":[10432,10435],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10428,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10450,"fix":{"range":[10448,10451],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10473,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10482,"fix":{"range":[10493,10496],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10541,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10569,"fix":{"range":[10561,10564],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10573,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10579,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10639,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10646,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":2,"column":10666,"nodeType":"MemberExpression","endLine":2,"endColumn":10670,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-math-trunc","severity":2,"message":"Use `Math.trunc` instead of `| 0`.","line":2,"column":10681,"nodeType":"BinaryExpression","messageId":"error-bitwise","endLine":2,"endColumn":10685,"suggestions":[{"messageId":"suggestion-bitwise","fix":{"range":[10701,10705],"text":"Math.trunc(ag)"},"data":{"operator":"|","value":"0"},"desc":"Replace `| 0` with `Math.trunc`."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10718,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10748,"fix":{"range":[10738,10741],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10772,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10804,"fix":{"range":[10792,10795],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-math-trunc","severity":2,"message":"Use `Math.trunc` instead of `| 0`.","line":2,"column":10789,"nodeType":"BinaryExpression","messageId":"error-bitwise","endLine":2,"endColumn":10799,"suggestions":[{"messageId":"suggestion-bitwise","fix":{"range":[10809,10819],"text":"Math.trunc(ag-1)"},"data":{"operator":"|","value":"0"},"desc":"Replace `| 0` with `Math.trunc`."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10808,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":10826,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'Y' is already defined.","line":2,"column":10812,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":10813,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":10839,"nodeType":"MemberExpression","endLine":2,"endColumn":10843,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":2,"column":10857,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":2,"endColumn":10871,"fix":{"range":[10877,10891],"text":"`L${(Y+X)%10}`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":10985,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11029,"fix":{"range":[11005,11008],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'navigator' is not defined.","line":2,"column":11008,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":11017,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11029,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11042,"fix":{"range":[11049,11052],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11042,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11063,"fix":{"range":[11062,11065],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11063,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11080,"fix":{"range":[11083,11086],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11080,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11088,"fix":{"range":[11100,11103],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11088,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11104,"fix":{"range":[11108,11111],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11104,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11120,"fix":{"range":[11124,11127],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11120,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11129,"fix":{"range":[11140,11143],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11129,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11150,"fix":{"range":[11149,11152],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11150,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11165,"fix":{"range":[11170,11173],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11165,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11173,"fix":{"range":[11185,11188],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":11173,"nodeType":"MemberExpression","endLine":2,"endColumn":11177,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":2,"column":11181,"nodeType":"VariableDeclaration","messageId":"split","endLine":2,"endColumn":11191,"fix":{"range":[11207,11208],"text":"; var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11181,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11191,"fix":{"range":[11201,11204],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":11213,"nodeType":"MemberExpression","endLine":2,"endColumn":11218,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11298,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11311,"fix":{"range":[11318,11321],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":11305,"nodeType":"MemberExpression","endLine":2,"endColumn":11310,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11311,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11326,"fix":{"range":[11331,11334],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11326,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11337,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11410,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11422,"fix":{"range":[11430,11433],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ae' is assigned a value but never used.","line":2,"column":11414,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11416,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11434,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11448,"fix":{"range":[11454,11457],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'af' is assigned a value but never used.","line":2,"column":11438,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11440,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":11441,"nodeType":"MemberExpression","endLine":2,"endColumn":11447,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11448,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11467,"fix":{"range":[11468,11471],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11467,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11479,"fix":{"range":[11487,11490],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ag' is assigned a value but never used.","line":2,"column":11471,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":11473,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":11474,"nodeType":"MemberExpression","endLine":2,"endColumn":11478,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11479,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11497,"fix":{"range":[11499,11502],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11497,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11518,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-redeclare","severity":2,"message":"'W' is already defined.","line":2,"column":11501,"nodeType":"Identifier","messageId":"redeclared","endLine":2,"endColumn":11502,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11518,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11534,"fix":{"range":[11538,11541],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11534,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11540,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":11563,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":11580,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":2,"column":11594,"nodeType":"Identifier","messageId":"method","endLine":2,"endColumn":11601,"fix":{"range":[11621,11621],"text":"All"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11626,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11650,"fix":{"range":[11646,11649],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11650,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11682,"fix":{"range":[11670,11673],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11702,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11723,"fix":{"range":[11722,11725],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-modern-dom-apis","severity":2,"message":"Prefer `ak.replaceWith(ao)` over `ad.replaceChild(ao, ak)`.","line":2,"column":11723,"nodeType":"CallExpression","messageId":"replaceChildOrInsertBefore","endLine":2,"endColumn":11745,"fix":{"range":[11743,11765],"text":"ak.replaceWith(ao)"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":2,"column":11803,"nodeType":"CallExpression","messageId":"substring","endLine":2,"endColumn":11820,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11894,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11903,"fix":{"range":[11914,11917],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11923,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11937,"fix":{"range":[11943,11946],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":11947,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":11958,"fix":{"range":[11967,11970],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":11953,"nodeType":"MemberExpression","endLine":2,"endColumn":11957,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":2,"column":11964,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":2,"endColumn":11978,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[11982,11999],"text":"Object.prototype.hasOwnProperty.call(t, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":11983,"nodeType":"MemberExpression","endLine":2,"endColumn":11987,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":11998,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":12004,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":2,"column":12097,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":2,"endColumn":12111,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[12115,12132],"text":"Object.prototype.hasOwnProperty.call(t, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'T'.","line":2,"column":12117,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":2,"endColumn":12118,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":12174,"nodeType":"MemberExpression","endLine":2,"endColumn":12178,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<\\!--[\\s\\S]*?(?:-\\->|$)/ can be optimized to /^<!--[\\S\\s]*?(?:-->|$)/.","line":2,"column":12250,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12276,"fix":{"range":[12270,12296],"text":"/^<!--[\\S\\s]*?(?:-->|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\!.","line":2,"column":12253,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12254,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12273,12274],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12273,12273],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":2,"column":12269,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12270,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12289,12290],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12289,12289],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<\\?([\\s\\S]+?)(?:\\?>|$)/ can be optimized to /^<\\?([\\S\\s]+?)(?:\\?>|$)/.","line":2,"column":12287,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12312,"fix":{"range":[12307,12332],"text":"/^<\\?([\\S\\s]+?)(?:\\?>|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<%([\\s\\S]+?)(?:%>|$)/ can be optimized to /^<%([\\S\\s]+?)(?:%>|$)/.","line":2,"column":12323,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12346,"fix":{"range":[12343,12366],"text":"/^<%([\\S\\s]+?)(?:%>|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i can be optimized to /^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i.","line":2,"column":12380,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12420,"fix":{"range":[12400,12440],"text":"/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i can be optimized to /^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i.","line":2,"column":12433,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12481,"fix":{"range":[12453,12501],"text":"/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i can be optimized to /^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i.","line":2,"column":12495,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12541,"fix":{"range":[12515,12561],"text":"/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[\\s]+/ can be optimized to /^\\s+/.","line":2,"column":12652,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12660,"fix":{"range":[12672,12680],"text":"/^\\s+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/ can be optimized to /^(?:\"[^\"]*\"?|'[^']*'?)/.","line":2,"column":12680,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12710,"fix":{"range":[12700,12730],"text":"/^(?:\"[^\"]*\"?|'[^']*'?)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12685,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12686,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12705,12706],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12705,12705],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12689,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12690,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12709,12710],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12709,12709],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12693,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12694,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12713,12714],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12713,12713],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12697,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12698,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12717,12718],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12717,12717],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12701,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12702,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12721,12722],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12721,12721],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12705,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12706,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12725,12726],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12725,12725],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":12728,"nodeType":"Literal","endLine":2,"endColumn":12763,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":12768,"nodeType":"Literal","endLine":2,"endColumn":12808,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/ can be optimized to /^=\\s*([^\\s\"'>]*(?:[^\\s\"'/>]|\\/(?=\\s)))/.","line":2,"column":12825,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12870,"fix":{"range":[12845,12890],"text":"/^=\\s*([^\\s\"'>]*(?:[^\\s\"'/>]|\\/(?=\\s)))/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12835,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12836,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12855,12856],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12855,12855],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12837,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12838,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12857,12858],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12857,12857],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12849,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12850,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12869,12870],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12869,12869],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12851,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12852,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12871,12872],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12871,12871],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":2,"column":12855,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12856,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12875,12876],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12875,12875],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[=<>\\/]+/ can be optimized to /^[/<=>]+/.","line":2,"column":12875,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12886,"fix":{"range":[12895,12906],"text":"/^[/<=>]+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":2,"column":12881,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12882,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12901,12902],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12901,12901],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i can be optimized to /^on\\w+\\s*=\\s*\"([^\"]+)\"/i.","line":2,"column":12899,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12927,"fix":{"range":[12919,12947],"text":"/^on\\w+\\s*=\\s*\"([^\"]+)\"/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12913,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12914,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12933,12934],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12933,12933],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12918,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12919,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12938,12939],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12938,12938],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12923,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12924,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12943,12944],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12943,12943],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i can be optimized to /^on\\w+\\s*=\\s*'([^']+)'/i.","line":2,"column":12940,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":12968,"fix":{"range":[12960,12988],"text":"/^on\\w+\\s*=\\s*'([^']+)'/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12954,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12955,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12974,12975],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12974,12974],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12959,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12960,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12979,12980],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12979,12979],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":12964,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12965,"suggestions":[{"messageId":"removeEscape","fix":{"range":[12984,12985],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[12984,12984],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i can be optimized to /^on\\w+\\s*=\\s*([^\\s\"'>]+)/i.","line":2,"column":12981,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":13010,"fix":{"range":[13001,13030],"text":"/^on\\w+\\s*=\\s*([^\\s\"'>]+)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":12998,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":12999,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13018,13019],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13018,13018],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":13000,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13001,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13020,13021],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13020,13020],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i can be optimized to /^style\\s*=\\s*\"([^\"]+)\"/i.","line":2,"column":13024,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":13052,"fix":{"range":[13044,13072],"text":"/^style\\s*=\\s*\"([^\"]+)\"/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":13038,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13039,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13058,13059],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13058,13058],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":13043,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13044,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13063,13064],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13063,13063],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":13048,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13049,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13068,13069],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13068,13068],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^style\\s*=\\s*\\'([^\\']+)\\'/i can be optimized to /^style\\s*=\\s*'([^']+)'/i.","line":2,"column":13066,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":13094,"fix":{"range":[13086,13114],"text":"/^style\\s*=\\s*'([^']+)'/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":13080,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13081,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13100,13101],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13100,13100],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":13085,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13086,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13105,13106],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13105,13105],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":13090,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13091,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13110,13111],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13110,13110],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^style\\s*=\\s*([^\\\"\\'>\\s]+)/i can be optimized to /^style\\s*=\\s*([^\\s\"'>]+)/i.","line":2,"column":13108,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":13137,"fix":{"range":[13128,13157],"text":"/^style\\s*=\\s*([^\\s\"'>]+)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":13125,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13126,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13145,13146],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13145,13145],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":13127,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":13128,"suggestions":[{"messageId":"removeEscape","fix":{"range":[13147,13148],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[13147,13147],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[\\s\\S]+/ can be optimized to /^[\\S\\s]+/.","line":2,"column":13164,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":13174,"fix":{"range":[13184,13194],"text":"/^[\\S\\s]+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[\\s\\S]+/ can be optimized to /^[\\S\\s]+/.","line":2,"column":14036,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":14046,"fix":{"range":[14056,14066],"text":"/^[\\S\\s]+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14075,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14097,"fix":{"range":[14095,14098],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14101,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14123,"fix":{"range":[14121,14124],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14123,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14142,"fix":{"range":[14143,14146],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'V'.","line":2,"column":14142,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":2,"endColumn":14143,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'V'.","line":2,"column":14157,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":2,"endColumn":14158,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'V'.","line":2,"column":14173,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":2,"endColumn":14174,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `W` should be named `error`.","line":2,"column":14206,"nodeType":"Identifier","messageId":"catch-error-name","endLine":2,"endColumn":14207,"fix":{"range":[14226,14285],"text":"error){if(\"console\" in window){console.log(error&&error.stack?error.stack:error"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":14225,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":14231,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":2,"column":14233,"nodeType":"MemberExpression","messageId":"unexpected","endLine":2,"endColumn":14244,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14253,14286],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14287,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14323,"fix":{"range":[14307,14310],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":2,"column":14293,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":14301,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14350,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14401,"fix":{"range":[14370,14373],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/consistent-function-scoping","severity":2,"message":"Move function 'Y' to the outer scope.","line":2,"column":14440,"nodeType":"FunctionDeclaration","messageId":"consistent-function-scoping","endLine":2,"endColumn":14450,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":2,"column":14462,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":14470,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelectorAll()` over `.getElementsByTagName()`.","line":2,"column":14471,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":2,"endColumn":14491,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14496,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14533,"fix":{"range":[14516,14519],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14533,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14542,"fix":{"range":[14553,14556],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14546,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14554,"fix":{"range":[14566,14569],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14578,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14601,"fix":{"range":[14598,14601],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":14588,"nodeType":"MemberExpression","endLine":2,"endColumn":14594,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":2,"column":14618,"nodeType":"MemberExpression","endLine":2,"endColumn":14627,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2,"column":14618,"nodeType":"MemberExpression","endLine":2,"endColumn":14624,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14638,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14649,"fix":{"range":[14658,14661],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"object-shorthand","severity":2,"message":"Expected method shorthand.","line":2,"column":14663,"nodeType":"Property","messageId":"expectedMethodShorthand","endLine":2,"endColumn":14697,"fix":{"range":[14683,14717],"text":"now(){return +(new Date)}"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-date-now","severity":2,"message":"Prefer `Date.now()` over `new Date()`.","line":2,"column":14685,"nodeType":"UnaryExpression","messageId":"prefer-date","endLine":2,"endColumn":14696,"fix":{"range":[14705,14716],"text":"Date.now()"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14699,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14707,"fix":{"range":[14719,14722],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14707,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14713,"fix":{"range":[14727,14730],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14713,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14753,"fix":{"range":[14733,14736],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14753,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14778,"fix":{"range":[14773,14776],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ae' is assigned a value but never used.","line":2,"column":14757,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14759,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14791,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14855,"fix":{"range":[14811,14814],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":14799,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":14805,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14888,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14900,"fix":{"range":[14908,14911],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":2,"column":14895,"nodeType":"MemberExpression","endLine":2,"endColumn":14899,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14900,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14920,"fix":{"range":[14920,14923],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-includes","severity":2,"message":"Use `.includes()`, rather than `.indexOf()`, when checking for existence.","line":2,"column":14926,"nodeType":"Identifier","messageId":"prefer-includes","endLine":2,"endColumn":14933,"fix":{"range":[14943,14971],"text":"ai.includes(\"prettyprint\")"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14953,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14973,"fix":{"range":[14973,14976],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":14973,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":14980,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":15063,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15076,"fix":{"range":[15083,15086],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":15080,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15100,"fix":{"range":[15100,15103],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-includes","severity":2,"message":"Use `.includes()`, rather than `.indexOf()`, when checking for existence.","line":2,"column":15215,"nodeType":"Identifier","messageId":"prefer-includes","endLine":2,"endColumn":15222,"fix":{"range":[15222,15260],"text":"ak.className.includes(\"prettyprint\")"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":15265,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":2,"endColumn":15318,"fix":{"range":[15285,15288],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":15291,"nodeType":"Literal","endLine":2,"endColumn":15316,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":2,"column":15321,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":2,"endColumn":15361,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/explicit-length-check","severity":2,"message":"Use `.length > 0` when checking length is not zero.","line":2,"column":15331,"nodeType":"MemberExpression","messageId":"non-zero","endLine":2,"endColumn":15343,"fix":{"range":[15351,15363],"text":"af[1].length > 0"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":15491,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15497,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":15515,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15521,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":2,"column":15536,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15542,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":15786,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15788,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":15809,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15811,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":15835,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15837,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":15875,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15877,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<\\!--[\\s\\S]*?(?:-\\->|$)/ can be optimized to /^<!--[\\S\\s]*?(?:-->|$)/.","line":2,"column":15889,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":15915,"fix":{"range":[15909,15935],"text":"/^<!--[\\S\\s]*?(?:-->|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\!.","line":2,"column":15892,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":15893,"suggestions":[{"messageId":"removeEscape","fix":{"range":[15912,15913],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[15912,15912],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":2,"column":15908,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":15909,"suggestions":[{"messageId":"removeEscape","fix":{"range":[15928,15929],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[15928,15928],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":15918,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":15920,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<\\?([\\s\\S]+?)(?:\\?>|$)/ can be optimized to /^<\\?([\\S\\s]+?)(?:\\?>|$)/.","line":2,"column":15965,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":15990,"fix":{"range":[15985,16010],"text":"/^<\\?([\\S\\s]+?)(?:\\?>|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<%([\\s\\S]+?)(?:%>|$)/ can be optimized to /^<%([\\S\\s]+?)(?:%>|$)/.","line":2,"column":16001,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16024,"fix":{"range":[16021,16044],"text":"/^<%([\\S\\s]+?)(?:%>|$)/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i can be optimized to /^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i.","line":2,"column":16035,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16075,"fix":{"range":[16055,16095],"text":"/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<script\\b[^>]*type\\s*=\\s*['\"]?text\\/x-handlebars-template['\"]?\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i can be optimized to /^<script\\b[^>]*type\\s*=\\s*[\"']?text\\/x-handlebars-template[\"']?\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i.","line":2,"column":16096,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16199,"fix":{"range":[16116,16219],"text":"/^<script\\b[^>]*type\\s*=\\s*[\"']?text\\/x-handlebars-template[\"']?\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i can be optimized to /^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i.","line":2,"column":16212,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16260,"fix":{"range":[16232,16280],"text":"/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i can be optimized to /^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i.","line":2,"column":16274,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16320,"fix":{"range":[16294,16340],"text":"/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16362,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16364,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^{{[#^>/]?\\s*[\\w.][^}]*}}/ can be optimized to /^{{[#/>^]?\\s*[\\w.][^}]*}}/.","line":2,"column":16380,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16407,"fix":{"range":[16400,16427],"text":"/^{{[#/>^]?\\s*[\\w.][^}]*}}/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16410,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16412,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16453,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16455,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16498,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16500,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16551,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16553,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16574,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16576,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16597,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16599,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[ \\t\\r\\n\\f]+/ can be optimized to /^[\\t\\n\\f\\r ]+/.","line":2,"column":16609,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16624,"fix":{"range":[16629,16644],"text":"/^[\\t\\n\\f\\r ]+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16646,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16648,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":16659,"nodeType":"Literal","endLine":2,"endColumn":16711,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/ can be optimized to /^\"(?:[^\\n\\f\\r\"\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*\"/.","line":2,"column":16659,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16711,"fix":{"range":[16679,16731],"text":"/^\"(?:[^\\n\\f\\r\"\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*\"/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":16661,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16662,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16681,16682],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16681,16681],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":16676,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16677,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16696,16697],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16696,16696],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":16708,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16709,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16728,16729],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16728,16728],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16719,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16721,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":16732,"nodeType":"Literal","endLine":2,"endColumn":16784,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/ can be optimized to /^'(?:[^\\n\\f\\r'\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*'/.","line":2,"column":16732,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16784,"fix":{"range":[16752,16804],"text":"/^'(?:[^\\n\\f\\r'\\\\]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\S\\s])*'/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":16734,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16735,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16754,16755],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16754,16754],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":16749,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16750,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16769,16770],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16769,16769],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":16781,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16782,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16801,16802],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16801,16801],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^url\\(([^\\)\\\"\\']*)\\)/i can be optimized to /^url\\(([^\"')]*)\\)/i.","line":2,"column":16807,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16830,"fix":{"range":[16827,16850],"text":"/^url\\(([^\"')]*)\\)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":2,"column":16817,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16818,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16837,16838],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16837,16837],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":16819,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16820,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16839,16840],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16839,16839],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":16821,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16822,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16841,16842],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16841,16841],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":16833,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":16835,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i can be optimized to /^(?:url|rgb|!important|@import|@page|@media|@charset|inherit)(?=[^\\w\\-]|$)/i.","line":2,"column":16847,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":16925,"fix":{"range":[16867,16945],"text":"/^(?:url|rgb|!important|@import|@page|@media|@charset|inherit)(?=[^\\w\\-]|$)/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\!.","line":2,"column":16860,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16861,"suggestions":[{"messageId":"removeEscape","fix":{"range":[16880,16881],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[16880,16880],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":16947,"nodeType":"Literal","endLine":2,"endColumn":17023,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i can be optimized to /^(-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*)\\s*:/i.","line":2,"column":16947,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17023,"fix":{"range":[16967,17043],"text":"/^(-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*)\\s*:/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":2,"column":16991,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":16992,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17011,17012],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17011,17011],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17026,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17028,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":17040,"nodeType":"Literal","endLine":2,"endColumn":17076,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\// can be optimized to /^\\/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*\\//.","line":2,"column":17040,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17076,"fix":{"range":[17060,17096],"text":"/^\\/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*\\//"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":2,"column":17059,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17060,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17079,17080],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17079,17079],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17079,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17081,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17111,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17113,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":17125,"nodeType":"Literal","endLine":2,"endColumn":17158,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17161,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17163,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":17175,"nodeType":"Literal","endLine":2,"endColumn":17200,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^#(?:[0-9a-f]{3}){1,2}/i can be optimized to /^#(?:[\\da-f]{3}){1,2}/i.","line":2,"column":17175,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17200,"fix":{"range":[17195,17220],"text":"/^#(?:[\\da-f]{3}){1,2}/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17203,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17205,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":17215,"nodeType":"Literal","endLine":2,"endColumn":17282,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i can be optimized to /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*/i.","line":2,"column":17215,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17282,"fix":{"range":[17235,17302],"text":"/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":2,"column":17256,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17257,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17276,17277],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17276,17276],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17285,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17287,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[^\\s\\w\\'\\\"]+/ can be optimized to /^[^\\s\\w\"']+/.","line":2,"column":17303,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17318,"fix":{"range":[17323,17338],"text":"/^[^\\s\\w\"']+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":17311,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17312,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17331,17332],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17331,17331],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":17313,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17314,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17333,17334],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17333,17333],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17331,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17333,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17354,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17356,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17380,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17382,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":2,"column":17394,"nodeType":"Literal","endLine":2,"endColumn":17461,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i can be optimized to /^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*/i.","line":2,"column":17394,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17461,"fix":{"range":[17414,17481],"text":"/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[\\w\\-]|\\\\\\\\[\\da-f]+ ?)*/i"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\-.","line":2,"column":17435,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17436,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17455,17456],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17455,17455],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17477,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17479,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17500,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17502,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'PR' is not defined.","line":2,"column":17526,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":17528,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^[^\\)\\\"\\']+/ can be optimized to /^[^\"')]+/.","line":2,"column":17539,"nodeType":"Literal","messageId":"better-regex","endLine":2,"endColumn":17552,"fix":{"range":[17559,17572],"text":"/^[^\"')]+/"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":2,"column":17543,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17544,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17563,17564],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17563,17563],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\\".","line":2,"column":17545,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17546,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17565,17566],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17565,17565],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\'.","line":2,"column":17547,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":2,"endColumn":17548,"suggestions":[{"messageId":"removeEscape","fix":{"range":[17567,17568],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[17567,17567],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable */\nwindow.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=[\"break,continue,do,else,for,if,return,while\"];var u=[h,\"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];var p=[u,\"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof\"];var l=[p,\"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where\"];var x=[p,\"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient\"];var R=[x,\"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var\"];var r=\"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes\";var w=[p,\"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN\"];var s=\"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END\";var I=[h,\"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None\"];var f=[h,\"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END\"];var H=[h,\"case,done,elif,esac,eval,fi,function,in,local,set,then,until\"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)/;var C=\"str\";var z=\"kwd\";var j=\"com\";var O=\"typ\";var G=\"lit\";var L=\"pun\";var F=\"pln\";var m=\"tag\";var E=\"dec\";var J=\"src\";var P=\"atn\";var n=\"atv\";var N=\"nocode\";var M=\"(?:^^\\\\.?|[+-]|\\\\!|\\\\!=|\\\\!==|\\\\#|\\\\%|\\\\%=|&|&&|&&=|&=|\\\\(|\\\\*|\\\\*=|\\\\+=|\\\\,|\\\\-=|\\\\->|\\\\/|\\\\/=|:|::|\\\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\@|\\\\[|\\\\^|\\\\^=|\\\\^\\\\^|\\\\^\\\\^=|\\\\{|\\\\||\\\\|=|\\\\|\\\\||\\\\|\\\\|=|\\\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*\";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi,\"\"))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if(\"0\"<=af&&af<=\"7\"){return parseInt(ah.substring(1),8)}else{if(af===\"u\"||af===\"x\"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?\"\\\\x0\":\"\\\\x\")+af.toString(16)}var ag=String.fromCharCode(af);if(ag===\"\\\\\"||ag===\"-\"||ag===\"[\"||ag===\"]\"){ag=\"\\\\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp(\"\\\\\\\\u[0-9A-Fa-f]{4}|\\\\\\\\x[0-9A-Fa-f]{2}|\\\\\\\\[0-3][0-7]{0,2}|\\\\\\\\[0-7]{1,2}|\\\\\\\\[\\\\s\\\\S]|-|[^-\\\\\\\\]\",\"g\"));var ak=[];var af=[];var ao=aq[0]===\"^\";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&\"-\"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=[\"[\"];if(ao){an.push(\"^\")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push(\"-\")}an.push(T(at[1]))}}an.push(\"]\");return an.join(\"\")}function W(al){var aj=al.source.match(new RegExp(\"(?:\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}|\\\\\\\\x[A-Fa-f0-9]{2}|\\\\\\\\[0-9]+|\\\\\\\\[^ux0-9]|\\\\(\\\\?[:!=]|[\\\\(\\\\)\\\\^]|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+)\",\"g\"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag===\"(\"){++am;if(an[am]===undefined){aj[ak]=\"(?:\"}}else{if(\"\\\\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]=\"\\\\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if(\"^\"===aj[ak]&&\"^\"!==aj[ak+1]){aj[ak]=\"\"}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai===\"[\"){aj[ak]=X(ag)}else{if(ai!==\"\\\\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return\"[\"+String.fromCharCode(ap&~32,ap|32)+\"]\"})}}}}return aj.join(\"\")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(\"\"+ae)}aa.push(\"(?:\"+W(ae)+\")\")}return new RegExp(aa.join(\"|\"),ac?\"gi\":\"g\")}function a(V){var U=/(?:^|\\s)nocode(?:\\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Y=S&&\"pre\"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if(\"BR\"===ad||\"LI\"===ad){X[W]=\"\\n\";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \\t\\r\\n]+/g,\" \")}else{ac=ac.replace(/\\r\\n?/g,\"\\n\")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join(\"\").replace(/\\n$/,\"\"),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=\"\"+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\\0-\\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap===\"string\"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&\"lang-\"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]===\"string\")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,null,\"'\\\"\"])}else{if(T.multiLineStrings){W.push([C,/^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,null,\"'\\\"`\"])}else{W.push([C,/^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,null,\"\\\"'\"])}}if(T.verbatimStrings){S.push([C,/^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,\"#\"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,null,\"#\"])}S.push([C,/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h|[a-z]\\w*)>/,null])}else{W.push([j,/^#[^\\r\\n]*/,null,\"#\"])}}if(T.cStyleComments){S.push([j,/^\\/\\/[^\\r\\n]*/,null]);S.push([j,/^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,null])}if(T.regexLiterals){var X=(\"/(?=[^/*])(?:[^/\\\\x5B\\\\x5C]|\\\\x5C[\\\\s\\\\S]|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+/\");S.push([\"lang-regex\",new RegExp(\"^\"+M+\"(\"+X+\")\")])}var V=T.types;if(V){S.push([O,V])}var U=(\"\"+T.keywords).replace(/^ | $/g,\"\");if(U.length){S.push([z,new RegExp(\"^(?:\"+U.replace(/[\\s,]+/g,\"|\")+\")\\\\b\"),null])}W.push([F,/^\\s+/,null,\" \\r\\n\\t\\xA0\"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp(\"^(?:0x[a-f0-9]+|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)(?:e[+\\\\-]?\\\\d+)?)[a-z]*\",\"i\"),null,\"0123456789\"],[F,/^\\\\[\\s\\S]?/,null],[L,/^.[^\\s\\w\\.$@\\'\\\"\\`\\/\\#\\\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\\s)nocode(?:\\s|$)/;var ab=/\\r\\n?|\\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue(\"white-space\")}}var Z=S&&\"pre\"===S.substring(0,3);var af=ac.createElement(\"LI\");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if(\"BR\"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute(\"value\",ag)}var aa=ac.createElement(\"OL\");aa.className=\"linenums\";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className=\"L\"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode(\"\\xA0\"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\\bMSIE\\b/.test(navigator.userAgent);var am=/\\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,\"\\r\")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement(\"SPAN\");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn(\"cannot override language handler %s\",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\\s*</.test(S)?\"default-markup\":\"default-code\"}return t[T]}c(K,[\"default-code\"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\\w[^>]*(?:>|$)/],[j,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i]]),[\"default-markup\",\"htm\",\"html\",\"mxml\",\"xhtml\",\"xml\",\"xsl\"]);c(g([[F,/^[\\s]+/,null,\" \\t\\r\\n\"],[n,/^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/,null,\"\\\"'\"]],[[m,/^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],[P,/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],[\"lang-uq.val\",/^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],[L,/^[=<>\\/]+/],[\"lang-js\",/^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-js\",/^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-js\",/^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],[\"lang-css\",/^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],[\"lang-css\",/^style\\s*=\\s*\\'([^\\']+)\\'/i],[\"lang-css\",/^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]]),[\"in.tag\"]);c(g([],[[n,/^[\\s\\S]+/]]),[\"uq.val\"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),[\"c\",\"cc\",\"cpp\",\"cxx\",\"cyc\",\"m\"]);c(i({keywords:\"null,true,false\"}),[\"json\"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),[\"cs\"]);c(i({keywords:x,cStyleComments:true}),[\"java\"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),[\"bsh\",\"csh\",\"sh\"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),[\"cv\",\"py\"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"perl\",\"pl\",\"pm\"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),[\"rb\"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),[\"js\"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),[\"coffee\"]);c(g([],[[C,/^[\\s\\S]+/]]),[\"regex\"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if(\"console\" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement(\"PRE\");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y(\"pre\"),Y(\"code\"),Y(\"xmp\")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/;var ae=/\\bprettyprint\\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf(\"prettyprint\")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&\"CODE\"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName===\"pre\"||ak.tagName===\"code\"||ak.tagName===\"xmp\")&&ak.className&&ak.className.indexOf(\"prettyprint\")>=0){al=true;break}}if(!al){var af=aj.className.match(/\\blinenums\\b(?::(\\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\\!--[\\s\\S]*?(?:-\\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],[\"lang-\",/^<\\?([\\s\\S]+?)(?:\\?>|$)/],[\"lang-\",/^<%([\\s\\S]+?)(?:%>|$)/],[\"lang-\",/^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],[\"lang-handlebars\",/^<script\\b[^>]*type\\s*=\\s*['\"]?text\\/x-handlebars-template['\"]?\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-js\",/^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],[\"lang-css\",/^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],[\"lang-in.tag\",/^(<\\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\\s*[\\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\\s*[\\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),[\"handlebars\",\"hbs\"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \\t\\r\\n\\f]+/,null,\" \\t\\r\\n\\f\"]],[[PR.PR_STRING,/^\\\"(?:[^\\n\\r\\f\\\\\\\"]|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\\"/,null],[PR.PR_STRING,/^\\'(?:[^\\n\\r\\f\\\\\\']|\\\\(?:\\r\\n?|\\n|\\f)|\\\\[\\s\\S])*\\'/,null],[\"lang-css-str\",/^url\\(([^\\)\\\"\\']*)\\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\\!important|@import|@page|@media|@charset|inherit)(?=[^\\-\\w]|$)/i,null],[\"lang-css-kw\",/^(-?(?:[_a-z]|(?:\\\\[0-9a-f]+ ?))(?:[_a-z0-9\\-]|\\\\(?:\\\\[0-9a-f]+ ?))*)\\s*:/i],[PR.PR_COMMENT,/^\\/\\*[^*]*\\*+(?:[^\\/*][^*]*\\*+)*\\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\\d+|\\d*\\.\\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\\s\\w\\'\\\"]+/]]),[\"css\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\\\[\\da-f]+ ?))(?:[_a-z\\d\\-]|\\\\(?:\\\\[\\da-f]+ ?))*/i]]),[\"css-kw\"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\\)\\\"\\']+/]]),[\"css-str\"]);\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/coverage/lcov-report/sorter.js","messages":[{"ruleId":"unicorn/no-abusive-eslint-disable","severity":2,"message":"Specify the rules you want to disable.","line":1,"column":0,"nodeType":null,"messageId":"no-abusive-eslint-disable","endLine":1,"endColumn":21}],"suppressedMessages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":194,"endColumn":6,"fix":{"range":[21,24],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"split","endLine":8,"endColumn":11,"fix":{"range":[82,92],"text":";\n        var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":4,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":8,"endColumn":11,"fix":{"range":[74,77],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":12,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":24,"column":16,"nodeType":"MemberExpression","endLine":24,"endColumn":58,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":28,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelector()` over `.getElementById()`.","line":28,"column":38,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":28,"endColumn":52,"fix":{"range":[794,821],"text":"querySelector('#fileSearch'"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":29,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelectorAll()` over `.getElementsByTagName()`.","line":29,"column":31,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":29,"endColumn":51,"fix":{"range":[860,880],"text":"querySelectorAll"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":31,"column":25,"nodeType":"MemberExpression","endLine":31,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":32,"column":13,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":40,"endColumn":14,"fix":{"range":[996,1259],"text":"row.style.display = row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase()) ? '' : 'none';"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":46,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":46,"endColumn":66,"fix":{"range":[1343,1346],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":46,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelector()` over `.getElementById()`.","line":46,"column":33,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":46,"endColumn":47,"fix":{"range":[1367,1398],"text":"querySelector('#filterTemplate'"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":47,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":47,"endColumn":62,"fix":{"range":[1409,1412],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unicorn/prefer-query-selector","severity":2,"message":"Prefer `.querySelector()` over `.getElementById()`.","line":48,"column":23,"nodeType":"Identifier","messageId":"prefer-query-selector","endLine":48,"endColumn":37,"fix":{"range":[1485,1512],"text":"querySelector('#fileSearch'"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":54,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":58,"endColumn":15,"fix":{"range":[1721,1796],"text":";\n            var colNode;\n            var cols = [];\n            var col;\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":54,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":58,"endColumn":15,"fix":{"range":[1667,1670],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-shadow","severity":2,"message":"'cols' is already declared in the upper scope on line 4 column 9.","line":56,"column":13,"nodeType":"Identifier","messageId":"noShadow","endLine":56,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":61,"column":23,"nodeType":"MemberExpression","endLine":61,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":71,"column":21,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":71,"endColumn":71,"fix":{"range":[2285,2335],"text":"`${colNode.innerHTML  }<span class=\"sorter\"></span>`"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":84,"endColumn":17,"fix":{"range":[2591,2681],"text":";\n            var colNode;\n            var col;\n            var data = {};\n            var i;\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":79,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":84,"endColumn":17,"fix":{"range":[2544,2547],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":86,"column":23,"nodeType":"MemberExpression","endLine":86,"endColumn":35,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":87,"column":19,"nodeType":"MemberExpression","endLine":87,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":98,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":99,"endColumn":15,"fix":{"range":[3123,3137],"text":";\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":98,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":99,"endColumn":15,"fix":{"range":[3075,3078],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":102,"column":13,"nodeType":"MemberExpression","endLine":102,"endColumn":20,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":102,"column":40,"nodeType":"MemberExpression","endLine":102,"endColumn":47,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":107,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":117,"endColumn":15,"fix":{"range":[3383,3756],"text":";\n            var sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            };\n            var finalSorter = sorter;\n            var tableBody = document.querySelector('.coverage-summary tbody');\n            var rowNodes = tableBody.querySelectorAll('tr');\n            var rows = [];\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":107,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":117,"endColumn":15,"fix":{"range":[3358,3361],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":107,"column":13,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":107,"endColumn":34,"fix":{"range":[3362,3383],"text":"{key} = cols[index]"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":107,"column":19,"nodeType":"MemberExpression","endLine":107,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'a'.","line":109,"column":17,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":109,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":109,"column":21,"nodeType":"MemberExpression","endLine":109,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'b'.","line":110,"column":17,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":110,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":110,"column":21,"nodeType":"MemberExpression","endLine":110,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-nested-ternary","severity":2,"message":"Do not nest ternary expressions.","line":111,"column":24,"nodeType":"ConditionalExpression","messageId":"noNestedTernary","endLine":111,"endColumn":50,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'document' is not defined.","line":114,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":126,"column":23,"nodeType":"MemberExpression","endLine":126,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":127,"column":35,"nodeType":"MemberExpression","endLine":127,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":133,"column":35,"nodeType":"MemberExpression","endLine":133,"endColumn":42,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":138,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":139,"endColumn":33,"fix":{"range":[4327,4341],"text":";\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":138,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":139,"endColumn":33,"fix":{"range":[4286,4289],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"one-var","severity":2,"message":"Split 'var' declarations into multiple statements.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"split","endLine":169,"endColumn":15,"fix":{"range":[4785,4815],"text":";\n            var el;\n            var "},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":152,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":169,"endColumn":15,"fix":{"range":[4780,4783],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-shadow","severity":2,"message":"'i' is already declared in the upper scope on line 152 column 13.","line":154,"column":44,"nodeType":"Identifier","messageId":"noShadow","endLine":154,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":155,"column":17,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":155,"endColumn":35,"fix":{"range":[4867,4870],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":155,"column":27,"nodeType":"MemberExpression","endLine":155,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":158,"column":21,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":158,"endColumn":52,"fix":{"range":[4943,4946],"text":"let"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":171,"column":17,"nodeType":"MemberExpression","endLine":171,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-undef","severity":2,"message":"'window' is not defined.","line":196,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":196,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable */\nvar addSorting = (function() {\n    'use strict';\n    var cols,\n        currentSort = {\n            index: 0,\n            desc: false\n        };\n\n    // returns the summary table element\n    function getTable() {\n        return document.querySelector('.coverage-summary');\n    }\n    // returns the thead element of the summary table\n    function getTableHeader() {\n        return getTable().querySelector('thead tr');\n    }\n    // returns the tbody element of the summary table\n    function getTableBody() {\n        return getTable().querySelector('tbody');\n    }\n    // returns the th element for nth column\n    function getNthColumn(n) {\n        return getTableHeader().querySelectorAll('th')[n];\n    }\n\n    function onFilterInput() {\n        const searchValue = document.getElementById('fileSearch').value;\n        const rows = document.getElementsByTagName('tbody')[0].children;\n        for (let i = 0; i < rows.length; i++) {\n            const row = rows[i];\n            if (\n                row.textContent\n                    .toLowerCase()\n                    .includes(searchValue.toLowerCase())\n            ) {\n                row.style.display = '';\n            } else {\n                row.style.display = 'none';\n            }\n        }\n    }\n\n    // loads the search box\n    function addSearchBox() {\n        var template = document.getElementById('filterTemplate');\n        var templateClone = template.content.cloneNode(true);\n        templateClone.getElementById('fileSearch').oninput = onFilterInput;\n        template.parentElement.appendChild(templateClone);\n    }\n\n    // loads all columns\n    function loadColumns() {\n        var colNodes = getTableHeader().querySelectorAll('th'),\n            colNode,\n            cols = [],\n            col,\n            i;\n\n        for (i = 0; i < colNodes.length; i += 1) {\n            colNode = colNodes[i];\n            col = {\n                key: colNode.getAttribute('data-col'),\n                sortable: !colNode.getAttribute('data-nosort'),\n                type: colNode.getAttribute('data-type') || 'string'\n            };\n            cols.push(col);\n            if (col.sortable) {\n                col.defaultDescSort = col.type === 'number';\n                colNode.innerHTML =\n                    colNode.innerHTML + '<span class=\"sorter\"></span>';\n            }\n        }\n        return cols;\n    }\n    // attaches a data attribute to every tr element with an object\n    // of data values keyed by column name\n    function loadRowData(tableRow) {\n        var tableCols = tableRow.querySelectorAll('td'),\n            colNode,\n            col,\n            data = {},\n            i,\n            val;\n        for (i = 0; i < tableCols.length; i += 1) {\n            colNode = tableCols[i];\n            col = cols[i];\n            val = colNode.getAttribute('data-value');\n            if (col.type === 'number') {\n                val = Number(val);\n            }\n            data[col.key] = val;\n        }\n        return data;\n    }\n    // loads all row data\n    function loadData() {\n        var rows = getTableBody().querySelectorAll('tr'),\n            i;\n\n        for (i = 0; i < rows.length; i += 1) {\n            rows[i].data = loadRowData(rows[i]);\n        }\n    }\n    // sorts the table using the data for the ith column\n    function sortByIndex(index, desc) {\n        var key = cols[index].key,\n            sorter = function(a, b) {\n                a = a.data[key];\n                b = b.data[key];\n                return a < b ? -1 : a > b ? 1 : 0;\n            },\n            finalSorter = sorter,\n            tableBody = document.querySelector('.coverage-summary tbody'),\n            rowNodes = tableBody.querySelectorAll('tr'),\n            rows = [],\n            i;\n\n        if (desc) {\n            finalSorter = function(a, b) {\n                return -1 * sorter(a, b);\n            };\n        }\n\n        for (i = 0; i < rowNodes.length; i += 1) {\n            rows.push(rowNodes[i]);\n            tableBody.removeChild(rowNodes[i]);\n        }\n\n        rows.sort(finalSorter);\n\n        for (i = 0; i < rows.length; i += 1) {\n            tableBody.appendChild(rows[i]);\n        }\n    }\n    // removes sort indicators for current column being sorted\n    function removeSortIndicators() {\n        var col = getNthColumn(currentSort.index),\n            cls = col.className;\n\n        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');\n        col.className = cls;\n    }\n    // adds sort indicators for current column being sorted\n    function addSortIndicators() {\n        getNthColumn(currentSort.index).className += currentSort.desc\n            ? ' sorted-desc'\n            : ' sorted';\n    }\n    // adds event listeners for all sorter widgets\n    function enableUI() {\n        var i,\n            el,\n            ithSorter = function ithSorter(i) {\n                var col = cols[i];\n\n                return function() {\n                    var desc = col.defaultDescSort;\n\n                    if (currentSort.index === i) {\n                        desc = !currentSort.desc;\n                    }\n                    sortByIndex(i, desc);\n                    removeSortIndicators();\n                    currentSort.index = i;\n                    currentSort.desc = desc;\n                    addSortIndicators();\n                };\n            };\n        for (i = 0; i < cols.length; i += 1) {\n            if (cols[i].sortable) {\n                // add the click event handler on the th so users\n                // dont have to click on those tiny arrows\n                el = getNthColumn(i).querySelector('.sorter').parentElement;\n                if (el.addEventListener) {\n                    el.addEventListener('click', ithSorter(i));\n                } else {\n                    el.attachEvent('onclick', ithSorter(i));\n                }\n            }\n        }\n    }\n    // adds sorting functionality to the UI\n    return function() {\n        if (!getTable()) {\n            return;\n        }\n        cols = loadColumns();\n        loadData();\n        addSearchBox();\n        addSortIndicators();\n        enableUI();\n    };\n})();\n\nwindow.addEventListener('load', addSorting);\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/database/index.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[65,65],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`bcrypt` import should occur before import of `pg`","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[0,66],"text":"const bcrypt = require('bcrypt');\nconst { Pool } = require('pg');\n"}},{"ruleId":"import/order","severity":2,"message":"`crypto` import should occur before import of `pg`","line":3,"column":16,"nodeType":"CallExpression","endLine":3,"endColumn":33,"fix":{"range":[0,100],"text":"const crypto = require('crypto');\nconst { Pool } = require('pg');\nconst bcrypt = require('bcrypt');\n"}},{"ruleId":"require-await","severity":2,"message":"Static async method 'verifyPassword' has no 'await' expression.","line":55,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":55,"endColumn":30},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":113,"column":68,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":113,"endColumn":96,"fix":{"range":[3565,3593],"text":"`Lead created via ${  source}`"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":238,"column":21,"nodeType":"CallExpression","messageId":"substring","endLine":238,"endColumn":59,"fix":{"range":[7289,7298],"text":"slice"}},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":251,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":257,"endColumn":11},{"ruleId":"require-await","severity":2,"message":"Static async method 'getPool' has no 'await' expression.","line":423,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":423,"endColumn":23}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"const { Pool } = require('pg');\nconst bcrypt = require('bcrypt');\nconst crypto = require('crypto');\n\n// Database connection pool\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || 'postgresql://localhost/dreamer_ai',\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Helper class for database operations\nclass Database {\n  // User Management\n  static async createUser(userData) {\n    const { email, password, firstName, lastName, company, role = 'visitor' } = userData;\n    \n    // Hash password\n    const passwordHash = await bcrypt.hash(password, 10);\n    const emailVerificationToken = crypto.randomBytes(32).toString('hex');\n    \n    const query = `\n      INSERT INTO users (\n        email, password_hash, first_name, last_name, company, \n        role, email_verification_token\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7)\n      RETURNING id, email, first_name, last_name, role, created_at\n    `;\n    \n    const values = [email, passwordHash, firstName, lastName, company, role, emailVerificationToken];\n    const result = await pool.query(query, values);\n    \n    return {\n      user: result.rows[0],\n      verificationToken: emailVerificationToken\n    };\n  }\n\n  static async findUserByEmail(email) {\n    const query = `\n      SELECT \n        id, email, password_hash, first_name, last_name, \n        role, status, email_verified, company\n      FROM users \n      WHERE email = $1 AND status = 'active'\n    `;\n    \n    const result = await pool.query(query, [email]);\n    return result.rows[0];\n  }\n\n  static async verifyPassword(password, passwordHash) {\n    return bcrypt.compare(password, passwordHash);\n  }\n\n  static async createSession(userId, ipAddress, userAgent) {\n    const sessionToken = crypto.randomBytes(32).toString('hex');\n    \n    const query = `\n      INSERT INTO user_sessions (user_id, session_token, ip_address, user_agent, expires_at)\n      VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP + INTERVAL '7 days')\n      RETURNING id, session_token, expires_at\n    `;\n    \n    const values = [userId, sessionToken, ipAddress, userAgent];\n    const result = await pool.query(query, values);\n    \n    // Update last login\n    await pool.query(\n      'UPDATE users SET last_login = CURRENT_TIMESTAMP, login_count = login_count + 1 WHERE id = $1',\n      [userId]\n    );\n    \n    return result.rows[0];\n  }\n\n  static async validateSession(sessionToken) {\n    const query = `\n      SELECT \n        s.id, s.user_id, s.expires_at,\n        u.email, u.first_name, u.last_name, u.role, u.status\n      FROM user_sessions s\n      JOIN users u ON s.user_id = u.id\n      WHERE s.session_token = $1\n      AND s.expires_at > CURRENT_TIMESTAMP\n      AND u.status = 'active'\n    `;\n    \n    const result = await pool.query(query, [sessionToken]);\n    return result.rows[0];\n  }\n\n  // Lead Management\n  static async createLead(leadData) {\n    const { email, firstName, lastName, company, phone, message, inquiryType, source = 'website' } = leadData;\n    \n    const query = `\n      INSERT INTO leads (\n        email, first_name, last_name, company, phone,\n        message, inquiry_type, source\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING id, created_at\n    `;\n    \n    const values = [email, firstName, lastName, company, phone, message, inquiryType, source];\n    const result = await pool.query(query, values);\n    \n    // Log activity\n    await this.logLeadActivity(result.rows[0].id, null, 'created', 'Lead created via ' + source);\n    \n    return result.rows[0];\n  }\n\n  static async logLeadActivity(leadId, userId, activityType, description) {\n    const query = `\n      INSERT INTO lead_activities (lead_id, user_id, activity_type, description)\n      VALUES ($1, $2, $3, $4)\n    `;\n    \n    await pool.query(query, [leadId, userId, activityType, description]);\n  }\n\n  static async getLeads(limit = 50, offset = 0, filters = {}) {\n    let query = `\n      SELECT \n        l.id, l.email, l.first_name, l.last_name, l.company,\n        l.status, l.source, l.score, l.created_at,\n        u.first_name || ' ' || u.last_name as assigned_to_name,\n        COUNT(la.id) as activity_count\n      FROM leads l\n      LEFT JOIN users u ON l.assigned_to = u.id\n      LEFT JOIN lead_activities la ON l.lead_id = la.lead_id\n      WHERE 1=1\n    `;\n    \n    const values = [];\n    let paramCount = 1;\n    \n    if (filters.status) {\n      query += ` AND l.status = $${paramCount}`;\n      values.push(filters.status);\n      paramCount++;\n    }\n    \n    if (filters.source) {\n      query += ` AND l.source = $${paramCount}`;\n      values.push(filters.source);\n      paramCount++;\n    }\n    \n    query += `\n      GROUP BY l.id, u.first_name, u.last_name\n      ORDER BY l.created_at DESC\n      LIMIT $${paramCount} OFFSET $${paramCount + 1}\n    `;\n    \n    values.push(limit, offset);\n    \n    const result = await pool.query(query, values);\n    return result.rows;\n  }\n\n  // Service Bookings\n  static async createBooking(bookingData) {\n    const { userId, serviceId, consultationType, scheduledAt, durationMinutes, notes } = bookingData;\n    \n    const query = `\n      INSERT INTO service_bookings (\n        user_id, service_id, consultation_type,\n        scheduled_at, duration_minutes, notes\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING id, scheduled_at, status\n    `;\n    \n    const values = [userId, serviceId, consultationType, scheduledAt, durationMinutes, notes];\n    const result = await pool.query(query, values);\n    \n    // Log audit\n    await this.logAudit(userId, 'booking_created', 'booking', result.rows[0].id, null, { bookingData });\n    \n    return result.rows[0];\n  }\n\n  static async getAvailableSlots(serviceId, startDate, endDate) {\n    const query = `\n      WITH booked_slots AS (\n        SELECT \n          scheduled_at,\n          scheduled_at + (duration_minutes || ' minutes')::INTERVAL as end_time\n        FROM service_bookings\n        WHERE status IN ('pending', 'confirmed')\n        AND scheduled_at >= $2\n        AND scheduled_at < $3\n        AND service_id = $1\n      )\n      SELECT \n        slot_time::TIMESTAMP as available_slot\n      FROM generate_series(\n        $2::TIMESTAMP,\n        $3::TIMESTAMP - INTERVAL '1 hour',\n        '30 minutes'::INTERVAL\n      ) as slot_time\n      WHERE NOT EXISTS (\n        SELECT 1 \n        FROM booked_slots \n        WHERE slot_time < end_time \n        AND slot_time + INTERVAL '1 hour' > scheduled_at\n      )\n      AND EXTRACT(DOW FROM slot_time) BETWEEN 1 AND 5\n      AND EXTRACT(HOUR FROM slot_time) BETWEEN 9 AND 16\n    `;\n    \n    const result = await pool.query(query, [serviceId, startDate, endDate]);\n    return result.rows.map(row => row.available_slot);\n  }\n\n  // Chat Management\n  static async saveChat(sessionId, userId, messages) {\n    const client = await pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Create or get conversation\n      const convQuery = `\n        INSERT INTO chat_conversations (user_id, session_id, title)\n        VALUES ($1, $2, $3)\n        ON CONFLICT (session_id) \n        DO UPDATE SET updated_at = CURRENT_TIMESTAMP\n        RETURNING id\n      `;\n      \n      const title = messages[0]?.content.substring(0, 100) || 'New Conversation';\n      const convResult = await client.query(convQuery, [userId, sessionId, title]);\n      const conversationId = convResult.rows[0].id;\n      \n      // Save messages\n      for (const message of messages) {\n        const msgQuery = `\n          INSERT INTO chat_messages (\n            conversation_id, role, content, tokens_used, model_used\n          )\n          VALUES ($1, $2, $3, $4, $5)\n        `;\n        \n        await client.query(msgQuery, [\n          conversationId,\n          message.role,\n          message.content,\n          message.tokens_used || 0,\n          message.model_used || 'gpt-4'\n        ]);\n      }\n      \n      await client.query('COMMIT');\n      return conversationId;\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  static async getChatHistory(sessionId, userId, limit = 20) {\n    const query = `\n      SELECT \n        m.id, m.role, m.content, m.created_at,\n        c.title as conversation_title\n      FROM chat_messages m\n      JOIN chat_conversations c ON m.conversation_id = c.id\n      WHERE (c.session_id = $1 OR (c.user_id = $2 AND $2 IS NOT NULL))\n      ORDER BY m.created_at DESC\n      LIMIT $3\n    `;\n    \n    const result = await pool.query(query, [sessionId, userId, limit]);\n    return result.rows.reverse(); // Return in chronological order\n  }\n\n  // Content Management\n  static async getContentBySlug(slug) {\n    const query = `\n      SELECT \n        id, title, slug, page_type, content,\n        meta_title, meta_description, meta_keywords,\n        og_image, published_at, view_count\n      FROM content_pages\n      WHERE slug = $1\n      AND status = 'published'\n      AND published_at <= CURRENT_TIMESTAMP\n    `;\n    \n    const result = await pool.query(query, [slug]);\n    \n    if (result.rows[0]) {\n      // Increment view count\n      await pool.query('UPDATE content_pages SET view_count = view_count + 1 WHERE id = $1', [result.rows[0].id]);\n    }\n    \n    return result.rows[0];\n  }\n\n  static async getCaseStudies() {\n    const query = `\n      SELECT \n        c.id, c.title, c.slug, c.client_name, c.industry,\n        c.challenge, c.solution, c.results, c.technologies,\n        c.metrics, c.featured_image, c.published_at,\n        COALESCE(\n          json_agg(\n            json_build_object(\n              'id', t.id,\n              'client_name', t.client_name,\n              'client_title', t.client_title,\n              'content', t.content,\n              'rating', t.rating\n            ) \n            ORDER BY t.created_at DESC\n          ) FILTER (WHERE t.id IS NOT NULL), \n          '[]'\n        ) as testimonials\n      FROM case_studies c\n      LEFT JOIN testimonials t ON t.case_study_id = c.id AND t.is_active = TRUE\n      WHERE c.status = 'published'\n      GROUP BY c.id\n      ORDER BY c.published_at DESC\n    `;\n    \n    const result = await pool.query(query);\n    return result.rows;\n  }\n\n  static async getTestimonials(featured = false) {\n    let query = `\n      SELECT \n        id, client_name, client_title, client_company,\n        client_image, content, rating\n      FROM testimonials\n      WHERE is_active = TRUE\n    `;\n    \n    if (featured) {\n      query += ' AND is_featured = TRUE';\n    }\n    \n    query += ' ORDER BY sort_order, created_at DESC';\n    \n    const result = await pool.query(query);\n    return result.rows;\n  }\n\n  // Newsletter\n  static async subscribeNewsletter(email, tags = []) {\n    const unsubscribeToken = crypto.randomBytes(32).toString('hex');\n    \n    const query = `\n      INSERT INTO newsletter_subscriptions (email, tags, unsubscribe_token)\n      VALUES ($1, $2, $3)\n      ON CONFLICT (email) \n      DO UPDATE SET \n        is_active = TRUE,\n        tags = newsletter_subscriptions.tags || $2,\n        updated_at = CURRENT_TIMESTAMP\n      RETURNING id, is_active\n    `;\n    \n    const result = await pool.query(query, [email, JSON.stringify(tags), unsubscribeToken]);\n    return result.rows[0];\n  }\n\n  // Analytics\n  static async trackEvent(eventData) {\n    const { userId, sessionId, eventType, pageUrl, properties = {}, ipAddress, userAgent } = eventData;\n    \n    const query = `\n      INSERT INTO analytics_events (\n        user_id, session_id, event_type, page_url,\n        properties, ip_address, user_agent\n      )\n      VALUES ($1, $2, $3, $4, $5, $6, $7)\n    `;\n    \n    await pool.query(query, [\n      userId, sessionId, eventType, pageUrl,\n      JSON.stringify(properties), ipAddress, userAgent\n    ]);\n  }\n\n  // Audit Logging\n  static async logAudit(userId, action, entityType, entityId, oldValues, newValues) {\n    const query = `\n      INSERT INTO audit_logs (\n        user_id, action, entity_type, entity_id,\n        old_values, new_values\n      )\n      VALUES ($1, $2, $3, $4, $5, $6)\n    `;\n    \n    await pool.query(query, [\n      userId, action, entityType, entityId,\n      oldValues ? JSON.stringify(oldValues) : null,\n      newValues ? JSON.stringify(newValues) : null\n    ]);\n  }\n\n  // Utility Methods\n  static async healthCheck() {\n    try {\n      const result = await pool.query('SELECT NOW()');\n      return { status: 'healthy', timestamp: result.rows[0].now };\n    } catch (error) {\n      return { status: 'unhealthy', error: error.message };\n    }\n  }\n\n  static async getPool() {\n    return pool;\n  }\n}\n\nmodule.exports = Database;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/database/migrate-simple.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `migrateSimple.js` or `MigrateSimple.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[64,64],"text":"\n"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":10,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[228,276],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":14,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[430,471],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":17,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[496,543],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[702,744],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":25,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":25,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[826,864],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":30,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1034,1067],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `err`.","line":31,"column":16,"nodeType":"Identifier","messageId":"with-name","endLine":31,"endColumn":19,"fix":{"range":[1082,1088],"text":""}},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `err` should be named `error`.","line":31,"column":16,"nodeType":"Identifier","messageId":"catch-error-name","endLine":31,"endColumn":19,"fix":{"range":[1083,1086],"text":"error"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":32,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1098,1154],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":36,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1174,1230],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const fs = require('fs').promises;\nconst path = require('path');\nconst { pool } = require('../config/database');\n\nasync function runMigrations() {\n  const client = await pool.connect();\n  \n  try {\n    // Run the main schema\n    console.log('🚀 Setting up database schema...');\n    const schemaPath = path.join(__dirname, 'schema.sql');\n    const schema = await fs.readFile(schemaPath, 'utf8');\n    await client.query(schema);\n    console.log('✅ Database schema created');\n\n    // Run indices\n    console.log('🚀 Creating database indices...');\n    const indicesPath = path.join(__dirname, 'indices.sql');\n    const indices = await fs.readFile(indicesPath, 'utf8');\n    await client.query(indices);\n    console.log('✅ Database indices created');\n\n    // Run seed data if needed\n    if (process.argv.includes('--seed')) {\n      console.log('🚀 Seeding database...');\n      const seedPath = path.join(__dirname, 'seed.sql');\n      try {\n        const seed = await fs.readFile(seedPath, 'utf8');\n        await client.query(seed);\n        console.log('✅ Database seeded');\n      } catch (err) {\n        console.log('ℹ️  No seed file found, skipping seeding');\n      }\n    }\n\n    console.log('✅ All migrations completed successfully!');\n  } catch (error) {\n    console.error('❌ Migration failed:', error.message);\n    process.exit(1);\n  } finally {\n    client.release();\n    await pool.end();\n  }\n}\n\n// Run migrations if this file is executed directly\nif (require.main === module) {\n  runMigrations();\n}\n\nmodule.exports = runMigrations;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/database/migrate.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[64,64],"text":"\n"}},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readdir from package \"fs\" with non literal argument at index 0","line":31,"column":25,"nodeType":"CallExpression","endLine":31,"endColumn":55},{"ruleId":"require-await","severity":2,"message":"Async method 'calculateChecksum' has no 'await' expression.","line":44,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":44,"endColumn":26},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFile from package \"fs\" with non literal argument at index 0","line":52,"column":27,"nodeType":"CallExpression","endLine":52,"endColumn":56},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2124,2183],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":75,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2259,2302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2705,2777],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFile from package \"fs\" with non literal argument at index 0","line":113,"column":29,"nodeType":"CallExpression","endLine":113,"endColumn":62},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":121,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3878,3919],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-set-has","severity":2,"message":"`executedFilenames` should be a `Set`, and use `executedFilenames.has()` to check existence or non-existence.","line":144,"column":13,"nodeType":"Identifier","messageId":"error","endLine":144,"endColumn":30,"fix":{"range":[4532,4675],"text":"new Set(executedMigrations.map(m => m.filename));\n      \n      const pendingMigrations = migrationFiles.filter(\n        f => !executedFilenames.has"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":151,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":151,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4747,4788],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":155,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":155,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4826,4899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":158,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":158,"endColumn":47},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":161,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":161,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5027,5084],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":178,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5457,5497],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5504,5575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":180,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5582,5665],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":185,"column":26,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":188,"endColumn":12},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":190,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6053,6187],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":194,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6215,6265],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":220,"column":5,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":220,"endColumn":38},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":228,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6913,7247],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const fs = require('fs').promises;\nconst path = require('path');\nconst { Pool } = require('pg');\nrequire('dotenv').config();\n\nclass DatabaseMigrator {\n  constructor() {\n    this.pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n    });\n    this.migrationsDir = path.join(__dirname, 'migrations');\n  }\n\n  async init() {\n    // Create migrations table if it doesn't exist\n    await this.pool.query(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id SERIAL PRIMARY KEY,\n        filename VARCHAR(255) UNIQUE NOT NULL,\n        executed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n        checksum VARCHAR(64) NOT NULL,\n        execution_time_ms INTEGER,\n        success BOOLEAN DEFAULT TRUE,\n        error_message TEXT\n      )\n    `);\n  }\n\n  async getMigrationFiles() {\n    const files = await fs.readdir(this.migrationsDir);\n    return files\n      .filter(f => f.endsWith('.sql'))\n      .sort();\n  }\n\n  async getExecutedMigrations() {\n    const result = await this.pool.query(\n      'SELECT filename, checksum FROM migrations WHERE success = TRUE ORDER BY filename'\n    );\n    return result.rows;\n  }\n\n  async calculateChecksum(content) {\n    const crypto = require('crypto');\n    return crypto.createHash('sha256').update(content).digest('hex');\n  }\n\n  async executeMigration(filename) {\n    const startTime = Date.now();\n    const filepath = path.join(this.migrationsDir, filename);\n    const content = await fs.readFile(filepath, 'utf8');\n    const checksum = await this.calculateChecksum(content);\n\n    const client = await this.pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Check if migration was already executed\n      const existing = await client.query(\n        'SELECT id, checksum FROM migrations WHERE filename = $1',\n        [filename]\n      );\n      \n      if (existing.rows.length > 0) {\n        if (existing.rows[0].checksum !== checksum) {\n          throw new Error(`Migration ${filename} has been modified since last execution!`);\n        }\n        console.log(`⏭️  Skipping ${filename} (already executed)`);\n        await client.query('COMMIT');\n        return;\n      }\n      \n      console.log(`🚀 Executing ${filename}...`);\n      \n      // Execute migration\n      await client.query(content);\n      \n      // Record successful migration\n      const executionTime = Date.now() - startTime;\n      await client.query(`\n        INSERT INTO migrations (filename, checksum, execution_time_ms, success)\n        VALUES ($1, $2, $3, TRUE)\n      `, [filename, checksum, executionTime]);\n      \n      await client.query('COMMIT');\n      console.log(`✅ ${filename} executed successfully (${executionTime}ms)`);\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      \n      // Record failed migration\n      await client.query(`\n        INSERT INTO migrations (filename, checksum, execution_time_ms, success, error_message)\n        VALUES ($1, $2, $3, FALSE, $4)\n        ON CONFLICT (filename) DO UPDATE\n        SET error_message = $4, executed_at = CURRENT_TIMESTAMP\n      `, [filename, checksum, Date.now() - startTime, error.message]);\n      \n      console.error(`❌ ${filename} failed:`, error.message);\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async rollback(filename) {\n    const rollbackFile = filename.replace('.sql', '.rollback.sql');\n    const rollbackPath = path.join(this.migrationsDir, rollbackFile);\n    \n    try {\n      const content = await fs.readFile(rollbackPath, 'utf8');\n      const client = await this.pool.connect();\n      \n      try {\n        await client.query('BEGIN');\n        await client.query(content);\n        await client.query('DELETE FROM migrations WHERE filename = $1', [filename]);\n        await client.query('COMMIT');\n        console.log(`⏪ Rolled back ${filename}`);\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      } finally {\n        client.release();\n      }\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        console.error(`❌ No rollback file found for ${filename}`);\n      } else {\n        console.error(`❌ Rollback failed for ${filename}:`, error.message);\n      }\n      throw error;\n    }\n  }\n\n  async run() {\n    try {\n      await this.init();\n      \n      const migrationFiles = await this.getMigrationFiles();\n      const executedMigrations = await this.getExecutedMigrations();\n      const executedFilenames = executedMigrations.map(m => m.filename);\n      \n      const pendingMigrations = migrationFiles.filter(\n        f => !executedFilenames.includes(f)\n      );\n      \n      if (pendingMigrations.length === 0) {\n        console.log('✨ Database is up to date!');\n        return;\n      }\n      \n      console.log(`📦 Found ${pendingMigrations.length} pending migration(s)`);\n      \n      for (const migration of pendingMigrations) {\n        await this.executeMigration(migration);\n      }\n      \n      console.log('🎉 All migrations completed successfully!');\n      \n    } catch (error) {\n      console.error('💥 Migration failed:', error.message);\n      process.exit(1);\n    } finally {\n      await this.pool.end();\n    }\n  }\n\n  async status() {\n    try {\n      await this.init();\n      \n      const migrationFiles = await this.getMigrationFiles();\n      const executedMigrations = await this.getExecutedMigrations();\n      \n      console.log('\\n📊 Migration Status:\\n');\n      console.log('File                          | Status    | Executed At');\n      console.log('------------------------------|-----------|------------------------');\n      \n      for (const file of migrationFiles) {\n        const executed = executedMigrations.find(m => m.filename === file);\n        if (executed) {\n          const result = await this.pool.query(\n            'SELECT executed_at FROM migrations WHERE filename = $1 AND success = TRUE',\n            [file]\n          );\n          const executedAt = result.rows[0]?.executed_at;\n          console.log(\n            `${file.padEnd(30)} | ✅ Done   | ${executedAt ? new Date(executedAt).toISOString() : 'Unknown'}`\n          );\n        } else {\n          console.log(`${file.padEnd(30)} | ⏳ Pending | -`);\n        }\n      }\n      \n    } catch (error) {\n      console.error('Error checking status:', error.message);\n      process.exit(1);\n    } finally {\n      await this.pool.end();\n    }\n  }\n}\n\n// CLI handling\nconst command = process.argv[2];\nconst migrator = new DatabaseMigrator();\n\nswitch (command) {\n  case 'up':\n  case 'migrate':\n    migrator.run();\n    break;\n  case 'status':\n    migrator.status();\n    break;\n  case 'rollback':\n    const filename = process.argv[3];\n    if (!filename) {\n      console.error('Please specify a migration file to rollback');\n      process.exit(1);\n    }\n    migrator.rollback(filename);\n    break;\n  default:\n    console.log(`\nDatabase Migration Tool\n\nCommands:\n  npm run migrate           Run all pending migrations\n  npm run migrate:status    Show migration status\n  npm run migrate:rollback  <filename> Rollback a specific migration\n\nExamples:\n  npm run migrate\n  npm run migrate:status\n  npm run migrate:rollback 001_initial_schema.sql\n    `);\n    process.exit(0);\n}\n\nmodule.exports = DatabaseMigrator;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/database/run-migrations.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `runMigrations.js` or `RunMigrations.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":18,"nodeType":"CallExpression","endLine":1,"endColumn":31,"fix":{"range":[31,31],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`pg` import should occur after import of `path`","line":1,"column":18,"nodeType":"CallExpression","endLine":1,"endColumn":31},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[756,812],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":36,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":36,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1144,1186],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":39,"column":21,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":39,"endColumn":56},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFile from package \"fs\" with non literal argument at index 0","line":39,"column":27,"nodeType":"CallExpression","endLine":39,"endColumn":56},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":42,"column":24,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":42,"endColumn":44},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":44,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":44,"endColumn":38},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":45,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":45,"endColumn":34},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":46,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":49,"endColumn":12},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":50,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":50,"endColumn":39},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":51,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1667,1725],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":54,"column":11,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":54,"endColumn":41},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1954,1999],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2019,2085],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const { Pool } = require('pg');\nconst fs = require('fs').promises;\nconst path = require('path');\nrequire('dotenv').config();\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL\n});\n\nasync function runMigrations() {\n  try {\n    // Create migrations tracking table if it doesn't exist\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id SERIAL PRIMARY KEY,\n        filename VARCHAR(255) UNIQUE NOT NULL,\n        executed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Get list of migration files\n    const migrationsDir = path.join(__dirname, 'migrations');\n    const files = await fs.readdir(migrationsDir);\n    const sqlFiles = files.filter(f => f.endsWith('.sql')).sort();\n\n    console.log(`Found ${sqlFiles.length} migration files`);\n\n    // Check which migrations have been run\n    const executedResult = await pool.query('SELECT filename FROM migrations');\n    const executed = new Set(executedResult.rows.map(r => r.filename));\n\n    // Run pending migrations\n    let migrationsRun = 0;\n    for (const file of sqlFiles) {\n      if (!executed.has(file)) {\n        console.log(`Running migration: ${file}`);\n        \n        const filePath = path.join(migrationsDir, file);\n        const sql = await fs.readFile(filePath, 'utf8');\n        \n        // Run migration in a transaction\n        const client = await pool.connect();\n        try {\n          await client.query('BEGIN');\n          await client.query(sql);\n          await client.query(\n            'INSERT INTO migrations (filename) VALUES ($1)',\n            [file]\n          );\n          await client.query('COMMIT');\n          console.log(`✓ Migration ${file} completed successfully`);\n          migrationsRun++;\n        } catch (error) {\n          await client.query('ROLLBACK');\n          throw error;\n        } finally {\n          client.release();\n        }\n      }\n    }\n\n    if (migrationsRun === 0) {\n      console.log('All migrations are up to date');\n    } else {\n      console.log(`\\n✓ Successfully ran ${migrationsRun} migration(s)`);\n    }\n\n  } catch (error) {\n    console.error('Migration error:', error);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\n// Run migrations\nrunMigrations().catch(console.error);","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/database/setup.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":20,"nodeType":"CallExpression","endLine":1,"endColumn":33,"fix":{"range":[33,33],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`pg` import should occur after import of `path`","line":1,"column":20,"nodeType":"CallExpression","endLine":1,"endColumn":33},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":17,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[464,505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":30,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[858,903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":32,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":32,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[923,976],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":47,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1322,1372],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1556,1597],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1797,1839],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `err`.","line":62,"column":14,"nodeType":"Identifier","messageId":"with-name","endLine":62,"endColumn":17,"fix":{"range":[1852,1858],"text":""}},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `err` should be named `error`.","line":62,"column":14,"nodeType":"Identifier","messageId":"catch-error-name","endLine":62,"endColumn":17,"fix":{"range":[1853,1856],"text":"error"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":63,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1866,1938],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":67,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1976,2018],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const { Client } = require('pg');\nconst fs = require('fs').promises;\nconst path = require('path');\nrequire('dotenv').config();\n\nasync function setupDatabase() {\n  // Connect to PostgreSQL without specifying a database\n  const client = new Client({\n    host: process.env.DB_HOST || 'localhost',\n    port: process.env.DB_PORT || 5432,\n    user: process.env.DB_USER || 'postgres',\n    password: process.env.DB_PASSWORD,\n  });\n\n  try {\n    await client.connect();\n    console.log('✅ Connected to PostgreSQL');\n\n    // Create database if it doesn't exist\n    const dbName = process.env.DB_NAME || 'dreamer_ai';\n    \n    // Check if database exists\n    const checkDb = await client.query(\n      \"SELECT 1 FROM pg_database WHERE datname = $1\",\n      [dbName]\n    );\n\n    if (checkDb.rows.length === 0) {\n      await client.query(`CREATE DATABASE ${dbName}`);\n      console.log(`✅ Created database: ${dbName}`);\n    } else {\n      console.log(`ℹ️  Database ${dbName} already exists`);\n    }\n\n    await client.end();\n\n    // Connect to the new database\n    const dbClient = new Client({\n      host: process.env.DB_HOST || 'localhost',\n      port: process.env.DB_PORT || 5432,\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD,\n      database: dbName,\n    });\n\n    await dbClient.connect();\n    console.log(`✅ Connected to database: ${dbName}`);\n\n    // Run schema SQL\n    const schemaPath = path.join(__dirname, 'schema.sql');\n    const schema = await fs.readFile(schemaPath, 'utf8');\n    \n    await dbClient.query(schema);\n    console.log('✅ Database schema created');\n\n    // Create indices\n    const indicesPath = path.join(__dirname, 'indices.sql');\n    try {\n      const indices = await fs.readFile(indicesPath, 'utf8');\n      await dbClient.query(indices);\n      console.log('✅ Database indices created');\n    } catch (err) {\n      console.log('ℹ️  No indices.sql file found, skipping indices creation');\n    }\n\n    await dbClient.end();\n    console.log('✅ Database setup complete!');\n\n  } catch (error) {\n    console.error('❌ Database setup failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run setup if this file is executed directly\nif (require.main === module) {\n  setupDatabase();\n}\n\nmodule.exports = setupDatabase;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/auth.js","messages":[{"ruleId":"import/order","severity":2,"message":"`jsonwebtoken` import should occur after import of `express-rate-limit`","line":1,"column":13,"nodeType":"CallExpression","endLine":1,"endColumn":36},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[70,70],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`bcrypt` import should occur after import of `crypto`","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[37,144],"text":"const { promisify } = require('util');\nconst crypto = require('crypto');\nconst bcrypt = require('bcrypt');\n"}},{"ruleId":"import/order","severity":2,"message":"`util` import should occur after import of `crypto`","line":3,"column":23,"nodeType":"CallExpression","endLine":3,"endColumn":38,"fix":{"range":[71,144],"text":"const crypto = require('crypto');\nconst { promisify } = require('util');\n"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":94,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":94,"endColumn":42,"fix":{"range":[2342,2353],"text":"slice(7"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":98,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":98,"endColumn":8},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":104,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":104,"endColumn":8},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":157,"column":21,"nodeType":"CallExpression","messageId":"substring","endLine":157,"endColumn":44,"fix":{"range":[4026,4037],"text":"slice(7"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":159,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":159,"endColumn":10},{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `error`.","line":164,"column":12,"nodeType":"Identifier","messageId":"with-name","endLine":164,"endColumn":17,"fix":{"range":[4187,4195],"text":""}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":173,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":173,"endColumn":41},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":181,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":181,"endColumn":49},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[!@#$%^&*(),.?\":{}|<>]/ can be optimized to /[!\"#$%&()*,.:<>?@^{|}]/.","line":226,"column":26,"nodeType":"Literal","messageId":"better-regex","endLine":226,"endColumn":50,"fix":{"range":[5553,5577],"text":"/[!\"#$%&()*,.:<>?@^{|}]/"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":262,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":262,"endColumn":45}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\nconst { promisify } = require('util');\nconst crypto = require('crypto');\n\n// JWT configuration\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '1h';\nconst JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\nconst JWT_ISSUER = 'dreamerai.io';\nconst JWT_AUDIENCE = 'dreamerai-api';\n\n// Token blacklist (in production, use Redis)\nconst tokenBlacklist = new Set();\n\n/**\n * Generate JWT tokens\n */\nconst generateTokens = (userId, role = 'visitor') => {\n  const payload = {\n    userId,\n    role,\n    iss: JWT_ISSUER,\n    aud: JWT_AUDIENCE\n  };\n\n  const accessToken = jwt.sign(payload, JWT_SECRET, {\n    expiresIn: JWT_EXPIRES_IN,\n    algorithm: 'HS256'\n  });\n\n  const refreshToken = jwt.sign(\n    { ...payload, type: 'refresh' },\n    JWT_SECRET,\n    {\n      expiresIn: JWT_REFRESH_EXPIRES_IN,\n      algorithm: 'HS256'\n    }\n  );\n\n  return {\n    accessToken,\n    refreshToken,\n    tokenType: 'Bearer',\n    expiresIn: 3600, // 1 hour in seconds\n    refreshExpiresIn: 604800 // 7 days in seconds\n  };\n};\n\n/**\n * Verify JWT token\n */\nconst verifyToken = async (token) => {\n  try {\n    // Check if token is blacklisted\n    if (tokenBlacklist.has(token)) {\n      throw new Error('Token has been revoked');\n    }\n\n    const decoded = await promisify(jwt.verify)(token, JWT_SECRET, {\n      issuer: JWT_ISSUER,\n      audience: JWT_AUDIENCE,\n      algorithms: ['HS256']\n    });\n\n    return decoded;\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      throw new Error('Token has expired');\n    } else if (error.name === 'JsonWebTokenError') {\n      throw new Error('Invalid token');\n    }\n    throw error;\n  }\n};\n\n/**\n * Authentication middleware\n */\nconst authenticate = async (req, res, next) => {\n  try {\n    // Extract token from header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'No valid authentication token provided',\n        instance: req.originalUrl\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await verifyToken(token);\n\n    // Attach user info to request\n    req.user = {\n      id: decoded.userId,\n      role: decoded.role\n    };\n\n    // Add request context for RLS\n    req.dbContext = {\n      'app.current_user_id': decoded.userId,\n      'app.current_user_role': decoded.role\n    };\n\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/authentication-failed',\n      title: 'Authentication Failed',\n      status: 401,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * Authorization middleware - check user roles\n */\nconst authorize = (...allowedRoles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'User must be authenticated to access this resource',\n        instance: req.originalUrl\n      });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({\n        type: 'https://api.dreamerai.io/errors/insufficient-permissions',\n        title: 'Insufficient Permissions',\n        status: 403,\n        detail: `This action requires one of the following roles: ${allowedRoles.join(', ')}`,\n        instance: req.originalUrl\n      });\n    }\n\n    next();\n  };\n};\n\n/**\n * Optional authentication - doesn't fail if no token\n */\nconst optionalAuth = async (req, res, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      const token = authHeader.substring(7);\n      const decoded = await verifyToken(token);\n      req.user = {\n        id: decoded.userId,\n        role: decoded.role\n      };\n    }\n  } catch (error) {\n    // Ignore errors for optional auth\n  }\n  next();\n};\n\n/**\n * Hash password\n */\nconst hashPassword = async (password) => {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n};\n\n/**\n * Verify password\n */\nconst verifyPassword = async (password, hash) => {\n  return bcrypt.compare(password, hash);\n};\n\n/**\n * Generate secure random token\n */\nconst generateSecureToken = () => {\n  return crypto.randomBytes(32).toString('hex');\n};\n\n/**\n * Blacklist a token (logout)\n */\nconst blacklistToken = (token) => {\n  tokenBlacklist.add(token);\n  // In production, store in Redis with TTL\n};\n\n/**\n * Rate limiting for auth endpoints\n */\nconst authRateLimit = require('express-rate-limit')({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  message: {\n    type: 'https://api.dreamerai.io/errors/rate-limit',\n    title: 'Too Many Authentication Attempts',\n    status: 429,\n    detail: 'Too many authentication attempts. Please try again later.',\n    retryAfter: 900\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true\n});\n\n/**\n * Password strength validator\n */\nconst validatePassword = (password) => {\n  const minLength = 8;\n  const hasUpperCase = /[A-Z]/.test(password);\n  const hasLowerCase = /[a-z]/.test(password);\n  const hasNumbers = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n  const errors = [];\n\n  if (password.length < minLength) {\n    errors.push(`Password must be at least ${minLength} characters long`);\n  }\n  if (!hasUpperCase) {\n    errors.push('Password must contain at least one uppercase letter');\n  }\n  if (!hasLowerCase) {\n    errors.push('Password must contain at least one lowercase letter');\n  }\n  if (!hasNumbers) {\n    errors.push('Password must contain at least one number');\n  }\n  if (!hasSpecialChar) {\n    errors.push('Password must contain at least one special character');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Generate OTP for 2FA\n */\nconst generateOTP = () => {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n};\n\n/**\n * API Key authentication for service-to-service\n */\nconst apiKeyAuth = async (req, res, next) => {\n  const apiKey = req.headers['x-api-key'];\n  \n  if (!apiKey) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/api-key-required',\n      title: 'API Key Required',\n      status: 401,\n      detail: 'X-API-Key header is required for this endpoint',\n      instance: req.originalUrl\n    });\n  }\n\n  // In production, validate against database\n  const validApiKeys = process.env.VALID_API_KEYS?.split(',') || [];\n  \n  if (!validApiKeys.includes(apiKey)) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/invalid-api-key',\n      title: 'Invalid API Key',\n      status: 401,\n      detail: 'The provided API key is invalid',\n      instance: req.originalUrl\n    });\n  }\n\n  next();\n};\n\nmodule.exports = {\n  generateTokens,\n  verifyToken,\n  authenticate,\n  authorize,\n  optionalAuth,\n  hashPassword,\n  verifyPassword,\n  generateSecureToken,\n  blacklistToken,\n  authRateLimit,\n  validatePassword,\n  generateOTP,\n  apiKeyAuth\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/authEnhanced.js","messages":[{"ruleId":"import/order","severity":2,"message":"`jsonwebtoken` import should occur after import of `express-rate-limit`","line":1,"column":13,"nodeType":"CallExpression","endLine":1,"endColumn":36},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[70,70],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`bcrypt` import should occur after import of `util`","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[37,218],"text":"const crypto = require('crypto');\nconst speakeasy = require('speakeasy');\nconst QRCode = require('qrcode');\nconst { promisify } = require('util');\nconst bcrypt = require('bcrypt');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":16,"nodeType":"CallExpression","endLine":3,"endColumn":33,"fix":{"range":[104,104],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`speakeasy` import should occur after import of `express-rate-limit`","line":4,"column":19,"nodeType":"CallExpression","endLine":4,"endColumn":39,"fix":{"range":[105,19355],"text":"const QRCode = require('qrcode');\nconst { promisify } = require('util');\nconst redis = require('ioredis');\n\n// Initialize Redis client for session management\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD,\n  retryStrategy: (times) => Math.min(times * 50, 2000)\n});\n\n// Enhanced JWT configuration with rotating secrets\nclass JWTManager {\n  constructor() {\n    this.algorithm = 'HS512';\n    this.issuer = 'dreamerai.io';\n    this.audience = 'dreamerai-api';\n    this.accessTokenExpiry = '15m'; // Reduced from 1h\n    this.refreshTokenExpiry = '7d';\n    this.secretRotationInterval = 24 * 60 * 60 * 1000; // 24 hours\n    \n    // Initialize secrets\n    this.currentSecret = this.generateSecret();\n    this.previousSecret = null;\n    this.secretRotationTime = Date.now();\n    \n    // Start secret rotation timer\n    this.startSecretRotation();\n  }\n\n  generateSecret() {\n    return crypto.randomBytes(64).toString('hex');\n  }\n\n  startSecretRotation() {\n    setInterval(() => {\n      this.previousSecret = this.currentSecret;\n      this.currentSecret = this.generateSecret();\n      this.secretRotationTime = Date.now();\n      console.log('JWT secret rotated successfully');\n    }, this.secretRotationInterval);\n  }\n\n  async generateTokens(userId, role = 'user', deviceId = null) {\n    const jti = crypto.randomBytes(16).toString('hex');\n    const payload = {\n      userId,\n      role,\n      deviceId,\n      jti,\n      iss: this.issuer,\n      aud: this.audience\n    };\n\n    const accessToken = jwt.sign(payload, this.currentSecret, {\n      expiresIn: this.accessTokenExpiry,\n      algorithm: this.algorithm\n    });\n\n    const refreshToken = jwt.sign(\n      { ...payload, type: 'refresh' },\n      this.currentSecret,\n      {\n        expiresIn: this.refreshTokenExpiry,\n        algorithm: this.algorithm\n      }\n    );\n\n    // Store refresh token in Redis with device tracking\n    const refreshKey = `refresh:${userId}:${jti}`;\n    await redisClient.setex(\n      refreshKey,\n      7 * 24 * 60 * 60, // 7 days in seconds\n      JSON.stringify({\n        userId,\n        role,\n        deviceId,\n        createdAt: Date.now()\n      })\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn: 900, // 15 minutes in seconds\n      refreshExpiresIn: 604800 // 7 days in seconds\n    };\n  }\n\n  async verifyToken(token) {\n    try {\n      // Try current secret first\n      try {\n        return await promisify(jwt.verify)(token, this.currentSecret, {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: [this.algorithm]\n        });\n      } catch (error) {\n        // If current secret fails and we have a previous secret, try it\n        if (this.previousSecret && error.name === 'JsonWebTokenError') {\n          return await promisify(jwt.verify)(token, this.previousSecret, {\n            issuer: this.issuer,\n            audience: this.audience,\n            algorithms: [this.algorithm]\n          });\n        }\n        throw error;\n      }\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new Error('Token has expired');\n      } else if (error.name === 'JsonWebTokenError') {\n        throw new Error('Invalid token');\n      }\n      throw error;\n    }\n  }\n\n  async revokeToken(token) {\n    const decoded = jwt.decode(token);\n    if (decoded && decoded.jti) {\n      const blacklistKey = `blacklist:${decoded.jti}`;\n      const ttl = decoded.exp - Math.floor(Date.now() / 1000);\n      if (ttl > 0) {\n        await redisClient.setex(blacklistKey, ttl, '1');\n      }\n    }\n  }\n\n  async isTokenBlacklisted(jti) {\n    const result = await redisClient.get(`blacklist:${jti}`);\n    return result === '1';\n  }\n}\n\n// Initialize JWT Manager\nconst jwtManager = new JWTManager();\n\n/**\n * Enhanced password security with entropy checking\n */\nclass PasswordManager {\n  constructor() {\n    this.minLength = 12;\n    this.maxLength = 128;\n    this.saltRounds = 14; // Increased from 12\n    this.commonPasswords = new Set(); // Load from file in production\n    this.loadCommonPasswords();\n  }\n\n  async loadCommonPasswords() {\n    // In production, load from a file containing top 10000 common passwords\n    this.commonPasswords = new Set([\n      'password123', 'admin123', 'qwerty123', 'letmein123',\n      'welcome123', 'password1', 'admin1234', '12345678'\n    ]);\n  }\n\n  calculateEntropy(password) {\n    const charsets = {\n      lowercase: /[a-z]/.test(password) ? 26 : 0,\n      uppercase: /[A-Z]/.test(password) ? 26 : 0,\n      numbers: /\\d/.test(password) ? 10 : 0,\n      special: /[^a-zA-Z0-9]/.test(password) ? 32 : 0\n    };\n\n    const possibleChars = Object.values(charsets).reduce((a, b) => a + b, 0);\n    return password.length * Math.log2(possibleChars);\n  }\n\n  validatePassword(password) {\n    const errors = [];\n\n    // Length check\n    if (password.length < this.minLength) {\n      errors.push(`Password must be at least ${this.minLength} characters`);\n    }\n    if (password.length > this.maxLength) {\n      errors.push(`Password must not exceed ${this.maxLength} characters`);\n    }\n\n    // Complexity requirements\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    // Sequential character check\n    if (/(.)\\1{2,}/.test(password)) {\n      errors.push('Password cannot contain more than 2 consecutive identical characters');\n    }\n\n    // Common patterns check\n    const commonPatterns = ['123', 'abc', 'qwe', 'asd'];\n    for (const pattern of commonPatterns) {\n      if (password.toLowerCase().includes(pattern)) {\n        errors.push('Password contains common patterns');\n        break;\n      }\n    }\n\n    // Common password check\n    if (this.commonPasswords.has(password.toLowerCase())) {\n      errors.push('This password is too common');\n    }\n\n    // Entropy check\n    const entropy = this.calculateEntropy(password);\n    if (entropy < 50) {\n      errors.push('Password is not strong enough');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      strength: this.getPasswordStrength(entropy)\n    };\n  }\n\n  getPasswordStrength(entropy) {\n    if (entropy < 30) return 'very weak';\n    if (entropy < 50) return 'weak';\n    if (entropy < 70) return 'moderate';\n    if (entropy < 90) return 'strong';\n    return 'very strong';\n  }\n\n  async hashPassword(password) {\n    // Add pepper for additional security\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.hash(pepperedPassword, this.saltRounds);\n  }\n\n  async verifyPassword(password, hash) {\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.compare(pepperedPassword, hash);\n  }\n\n  generateSecurePassword() {\n    const length = 16;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = crypto.randomInt(0, charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  }\n}\n\n// Initialize Password Manager\nconst passwordManager = new PasswordManager();\n\n/**\n * Multi-Factor Authentication Manager\n */\nclass MFAManager {\n  constructor() {\n    this.appName = 'Dreamer AI Solutions';\n    this.backupCodeCount = 10;\n    this.otpWindow = 2; // Allow 2 time steps before/after\n  }\n\n  generateSecret(userId) {\n    const secret = speakeasy.generateSecret({\n      name: `${this.appName} (${userId})`,\n      issuer: this.appName,\n      length: 32\n    });\n\n    return {\n      secret: secret.base32,\n      qrCode: secret.otpauth_url\n    };\n  }\n\n  async generateQRCode(otpauthUrl) {\n    return QRCode.toDataURL(otpauthUrl);\n  }\n\n  verifyToken(token, secret) {\n    return speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token,\n      window: this.otpWindow\n    });\n  }\n\n  generateBackupCodes() {\n    const codes = [];\n    for (let i = 0; i < this.backupCodeCount; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`);\n    }\n    return codes;\n  }\n\n  async hashBackupCode(code) {\n    return crypto.createHash('sha256').update(code).digest('hex');\n  }\n\n  async verifyBackupCode(code, hashedCodes) {\n    const hashedInput = await this.hashBackupCode(code);\n    return hashedCodes.includes(hashedInput);\n  }\n}\n\n// Initialize MFA Manager\nconst mfaManager = new MFAManager();\n\n/**\n * Session Manager for device tracking and concurrent session control\n */\nclass SessionManager {\n  constructor() {\n    this.maxConcurrentSessions = 5;\n    this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n  }\n\n  async createSession(userId, deviceInfo) {\n    const sessionId = crypto.randomBytes(32).toString('hex');\n    const sessionData = {\n      userId,\n      sessionId,\n      deviceInfo,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      ipAddress: deviceInfo.ipAddress,\n      userAgent: deviceInfo.userAgent\n    };\n\n    // Store session\n    const sessionKey = `session:${userId}:${sessionId}`;\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(sessionData)\n    );\n\n    // Add to user's session list\n    await redisClient.sadd(`user:sessions:${userId}`, sessionId);\n\n    // Check concurrent session limit\n    await this.enforceSessionLimit(userId);\n\n    return sessionId;\n  }\n\n  async enforceSessionLimit(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    if (sessions.length > this.maxConcurrentSessions) {\n      // Get all session data to find oldest\n      const sessionData = await Promise.all(\n        sessions.map(async (sessionId) => {\n          const data = await redisClient.get(`session:${userId}:${sessionId}`);\n          return data ? { sessionId, ...JSON.parse(data) } : null;\n        })\n      );\n\n      // Sort by creation time and remove oldest sessions\n      const validSessions = sessionData.filter(s => s !== null);\n      validSessions.sort((a, b) => a.createdAt - b.createdAt);\n\n      const sessionsToRemove = validSessions.slice(0, validSessions.length - this.maxConcurrentSessions);\n      \n      for (const session of sessionsToRemove) {\n        await this.terminateSession(userId, session.sessionId);\n      }\n    }\n  }\n\n  async validateSession(userId, sessionId) {\n    const sessionKey = `session:${userId}:${sessionId}`;\n    const sessionData = await redisClient.get(sessionKey);\n\n    if (!sessionData) {\n      return false;\n    }\n\n    const session = JSON.parse(sessionData);\n    \n    // Update last activity\n    session.lastActivity = Date.now();\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(session)\n    );\n\n    return true;\n  }\n\n  async terminateSession(userId, sessionId) {\n    await redisClient.del(`session:${userId}:${sessionId}`);\n    await redisClient.srem(`user:sessions:${userId}`, sessionId);\n  }\n\n  async terminateAllSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    for (const sessionId of sessions) {\n      await redisClient.del(`session:${userId}:${sessionId}`);\n    }\n    \n    await redisClient.del(`user:sessions:${userId}`);\n  }\n\n  async getActiveSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    const sessionData = await Promise.all(\n      sessions.map(async (sessionId) => {\n        const data = await redisClient.get(`session:${userId}:${sessionId}`);\n        return data ? JSON.parse(data) : null;\n      })\n    );\n\n    return sessionData.filter(s => s !== null);\n  }\n}\n\n// Initialize Session Manager\nconst sessionManager = new SessionManager();\n\n/**\n * Account Security Features\n */\nclass AccountSecurity {\n  constructor() {\n    this.maxLoginAttempts = 5;\n    this.lockoutDuration = 30 * 60 * 1000; // 30 minutes\n    this.passwordHistoryLimit = 5;\n  }\n\n  async recordLoginAttempt(identifier, success) {\n    const key = `login:attempts:${identifier}`;\n    \n    if (success) {\n      await redisClient.del(key);\n      return;\n    }\n\n    const attempts = await redisClient.incr(key);\n    await redisClient.expire(key, this.lockoutDuration / 1000);\n\n    if (attempts >= this.maxLoginAttempts) {\n      await this.lockAccount(identifier);\n    }\n\n    return attempts;\n  }\n\n  async isAccountLocked(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    const locked = await redisClient.get(lockKey);\n    return locked === '1';\n  }\n\n  async lockAccount(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    await redisClient.setex(lockKey, this.lockoutDuration / 1000, '1');\n    \n    // Log security event\n    console.log(`Account locked due to failed login attempts: ${identifier}`);\n  }\n\n  async unlockAccount(identifier) {\n    await redisClient.del(`account:locked:${identifier}`);\n    await redisClient.del(`login:attempts:${identifier}`);\n  }\n\n  async checkPasswordHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    const history = await redisClient.lrange(historyKey, 0, -1);\n    \n    for (const oldHash of history) {\n      if (oldHash === passwordHash) {\n        return false; // Password was used before\n      }\n    }\n    \n    return true; // Password is new\n  }\n\n  async addPasswordToHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    await redisClient.lpush(historyKey, passwordHash);\n    await redisClient.ltrim(historyKey, 0, this.passwordHistoryLimit - 1);\n  }\n}\n\n// Initialize Account Security\nconst accountSecurity = new AccountSecurity();\n\n/**\n * Enhanced authentication middleware\n */\nconst authenticate = async (req, res, next) => {\n  try {\n    // Extract token from header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'No valid authentication token provided',\n        instance: req.originalUrl\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await jwtManager.verifyToken(token);\n\n    // Check if token is blacklisted\n    if (decoded.jti && await jwtManager.isTokenBlacklisted(decoded.jti)) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/token-revoked',\n        title: 'Token Revoked',\n        status: 401,\n        detail: 'This token has been revoked',\n        instance: req.originalUrl\n      });\n    }\n\n    // Validate session if sessionId is present\n    if (req.headers['x-session-id']) {\n      const sessionValid = await sessionManager.validateSession(\n        decoded.userId,\n        req.headers['x-session-id']\n      );\n      \n      if (!sessionValid) {\n        return res.status(401).json({\n          type: 'https://api.dreamerai.io/errors/invalid-session',\n          title: 'Invalid Session',\n          status: 401,\n          detail: 'Session has expired or is invalid',\n          instance: req.originalUrl\n        });\n      }\n    }\n\n    // Attach user info to request\n    req.user = {\n      id: decoded.userId,\n      role: decoded.role,\n      jti: decoded.jti\n    };\n\n    // Add security context\n    req.securityContext = {\n      tokenIssuedAt: decoded.iat,\n      tokenExpiresAt: decoded.exp,\n      deviceId: decoded.deviceId\n    };\n\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/authentication-failed',\n      title: 'Authentication Failed',\n      status: 401,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * MFA verification middleware\n */\nconst requireMFA = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'User must be authenticated',\n        instance: req.originalUrl\n      });\n    }\n\n    const mfaToken = req.headers['x-mfa-token'];\n    if (!mfaToken) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/mfa-required',\n        title: 'MFA Required',\n        status: 401,\n        detail: 'Multi-factor authentication token required',\n        instance: req.originalUrl\n      });\n    }\n\n    // Verify MFA token (implement based on user's MFA settings)\n    // This is a placeholder - implement actual MFA verification\n    const mfaValid = true; // await verifyUserMFA(req.user.id, mfaToken);\n    \n    if (!mfaValid) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/invalid-mfa',\n        title: 'Invalid MFA Token',\n        status: 401,\n        detail: 'The provided MFA token is invalid',\n        instance: req.originalUrl\n      });\n    }\n\n    next();\n  } catch (error) {\n    return res.status(500).json({\n      type: 'https://api.dreamerai.io/errors/mfa-error',\n      title: 'MFA Verification Error',\n      status: 500,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * Device trust middleware\n */\nconst deviceTrust = async (req, res, next) => {\n  const deviceId = req.headers['x-device-id'];\n  const deviceFingerprint = req.headers['x-device-fingerprint'];\n  \n  if (!deviceId || !deviceFingerprint) {\n    req.deviceTrusted = false;\n    return next();\n  }\n\n  // Verify device fingerprint\n  const trustedDevice = await redisClient.get(`device:trusted:${req.user.id}:${deviceId}`);\n  \n  if (trustedDevice) {\n    const savedFingerprint = JSON.parse(trustedDevice).fingerprint;\n    req.deviceTrusted = savedFingerprint === deviceFingerprint;\n  } else {\n    req.deviceTrusted = false;\n  }\n\n  next();\n};\n\n/**\n * Rate limiting for auth endpoints with progressive delays\n */\nconst authRateLimit = require('express-rate-limit')({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  skipSuccessfulRequests: true,\n  keyGenerator: (req) => {\n    // Use IP + user identifier for more accurate rate limiting\n    return `${req.ip}:${req.body.email || req.body.username || 'anonymous'}`;\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      type: 'https://api.dreamerai.io/errors/rate-limit',\n      title: 'Too Many Authentication Attempts',\n      status: 429,\n      detail: 'Too many authentication attempts. Please try again later.',\n      retryAfter: 900\n    });\n  },\n  skip: (req) => {\n    // Skip rate limiting for trusted devices\n    return req.deviceTrusted === true;\n  }\n});\nconst speakeasy = require('speakeasy');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":16,"nodeType":"CallExpression","endLine":5,"endColumn":33,"fix":{"range":[178,178],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`qrcode` import should occur after import of `express-rate-limit`","line":5,"column":16,"nodeType":"CallExpression","endLine":5,"endColumn":33,"fix":{"range":[145,19355],"text":"const { promisify } = require('util');\nconst redis = require('ioredis');\n\n// Initialize Redis client for session management\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD,\n  retryStrategy: (times) => Math.min(times * 50, 2000)\n});\n\n// Enhanced JWT configuration with rotating secrets\nclass JWTManager {\n  constructor() {\n    this.algorithm = 'HS512';\n    this.issuer = 'dreamerai.io';\n    this.audience = 'dreamerai-api';\n    this.accessTokenExpiry = '15m'; // Reduced from 1h\n    this.refreshTokenExpiry = '7d';\n    this.secretRotationInterval = 24 * 60 * 60 * 1000; // 24 hours\n    \n    // Initialize secrets\n    this.currentSecret = this.generateSecret();\n    this.previousSecret = null;\n    this.secretRotationTime = Date.now();\n    \n    // Start secret rotation timer\n    this.startSecretRotation();\n  }\n\n  generateSecret() {\n    return crypto.randomBytes(64).toString('hex');\n  }\n\n  startSecretRotation() {\n    setInterval(() => {\n      this.previousSecret = this.currentSecret;\n      this.currentSecret = this.generateSecret();\n      this.secretRotationTime = Date.now();\n      console.log('JWT secret rotated successfully');\n    }, this.secretRotationInterval);\n  }\n\n  async generateTokens(userId, role = 'user', deviceId = null) {\n    const jti = crypto.randomBytes(16).toString('hex');\n    const payload = {\n      userId,\n      role,\n      deviceId,\n      jti,\n      iss: this.issuer,\n      aud: this.audience\n    };\n\n    const accessToken = jwt.sign(payload, this.currentSecret, {\n      expiresIn: this.accessTokenExpiry,\n      algorithm: this.algorithm\n    });\n\n    const refreshToken = jwt.sign(\n      { ...payload, type: 'refresh' },\n      this.currentSecret,\n      {\n        expiresIn: this.refreshTokenExpiry,\n        algorithm: this.algorithm\n      }\n    );\n\n    // Store refresh token in Redis with device tracking\n    const refreshKey = `refresh:${userId}:${jti}`;\n    await redisClient.setex(\n      refreshKey,\n      7 * 24 * 60 * 60, // 7 days in seconds\n      JSON.stringify({\n        userId,\n        role,\n        deviceId,\n        createdAt: Date.now()\n      })\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn: 900, // 15 minutes in seconds\n      refreshExpiresIn: 604800 // 7 days in seconds\n    };\n  }\n\n  async verifyToken(token) {\n    try {\n      // Try current secret first\n      try {\n        return await promisify(jwt.verify)(token, this.currentSecret, {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: [this.algorithm]\n        });\n      } catch (error) {\n        // If current secret fails and we have a previous secret, try it\n        if (this.previousSecret && error.name === 'JsonWebTokenError') {\n          return await promisify(jwt.verify)(token, this.previousSecret, {\n            issuer: this.issuer,\n            audience: this.audience,\n            algorithms: [this.algorithm]\n          });\n        }\n        throw error;\n      }\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new Error('Token has expired');\n      } else if (error.name === 'JsonWebTokenError') {\n        throw new Error('Invalid token');\n      }\n      throw error;\n    }\n  }\n\n  async revokeToken(token) {\n    const decoded = jwt.decode(token);\n    if (decoded && decoded.jti) {\n      const blacklistKey = `blacklist:${decoded.jti}`;\n      const ttl = decoded.exp - Math.floor(Date.now() / 1000);\n      if (ttl > 0) {\n        await redisClient.setex(blacklistKey, ttl, '1');\n      }\n    }\n  }\n\n  async isTokenBlacklisted(jti) {\n    const result = await redisClient.get(`blacklist:${jti}`);\n    return result === '1';\n  }\n}\n\n// Initialize JWT Manager\nconst jwtManager = new JWTManager();\n\n/**\n * Enhanced password security with entropy checking\n */\nclass PasswordManager {\n  constructor() {\n    this.minLength = 12;\n    this.maxLength = 128;\n    this.saltRounds = 14; // Increased from 12\n    this.commonPasswords = new Set(); // Load from file in production\n    this.loadCommonPasswords();\n  }\n\n  async loadCommonPasswords() {\n    // In production, load from a file containing top 10000 common passwords\n    this.commonPasswords = new Set([\n      'password123', 'admin123', 'qwerty123', 'letmein123',\n      'welcome123', 'password1', 'admin1234', '12345678'\n    ]);\n  }\n\n  calculateEntropy(password) {\n    const charsets = {\n      lowercase: /[a-z]/.test(password) ? 26 : 0,\n      uppercase: /[A-Z]/.test(password) ? 26 : 0,\n      numbers: /\\d/.test(password) ? 10 : 0,\n      special: /[^a-zA-Z0-9]/.test(password) ? 32 : 0\n    };\n\n    const possibleChars = Object.values(charsets).reduce((a, b) => a + b, 0);\n    return password.length * Math.log2(possibleChars);\n  }\n\n  validatePassword(password) {\n    const errors = [];\n\n    // Length check\n    if (password.length < this.minLength) {\n      errors.push(`Password must be at least ${this.minLength} characters`);\n    }\n    if (password.length > this.maxLength) {\n      errors.push(`Password must not exceed ${this.maxLength} characters`);\n    }\n\n    // Complexity requirements\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    // Sequential character check\n    if (/(.)\\1{2,}/.test(password)) {\n      errors.push('Password cannot contain more than 2 consecutive identical characters');\n    }\n\n    // Common patterns check\n    const commonPatterns = ['123', 'abc', 'qwe', 'asd'];\n    for (const pattern of commonPatterns) {\n      if (password.toLowerCase().includes(pattern)) {\n        errors.push('Password contains common patterns');\n        break;\n      }\n    }\n\n    // Common password check\n    if (this.commonPasswords.has(password.toLowerCase())) {\n      errors.push('This password is too common');\n    }\n\n    // Entropy check\n    const entropy = this.calculateEntropy(password);\n    if (entropy < 50) {\n      errors.push('Password is not strong enough');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      strength: this.getPasswordStrength(entropy)\n    };\n  }\n\n  getPasswordStrength(entropy) {\n    if (entropy < 30) return 'very weak';\n    if (entropy < 50) return 'weak';\n    if (entropy < 70) return 'moderate';\n    if (entropy < 90) return 'strong';\n    return 'very strong';\n  }\n\n  async hashPassword(password) {\n    // Add pepper for additional security\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.hash(pepperedPassword, this.saltRounds);\n  }\n\n  async verifyPassword(password, hash) {\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.compare(pepperedPassword, hash);\n  }\n\n  generateSecurePassword() {\n    const length = 16;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = crypto.randomInt(0, charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  }\n}\n\n// Initialize Password Manager\nconst passwordManager = new PasswordManager();\n\n/**\n * Multi-Factor Authentication Manager\n */\nclass MFAManager {\n  constructor() {\n    this.appName = 'Dreamer AI Solutions';\n    this.backupCodeCount = 10;\n    this.otpWindow = 2; // Allow 2 time steps before/after\n  }\n\n  generateSecret(userId) {\n    const secret = speakeasy.generateSecret({\n      name: `${this.appName} (${userId})`,\n      issuer: this.appName,\n      length: 32\n    });\n\n    return {\n      secret: secret.base32,\n      qrCode: secret.otpauth_url\n    };\n  }\n\n  async generateQRCode(otpauthUrl) {\n    return QRCode.toDataURL(otpauthUrl);\n  }\n\n  verifyToken(token, secret) {\n    return speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token,\n      window: this.otpWindow\n    });\n  }\n\n  generateBackupCodes() {\n    const codes = [];\n    for (let i = 0; i < this.backupCodeCount; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`);\n    }\n    return codes;\n  }\n\n  async hashBackupCode(code) {\n    return crypto.createHash('sha256').update(code).digest('hex');\n  }\n\n  async verifyBackupCode(code, hashedCodes) {\n    const hashedInput = await this.hashBackupCode(code);\n    return hashedCodes.includes(hashedInput);\n  }\n}\n\n// Initialize MFA Manager\nconst mfaManager = new MFAManager();\n\n/**\n * Session Manager for device tracking and concurrent session control\n */\nclass SessionManager {\n  constructor() {\n    this.maxConcurrentSessions = 5;\n    this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n  }\n\n  async createSession(userId, deviceInfo) {\n    const sessionId = crypto.randomBytes(32).toString('hex');\n    const sessionData = {\n      userId,\n      sessionId,\n      deviceInfo,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      ipAddress: deviceInfo.ipAddress,\n      userAgent: deviceInfo.userAgent\n    };\n\n    // Store session\n    const sessionKey = `session:${userId}:${sessionId}`;\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(sessionData)\n    );\n\n    // Add to user's session list\n    await redisClient.sadd(`user:sessions:${userId}`, sessionId);\n\n    // Check concurrent session limit\n    await this.enforceSessionLimit(userId);\n\n    return sessionId;\n  }\n\n  async enforceSessionLimit(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    if (sessions.length > this.maxConcurrentSessions) {\n      // Get all session data to find oldest\n      const sessionData = await Promise.all(\n        sessions.map(async (sessionId) => {\n          const data = await redisClient.get(`session:${userId}:${sessionId}`);\n          return data ? { sessionId, ...JSON.parse(data) } : null;\n        })\n      );\n\n      // Sort by creation time and remove oldest sessions\n      const validSessions = sessionData.filter(s => s !== null);\n      validSessions.sort((a, b) => a.createdAt - b.createdAt);\n\n      const sessionsToRemove = validSessions.slice(0, validSessions.length - this.maxConcurrentSessions);\n      \n      for (const session of sessionsToRemove) {\n        await this.terminateSession(userId, session.sessionId);\n      }\n    }\n  }\n\n  async validateSession(userId, sessionId) {\n    const sessionKey = `session:${userId}:${sessionId}`;\n    const sessionData = await redisClient.get(sessionKey);\n\n    if (!sessionData) {\n      return false;\n    }\n\n    const session = JSON.parse(sessionData);\n    \n    // Update last activity\n    session.lastActivity = Date.now();\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(session)\n    );\n\n    return true;\n  }\n\n  async terminateSession(userId, sessionId) {\n    await redisClient.del(`session:${userId}:${sessionId}`);\n    await redisClient.srem(`user:sessions:${userId}`, sessionId);\n  }\n\n  async terminateAllSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    for (const sessionId of sessions) {\n      await redisClient.del(`session:${userId}:${sessionId}`);\n    }\n    \n    await redisClient.del(`user:sessions:${userId}`);\n  }\n\n  async getActiveSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    const sessionData = await Promise.all(\n      sessions.map(async (sessionId) => {\n        const data = await redisClient.get(`session:${userId}:${sessionId}`);\n        return data ? JSON.parse(data) : null;\n      })\n    );\n\n    return sessionData.filter(s => s !== null);\n  }\n}\n\n// Initialize Session Manager\nconst sessionManager = new SessionManager();\n\n/**\n * Account Security Features\n */\nclass AccountSecurity {\n  constructor() {\n    this.maxLoginAttempts = 5;\n    this.lockoutDuration = 30 * 60 * 1000; // 30 minutes\n    this.passwordHistoryLimit = 5;\n  }\n\n  async recordLoginAttempt(identifier, success) {\n    const key = `login:attempts:${identifier}`;\n    \n    if (success) {\n      await redisClient.del(key);\n      return;\n    }\n\n    const attempts = await redisClient.incr(key);\n    await redisClient.expire(key, this.lockoutDuration / 1000);\n\n    if (attempts >= this.maxLoginAttempts) {\n      await this.lockAccount(identifier);\n    }\n\n    return attempts;\n  }\n\n  async isAccountLocked(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    const locked = await redisClient.get(lockKey);\n    return locked === '1';\n  }\n\n  async lockAccount(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    await redisClient.setex(lockKey, this.lockoutDuration / 1000, '1');\n    \n    // Log security event\n    console.log(`Account locked due to failed login attempts: ${identifier}`);\n  }\n\n  async unlockAccount(identifier) {\n    await redisClient.del(`account:locked:${identifier}`);\n    await redisClient.del(`login:attempts:${identifier}`);\n  }\n\n  async checkPasswordHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    const history = await redisClient.lrange(historyKey, 0, -1);\n    \n    for (const oldHash of history) {\n      if (oldHash === passwordHash) {\n        return false; // Password was used before\n      }\n    }\n    \n    return true; // Password is new\n  }\n\n  async addPasswordToHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    await redisClient.lpush(historyKey, passwordHash);\n    await redisClient.ltrim(historyKey, 0, this.passwordHistoryLimit - 1);\n  }\n}\n\n// Initialize Account Security\nconst accountSecurity = new AccountSecurity();\n\n/**\n * Enhanced authentication middleware\n */\nconst authenticate = async (req, res, next) => {\n  try {\n    // Extract token from header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'No valid authentication token provided',\n        instance: req.originalUrl\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await jwtManager.verifyToken(token);\n\n    // Check if token is blacklisted\n    if (decoded.jti && await jwtManager.isTokenBlacklisted(decoded.jti)) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/token-revoked',\n        title: 'Token Revoked',\n        status: 401,\n        detail: 'This token has been revoked',\n        instance: req.originalUrl\n      });\n    }\n\n    // Validate session if sessionId is present\n    if (req.headers['x-session-id']) {\n      const sessionValid = await sessionManager.validateSession(\n        decoded.userId,\n        req.headers['x-session-id']\n      );\n      \n      if (!sessionValid) {\n        return res.status(401).json({\n          type: 'https://api.dreamerai.io/errors/invalid-session',\n          title: 'Invalid Session',\n          status: 401,\n          detail: 'Session has expired or is invalid',\n          instance: req.originalUrl\n        });\n      }\n    }\n\n    // Attach user info to request\n    req.user = {\n      id: decoded.userId,\n      role: decoded.role,\n      jti: decoded.jti\n    };\n\n    // Add security context\n    req.securityContext = {\n      tokenIssuedAt: decoded.iat,\n      tokenExpiresAt: decoded.exp,\n      deviceId: decoded.deviceId\n    };\n\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/authentication-failed',\n      title: 'Authentication Failed',\n      status: 401,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * MFA verification middleware\n */\nconst requireMFA = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'User must be authenticated',\n        instance: req.originalUrl\n      });\n    }\n\n    const mfaToken = req.headers['x-mfa-token'];\n    if (!mfaToken) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/mfa-required',\n        title: 'MFA Required',\n        status: 401,\n        detail: 'Multi-factor authentication token required',\n        instance: req.originalUrl\n      });\n    }\n\n    // Verify MFA token (implement based on user's MFA settings)\n    // This is a placeholder - implement actual MFA verification\n    const mfaValid = true; // await verifyUserMFA(req.user.id, mfaToken);\n    \n    if (!mfaValid) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/invalid-mfa',\n        title: 'Invalid MFA Token',\n        status: 401,\n        detail: 'The provided MFA token is invalid',\n        instance: req.originalUrl\n      });\n    }\n\n    next();\n  } catch (error) {\n    return res.status(500).json({\n      type: 'https://api.dreamerai.io/errors/mfa-error',\n      title: 'MFA Verification Error',\n      status: 500,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * Device trust middleware\n */\nconst deviceTrust = async (req, res, next) => {\n  const deviceId = req.headers['x-device-id'];\n  const deviceFingerprint = req.headers['x-device-fingerprint'];\n  \n  if (!deviceId || !deviceFingerprint) {\n    req.deviceTrusted = false;\n    return next();\n  }\n\n  // Verify device fingerprint\n  const trustedDevice = await redisClient.get(`device:trusted:${req.user.id}:${deviceId}`);\n  \n  if (trustedDevice) {\n    const savedFingerprint = JSON.parse(trustedDevice).fingerprint;\n    req.deviceTrusted = savedFingerprint === deviceFingerprint;\n  } else {\n    req.deviceTrusted = false;\n  }\n\n  next();\n};\n\n/**\n * Rate limiting for auth endpoints with progressive delays\n */\nconst authRateLimit = require('express-rate-limit')({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  skipSuccessfulRequests: true,\n  keyGenerator: (req) => {\n    // Use IP + user identifier for more accurate rate limiting\n    return `${req.ip}:${req.body.email || req.body.username || 'anonymous'}`;\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      type: 'https://api.dreamerai.io/errors/rate-limit',\n      title: 'Too Many Authentication Attempts',\n      status: 429,\n      detail: 'Too many authentication attempts. Please try again later.',\n      retryAfter: 900\n    });\n  },\n  skip: (req) => {\n    // Skip rate limiting for trusted devices\n    return req.deviceTrusted === true;\n  }\n});\nconst QRCode = require('qrcode');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":23,"nodeType":"CallExpression","endLine":6,"endColumn":38,"fix":{"range":[217,217],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":7,"column":15,"nodeType":"CallExpression","endLine":7,"endColumn":33},{"ruleId":"import/order","severity":2,"message":"`ioredis` import should occur after import of `express-rate-limit`","line":7,"column":15,"nodeType":"CallExpression","endLine":7,"endColumn":33,"fix":{"range":[218,19355],"text":"\n// Initialize Redis client for session management\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD,\n  retryStrategy: (times) => Math.min(times * 50, 2000)\n});\n\n// Enhanced JWT configuration with rotating secrets\nclass JWTManager {\n  constructor() {\n    this.algorithm = 'HS512';\n    this.issuer = 'dreamerai.io';\n    this.audience = 'dreamerai-api';\n    this.accessTokenExpiry = '15m'; // Reduced from 1h\n    this.refreshTokenExpiry = '7d';\n    this.secretRotationInterval = 24 * 60 * 60 * 1000; // 24 hours\n    \n    // Initialize secrets\n    this.currentSecret = this.generateSecret();\n    this.previousSecret = null;\n    this.secretRotationTime = Date.now();\n    \n    // Start secret rotation timer\n    this.startSecretRotation();\n  }\n\n  generateSecret() {\n    return crypto.randomBytes(64).toString('hex');\n  }\n\n  startSecretRotation() {\n    setInterval(() => {\n      this.previousSecret = this.currentSecret;\n      this.currentSecret = this.generateSecret();\n      this.secretRotationTime = Date.now();\n      console.log('JWT secret rotated successfully');\n    }, this.secretRotationInterval);\n  }\n\n  async generateTokens(userId, role = 'user', deviceId = null) {\n    const jti = crypto.randomBytes(16).toString('hex');\n    const payload = {\n      userId,\n      role,\n      deviceId,\n      jti,\n      iss: this.issuer,\n      aud: this.audience\n    };\n\n    const accessToken = jwt.sign(payload, this.currentSecret, {\n      expiresIn: this.accessTokenExpiry,\n      algorithm: this.algorithm\n    });\n\n    const refreshToken = jwt.sign(\n      { ...payload, type: 'refresh' },\n      this.currentSecret,\n      {\n        expiresIn: this.refreshTokenExpiry,\n        algorithm: this.algorithm\n      }\n    );\n\n    // Store refresh token in Redis with device tracking\n    const refreshKey = `refresh:${userId}:${jti}`;\n    await redisClient.setex(\n      refreshKey,\n      7 * 24 * 60 * 60, // 7 days in seconds\n      JSON.stringify({\n        userId,\n        role,\n        deviceId,\n        createdAt: Date.now()\n      })\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn: 900, // 15 minutes in seconds\n      refreshExpiresIn: 604800 // 7 days in seconds\n    };\n  }\n\n  async verifyToken(token) {\n    try {\n      // Try current secret first\n      try {\n        return await promisify(jwt.verify)(token, this.currentSecret, {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: [this.algorithm]\n        });\n      } catch (error) {\n        // If current secret fails and we have a previous secret, try it\n        if (this.previousSecret && error.name === 'JsonWebTokenError') {\n          return await promisify(jwt.verify)(token, this.previousSecret, {\n            issuer: this.issuer,\n            audience: this.audience,\n            algorithms: [this.algorithm]\n          });\n        }\n        throw error;\n      }\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new Error('Token has expired');\n      } else if (error.name === 'JsonWebTokenError') {\n        throw new Error('Invalid token');\n      }\n      throw error;\n    }\n  }\n\n  async revokeToken(token) {\n    const decoded = jwt.decode(token);\n    if (decoded && decoded.jti) {\n      const blacklistKey = `blacklist:${decoded.jti}`;\n      const ttl = decoded.exp - Math.floor(Date.now() / 1000);\n      if (ttl > 0) {\n        await redisClient.setex(blacklistKey, ttl, '1');\n      }\n    }\n  }\n\n  async isTokenBlacklisted(jti) {\n    const result = await redisClient.get(`blacklist:${jti}`);\n    return result === '1';\n  }\n}\n\n// Initialize JWT Manager\nconst jwtManager = new JWTManager();\n\n/**\n * Enhanced password security with entropy checking\n */\nclass PasswordManager {\n  constructor() {\n    this.minLength = 12;\n    this.maxLength = 128;\n    this.saltRounds = 14; // Increased from 12\n    this.commonPasswords = new Set(); // Load from file in production\n    this.loadCommonPasswords();\n  }\n\n  async loadCommonPasswords() {\n    // In production, load from a file containing top 10000 common passwords\n    this.commonPasswords = new Set([\n      'password123', 'admin123', 'qwerty123', 'letmein123',\n      'welcome123', 'password1', 'admin1234', '12345678'\n    ]);\n  }\n\n  calculateEntropy(password) {\n    const charsets = {\n      lowercase: /[a-z]/.test(password) ? 26 : 0,\n      uppercase: /[A-Z]/.test(password) ? 26 : 0,\n      numbers: /\\d/.test(password) ? 10 : 0,\n      special: /[^a-zA-Z0-9]/.test(password) ? 32 : 0\n    };\n\n    const possibleChars = Object.values(charsets).reduce((a, b) => a + b, 0);\n    return password.length * Math.log2(possibleChars);\n  }\n\n  validatePassword(password) {\n    const errors = [];\n\n    // Length check\n    if (password.length < this.minLength) {\n      errors.push(`Password must be at least ${this.minLength} characters`);\n    }\n    if (password.length > this.maxLength) {\n      errors.push(`Password must not exceed ${this.maxLength} characters`);\n    }\n\n    // Complexity requirements\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    // Sequential character check\n    if (/(.)\\1{2,}/.test(password)) {\n      errors.push('Password cannot contain more than 2 consecutive identical characters');\n    }\n\n    // Common patterns check\n    const commonPatterns = ['123', 'abc', 'qwe', 'asd'];\n    for (const pattern of commonPatterns) {\n      if (password.toLowerCase().includes(pattern)) {\n        errors.push('Password contains common patterns');\n        break;\n      }\n    }\n\n    // Common password check\n    if (this.commonPasswords.has(password.toLowerCase())) {\n      errors.push('This password is too common');\n    }\n\n    // Entropy check\n    const entropy = this.calculateEntropy(password);\n    if (entropy < 50) {\n      errors.push('Password is not strong enough');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      strength: this.getPasswordStrength(entropy)\n    };\n  }\n\n  getPasswordStrength(entropy) {\n    if (entropy < 30) return 'very weak';\n    if (entropy < 50) return 'weak';\n    if (entropy < 70) return 'moderate';\n    if (entropy < 90) return 'strong';\n    return 'very strong';\n  }\n\n  async hashPassword(password) {\n    // Add pepper for additional security\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.hash(pepperedPassword, this.saltRounds);\n  }\n\n  async verifyPassword(password, hash) {\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.compare(pepperedPassword, hash);\n  }\n\n  generateSecurePassword() {\n    const length = 16;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = crypto.randomInt(0, charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  }\n}\n\n// Initialize Password Manager\nconst passwordManager = new PasswordManager();\n\n/**\n * Multi-Factor Authentication Manager\n */\nclass MFAManager {\n  constructor() {\n    this.appName = 'Dreamer AI Solutions';\n    this.backupCodeCount = 10;\n    this.otpWindow = 2; // Allow 2 time steps before/after\n  }\n\n  generateSecret(userId) {\n    const secret = speakeasy.generateSecret({\n      name: `${this.appName} (${userId})`,\n      issuer: this.appName,\n      length: 32\n    });\n\n    return {\n      secret: secret.base32,\n      qrCode: secret.otpauth_url\n    };\n  }\n\n  async generateQRCode(otpauthUrl) {\n    return QRCode.toDataURL(otpauthUrl);\n  }\n\n  verifyToken(token, secret) {\n    return speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token,\n      window: this.otpWindow\n    });\n  }\n\n  generateBackupCodes() {\n    const codes = [];\n    for (let i = 0; i < this.backupCodeCount; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`);\n    }\n    return codes;\n  }\n\n  async hashBackupCode(code) {\n    return crypto.createHash('sha256').update(code).digest('hex');\n  }\n\n  async verifyBackupCode(code, hashedCodes) {\n    const hashedInput = await this.hashBackupCode(code);\n    return hashedCodes.includes(hashedInput);\n  }\n}\n\n// Initialize MFA Manager\nconst mfaManager = new MFAManager();\n\n/**\n * Session Manager for device tracking and concurrent session control\n */\nclass SessionManager {\n  constructor() {\n    this.maxConcurrentSessions = 5;\n    this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n  }\n\n  async createSession(userId, deviceInfo) {\n    const sessionId = crypto.randomBytes(32).toString('hex');\n    const sessionData = {\n      userId,\n      sessionId,\n      deviceInfo,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      ipAddress: deviceInfo.ipAddress,\n      userAgent: deviceInfo.userAgent\n    };\n\n    // Store session\n    const sessionKey = `session:${userId}:${sessionId}`;\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(sessionData)\n    );\n\n    // Add to user's session list\n    await redisClient.sadd(`user:sessions:${userId}`, sessionId);\n\n    // Check concurrent session limit\n    await this.enforceSessionLimit(userId);\n\n    return sessionId;\n  }\n\n  async enforceSessionLimit(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    if (sessions.length > this.maxConcurrentSessions) {\n      // Get all session data to find oldest\n      const sessionData = await Promise.all(\n        sessions.map(async (sessionId) => {\n          const data = await redisClient.get(`session:${userId}:${sessionId}`);\n          return data ? { sessionId, ...JSON.parse(data) } : null;\n        })\n      );\n\n      // Sort by creation time and remove oldest sessions\n      const validSessions = sessionData.filter(s => s !== null);\n      validSessions.sort((a, b) => a.createdAt - b.createdAt);\n\n      const sessionsToRemove = validSessions.slice(0, validSessions.length - this.maxConcurrentSessions);\n      \n      for (const session of sessionsToRemove) {\n        await this.terminateSession(userId, session.sessionId);\n      }\n    }\n  }\n\n  async validateSession(userId, sessionId) {\n    const sessionKey = `session:${userId}:${sessionId}`;\n    const sessionData = await redisClient.get(sessionKey);\n\n    if (!sessionData) {\n      return false;\n    }\n\n    const session = JSON.parse(sessionData);\n    \n    // Update last activity\n    session.lastActivity = Date.now();\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(session)\n    );\n\n    return true;\n  }\n\n  async terminateSession(userId, sessionId) {\n    await redisClient.del(`session:${userId}:${sessionId}`);\n    await redisClient.srem(`user:sessions:${userId}`, sessionId);\n  }\n\n  async terminateAllSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    for (const sessionId of sessions) {\n      await redisClient.del(`session:${userId}:${sessionId}`);\n    }\n    \n    await redisClient.del(`user:sessions:${userId}`);\n  }\n\n  async getActiveSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    const sessionData = await Promise.all(\n      sessions.map(async (sessionId) => {\n        const data = await redisClient.get(`session:${userId}:${sessionId}`);\n        return data ? JSON.parse(data) : null;\n      })\n    );\n\n    return sessionData.filter(s => s !== null);\n  }\n}\n\n// Initialize Session Manager\nconst sessionManager = new SessionManager();\n\n/**\n * Account Security Features\n */\nclass AccountSecurity {\n  constructor() {\n    this.maxLoginAttempts = 5;\n    this.lockoutDuration = 30 * 60 * 1000; // 30 minutes\n    this.passwordHistoryLimit = 5;\n  }\n\n  async recordLoginAttempt(identifier, success) {\n    const key = `login:attempts:${identifier}`;\n    \n    if (success) {\n      await redisClient.del(key);\n      return;\n    }\n\n    const attempts = await redisClient.incr(key);\n    await redisClient.expire(key, this.lockoutDuration / 1000);\n\n    if (attempts >= this.maxLoginAttempts) {\n      await this.lockAccount(identifier);\n    }\n\n    return attempts;\n  }\n\n  async isAccountLocked(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    const locked = await redisClient.get(lockKey);\n    return locked === '1';\n  }\n\n  async lockAccount(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    await redisClient.setex(lockKey, this.lockoutDuration / 1000, '1');\n    \n    // Log security event\n    console.log(`Account locked due to failed login attempts: ${identifier}`);\n  }\n\n  async unlockAccount(identifier) {\n    await redisClient.del(`account:locked:${identifier}`);\n    await redisClient.del(`login:attempts:${identifier}`);\n  }\n\n  async checkPasswordHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    const history = await redisClient.lrange(historyKey, 0, -1);\n    \n    for (const oldHash of history) {\n      if (oldHash === passwordHash) {\n        return false; // Password was used before\n      }\n    }\n    \n    return true; // Password is new\n  }\n\n  async addPasswordToHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    await redisClient.lpush(historyKey, passwordHash);\n    await redisClient.ltrim(historyKey, 0, this.passwordHistoryLimit - 1);\n  }\n}\n\n// Initialize Account Security\nconst accountSecurity = new AccountSecurity();\n\n/**\n * Enhanced authentication middleware\n */\nconst authenticate = async (req, res, next) => {\n  try {\n    // Extract token from header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'No valid authentication token provided',\n        instance: req.originalUrl\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await jwtManager.verifyToken(token);\n\n    // Check if token is blacklisted\n    if (decoded.jti && await jwtManager.isTokenBlacklisted(decoded.jti)) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/token-revoked',\n        title: 'Token Revoked',\n        status: 401,\n        detail: 'This token has been revoked',\n        instance: req.originalUrl\n      });\n    }\n\n    // Validate session if sessionId is present\n    if (req.headers['x-session-id']) {\n      const sessionValid = await sessionManager.validateSession(\n        decoded.userId,\n        req.headers['x-session-id']\n      );\n      \n      if (!sessionValid) {\n        return res.status(401).json({\n          type: 'https://api.dreamerai.io/errors/invalid-session',\n          title: 'Invalid Session',\n          status: 401,\n          detail: 'Session has expired or is invalid',\n          instance: req.originalUrl\n        });\n      }\n    }\n\n    // Attach user info to request\n    req.user = {\n      id: decoded.userId,\n      role: decoded.role,\n      jti: decoded.jti\n    };\n\n    // Add security context\n    req.securityContext = {\n      tokenIssuedAt: decoded.iat,\n      tokenExpiresAt: decoded.exp,\n      deviceId: decoded.deviceId\n    };\n\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/authentication-failed',\n      title: 'Authentication Failed',\n      status: 401,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * MFA verification middleware\n */\nconst requireMFA = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'User must be authenticated',\n        instance: req.originalUrl\n      });\n    }\n\n    const mfaToken = req.headers['x-mfa-token'];\n    if (!mfaToken) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/mfa-required',\n        title: 'MFA Required',\n        status: 401,\n        detail: 'Multi-factor authentication token required',\n        instance: req.originalUrl\n      });\n    }\n\n    // Verify MFA token (implement based on user's MFA settings)\n    // This is a placeholder - implement actual MFA verification\n    const mfaValid = true; // await verifyUserMFA(req.user.id, mfaToken);\n    \n    if (!mfaValid) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/invalid-mfa',\n        title: 'Invalid MFA Token',\n        status: 401,\n        detail: 'The provided MFA token is invalid',\n        instance: req.originalUrl\n      });\n    }\n\n    next();\n  } catch (error) {\n    return res.status(500).json({\n      type: 'https://api.dreamerai.io/errors/mfa-error',\n      title: 'MFA Verification Error',\n      status: 500,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * Device trust middleware\n */\nconst deviceTrust = async (req, res, next) => {\n  const deviceId = req.headers['x-device-id'];\n  const deviceFingerprint = req.headers['x-device-fingerprint'];\n  \n  if (!deviceId || !deviceFingerprint) {\n    req.deviceTrusted = false;\n    return next();\n  }\n\n  // Verify device fingerprint\n  const trustedDevice = await redisClient.get(`device:trusted:${req.user.id}:${deviceId}`);\n  \n  if (trustedDevice) {\n    const savedFingerprint = JSON.parse(trustedDevice).fingerprint;\n    req.deviceTrusted = savedFingerprint === deviceFingerprint;\n  } else {\n    req.deviceTrusted = false;\n  }\n\n  next();\n};\n\n/**\n * Rate limiting for auth endpoints with progressive delays\n */\nconst authRateLimit = require('express-rate-limit')({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  skipSuccessfulRequests: true,\n  keyGenerator: (req) => {\n    // Use IP + user identifier for more accurate rate limiting\n    return `${req.ip}:${req.body.email || req.body.username || 'anonymous'}`;\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      type: 'https://api.dreamerai.io/errors/rate-limit',\n      title: 'Too Many Authentication Attempts',\n      status: 429,\n      detail: 'Too many authentication attempts. Please try again later.',\n      retryAfter: 900\n    });\n  },\n  skip: (req) => {\n    // Skip rate limiting for trusted devices\n    return req.deviceTrusted === true;\n  }\n});\nconst redis = require('ioredis');\n"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1375,1422],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"require-await","severity":2,"message":"Async method 'loadCommonPasswords' has no 'await' expression.","line":158,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":158,"endColumn":28},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[^a-zA-Z0-9]/ can be optimized to /[^\\dA-Za-z]/.","line":171,"column":16,"nodeType":"Literal","messageId":"better-regex","endLine":171,"endColumn":30,"fix":{"range":[4816,4830],"text":"/[^\\dA-Za-z]/"}},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[!@#$%^&*(),.?\":{}|<>]/ can be optimized to /[!\"#$%&()*,.:<>?@^{|}]/.","line":199,"column":10,"nodeType":"Literal","messageId":"better-regex","endLine":199,"endColumn":34,"fix":{"range":[5702,5726],"text":"/[!\"#$%&()*,.:<>?@^{|}]/"}},{"ruleId":"require-await","severity":2,"message":"Async method 'hashPassword' has no 'await' expression.","line":243,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":243,"endColumn":21},{"ruleId":"require-await","severity":2,"message":"Async method 'verifyPassword' has no 'await' expression.","line":250,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":250,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":263,"column":19,"nodeType":"MemberExpression","endLine":263,"endColumn":39},{"ruleId":"require-await","severity":2,"message":"Async method 'generateQRCode' has no 'await' expression.","line":296,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":296,"endColumn":23},{"ruleId":"require-await","severity":2,"message":"Async method 'hashBackupCode' has no 'await' expression.","line":318,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":318,"endColumn":23},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":388,"column":9,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":388,"endColumn":63},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":423,"column":7,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":423,"endColumn":62},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":484,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":484,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13430,13504],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":532,"column":19,"nodeType":"CallExpression","messageId":"substring","endLine":532,"endColumn":42,"fix":{"range":[14908,14919],"text":"slice(7"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":565,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":565,"endColumn":8},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":572,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":572,"endColumn":8},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":593,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":593,"endColumn":45},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":650,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":650,"endColumn":8},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":659,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":659,"endColumn":8},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":661,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":661,"endColumn":8}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":11,"fixableWarningCount":0,"source":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcrypt');\nconst crypto = require('crypto');\nconst speakeasy = require('speakeasy');\nconst QRCode = require('qrcode');\nconst { promisify } = require('util');\nconst redis = require('ioredis');\n\n// Initialize Redis client for session management\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD,\n  retryStrategy: (times) => Math.min(times * 50, 2000)\n});\n\n// Enhanced JWT configuration with rotating secrets\nclass JWTManager {\n  constructor() {\n    this.algorithm = 'HS512';\n    this.issuer = 'dreamerai.io';\n    this.audience = 'dreamerai-api';\n    this.accessTokenExpiry = '15m'; // Reduced from 1h\n    this.refreshTokenExpiry = '7d';\n    this.secretRotationInterval = 24 * 60 * 60 * 1000; // 24 hours\n    \n    // Initialize secrets\n    this.currentSecret = this.generateSecret();\n    this.previousSecret = null;\n    this.secretRotationTime = Date.now();\n    \n    // Start secret rotation timer\n    this.startSecretRotation();\n  }\n\n  generateSecret() {\n    return crypto.randomBytes(64).toString('hex');\n  }\n\n  startSecretRotation() {\n    setInterval(() => {\n      this.previousSecret = this.currentSecret;\n      this.currentSecret = this.generateSecret();\n      this.secretRotationTime = Date.now();\n      console.log('JWT secret rotated successfully');\n    }, this.secretRotationInterval);\n  }\n\n  async generateTokens(userId, role = 'user', deviceId = null) {\n    const jti = crypto.randomBytes(16).toString('hex');\n    const payload = {\n      userId,\n      role,\n      deviceId,\n      jti,\n      iss: this.issuer,\n      aud: this.audience\n    };\n\n    const accessToken = jwt.sign(payload, this.currentSecret, {\n      expiresIn: this.accessTokenExpiry,\n      algorithm: this.algorithm\n    });\n\n    const refreshToken = jwt.sign(\n      { ...payload, type: 'refresh' },\n      this.currentSecret,\n      {\n        expiresIn: this.refreshTokenExpiry,\n        algorithm: this.algorithm\n      }\n    );\n\n    // Store refresh token in Redis with device tracking\n    const refreshKey = `refresh:${userId}:${jti}`;\n    await redisClient.setex(\n      refreshKey,\n      7 * 24 * 60 * 60, // 7 days in seconds\n      JSON.stringify({\n        userId,\n        role,\n        deviceId,\n        createdAt: Date.now()\n      })\n    );\n\n    return {\n      accessToken,\n      refreshToken,\n      tokenType: 'Bearer',\n      expiresIn: 900, // 15 minutes in seconds\n      refreshExpiresIn: 604800 // 7 days in seconds\n    };\n  }\n\n  async verifyToken(token) {\n    try {\n      // Try current secret first\n      try {\n        return await promisify(jwt.verify)(token, this.currentSecret, {\n          issuer: this.issuer,\n          audience: this.audience,\n          algorithms: [this.algorithm]\n        });\n      } catch (error) {\n        // If current secret fails and we have a previous secret, try it\n        if (this.previousSecret && error.name === 'JsonWebTokenError') {\n          return await promisify(jwt.verify)(token, this.previousSecret, {\n            issuer: this.issuer,\n            audience: this.audience,\n            algorithms: [this.algorithm]\n          });\n        }\n        throw error;\n      }\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        throw new Error('Token has expired');\n      } else if (error.name === 'JsonWebTokenError') {\n        throw new Error('Invalid token');\n      }\n      throw error;\n    }\n  }\n\n  async revokeToken(token) {\n    const decoded = jwt.decode(token);\n    if (decoded && decoded.jti) {\n      const blacklistKey = `blacklist:${decoded.jti}`;\n      const ttl = decoded.exp - Math.floor(Date.now() / 1000);\n      if (ttl > 0) {\n        await redisClient.setex(blacklistKey, ttl, '1');\n      }\n    }\n  }\n\n  async isTokenBlacklisted(jti) {\n    const result = await redisClient.get(`blacklist:${jti}`);\n    return result === '1';\n  }\n}\n\n// Initialize JWT Manager\nconst jwtManager = new JWTManager();\n\n/**\n * Enhanced password security with entropy checking\n */\nclass PasswordManager {\n  constructor() {\n    this.minLength = 12;\n    this.maxLength = 128;\n    this.saltRounds = 14; // Increased from 12\n    this.commonPasswords = new Set(); // Load from file in production\n    this.loadCommonPasswords();\n  }\n\n  async loadCommonPasswords() {\n    // In production, load from a file containing top 10000 common passwords\n    this.commonPasswords = new Set([\n      'password123', 'admin123', 'qwerty123', 'letmein123',\n      'welcome123', 'password1', 'admin1234', '12345678'\n    ]);\n  }\n\n  calculateEntropy(password) {\n    const charsets = {\n      lowercase: /[a-z]/.test(password) ? 26 : 0,\n      uppercase: /[A-Z]/.test(password) ? 26 : 0,\n      numbers: /\\d/.test(password) ? 10 : 0,\n      special: /[^a-zA-Z0-9]/.test(password) ? 32 : 0\n    };\n\n    const possibleChars = Object.values(charsets).reduce((a, b) => a + b, 0);\n    return password.length * Math.log2(possibleChars);\n  }\n\n  validatePassword(password) {\n    const errors = [];\n\n    // Length check\n    if (password.length < this.minLength) {\n      errors.push(`Password must be at least ${this.minLength} characters`);\n    }\n    if (password.length > this.maxLength) {\n      errors.push(`Password must not exceed ${this.maxLength} characters`);\n    }\n\n    // Complexity requirements\n    if (!/[a-z]/.test(password)) {\n      errors.push('Password must contain at least one lowercase letter');\n    }\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Password must contain at least one uppercase letter');\n    }\n    if (!/\\d/.test(password)) {\n      errors.push('Password must contain at least one number');\n    }\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Password must contain at least one special character');\n    }\n\n    // Sequential character check\n    if (/(.)\\1{2,}/.test(password)) {\n      errors.push('Password cannot contain more than 2 consecutive identical characters');\n    }\n\n    // Common patterns check\n    const commonPatterns = ['123', 'abc', 'qwe', 'asd'];\n    for (const pattern of commonPatterns) {\n      if (password.toLowerCase().includes(pattern)) {\n        errors.push('Password contains common patterns');\n        break;\n      }\n    }\n\n    // Common password check\n    if (this.commonPasswords.has(password.toLowerCase())) {\n      errors.push('This password is too common');\n    }\n\n    // Entropy check\n    const entropy = this.calculateEntropy(password);\n    if (entropy < 50) {\n      errors.push('Password is not strong enough');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      strength: this.getPasswordStrength(entropy)\n    };\n  }\n\n  getPasswordStrength(entropy) {\n    if (entropy < 30) return 'very weak';\n    if (entropy < 50) return 'weak';\n    if (entropy < 70) return 'moderate';\n    if (entropy < 90) return 'strong';\n    return 'very strong';\n  }\n\n  async hashPassword(password) {\n    // Add pepper for additional security\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.hash(pepperedPassword, this.saltRounds);\n  }\n\n  async verifyPassword(password, hash) {\n    const pepper = process.env.PASSWORD_PEPPER || 'default-pepper-change-in-production';\n    const pepperedPassword = password + pepper;\n    return bcrypt.compare(pepperedPassword, hash);\n  }\n\n  generateSecurePassword() {\n    const length = 16;\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';\n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n      const randomIndex = crypto.randomInt(0, charset.length);\n      password += charset[randomIndex];\n    }\n    \n    return password;\n  }\n}\n\n// Initialize Password Manager\nconst passwordManager = new PasswordManager();\n\n/**\n * Multi-Factor Authentication Manager\n */\nclass MFAManager {\n  constructor() {\n    this.appName = 'Dreamer AI Solutions';\n    this.backupCodeCount = 10;\n    this.otpWindow = 2; // Allow 2 time steps before/after\n  }\n\n  generateSecret(userId) {\n    const secret = speakeasy.generateSecret({\n      name: `${this.appName} (${userId})`,\n      issuer: this.appName,\n      length: 32\n    });\n\n    return {\n      secret: secret.base32,\n      qrCode: secret.otpauth_url\n    };\n  }\n\n  async generateQRCode(otpauthUrl) {\n    return QRCode.toDataURL(otpauthUrl);\n  }\n\n  verifyToken(token, secret) {\n    return speakeasy.totp.verify({\n      secret,\n      encoding: 'base32',\n      token,\n      window: this.otpWindow\n    });\n  }\n\n  generateBackupCodes() {\n    const codes = [];\n    for (let i = 0; i < this.backupCodeCount; i++) {\n      const code = crypto.randomBytes(4).toString('hex').toUpperCase();\n      codes.push(`${code.slice(0, 4)}-${code.slice(4)}`);\n    }\n    return codes;\n  }\n\n  async hashBackupCode(code) {\n    return crypto.createHash('sha256').update(code).digest('hex');\n  }\n\n  async verifyBackupCode(code, hashedCodes) {\n    const hashedInput = await this.hashBackupCode(code);\n    return hashedCodes.includes(hashedInput);\n  }\n}\n\n// Initialize MFA Manager\nconst mfaManager = new MFAManager();\n\n/**\n * Session Manager for device tracking and concurrent session control\n */\nclass SessionManager {\n  constructor() {\n    this.maxConcurrentSessions = 5;\n    this.sessionTimeout = 30 * 60 * 1000; // 30 minutes\n  }\n\n  async createSession(userId, deviceInfo) {\n    const sessionId = crypto.randomBytes(32).toString('hex');\n    const sessionData = {\n      userId,\n      sessionId,\n      deviceInfo,\n      createdAt: Date.now(),\n      lastActivity: Date.now(),\n      ipAddress: deviceInfo.ipAddress,\n      userAgent: deviceInfo.userAgent\n    };\n\n    // Store session\n    const sessionKey = `session:${userId}:${sessionId}`;\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(sessionData)\n    );\n\n    // Add to user's session list\n    await redisClient.sadd(`user:sessions:${userId}`, sessionId);\n\n    // Check concurrent session limit\n    await this.enforceSessionLimit(userId);\n\n    return sessionId;\n  }\n\n  async enforceSessionLimit(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    if (sessions.length > this.maxConcurrentSessions) {\n      // Get all session data to find oldest\n      const sessionData = await Promise.all(\n        sessions.map(async (sessionId) => {\n          const data = await redisClient.get(`session:${userId}:${sessionId}`);\n          return data ? { sessionId, ...JSON.parse(data) } : null;\n        })\n      );\n\n      // Sort by creation time and remove oldest sessions\n      const validSessions = sessionData.filter(s => s !== null);\n      validSessions.sort((a, b) => a.createdAt - b.createdAt);\n\n      const sessionsToRemove = validSessions.slice(0, validSessions.length - this.maxConcurrentSessions);\n      \n      for (const session of sessionsToRemove) {\n        await this.terminateSession(userId, session.sessionId);\n      }\n    }\n  }\n\n  async validateSession(userId, sessionId) {\n    const sessionKey = `session:${userId}:${sessionId}`;\n    const sessionData = await redisClient.get(sessionKey);\n\n    if (!sessionData) {\n      return false;\n    }\n\n    const session = JSON.parse(sessionData);\n    \n    // Update last activity\n    session.lastActivity = Date.now();\n    await redisClient.setex(\n      sessionKey,\n      this.sessionTimeout / 1000,\n      JSON.stringify(session)\n    );\n\n    return true;\n  }\n\n  async terminateSession(userId, sessionId) {\n    await redisClient.del(`session:${userId}:${sessionId}`);\n    await redisClient.srem(`user:sessions:${userId}`, sessionId);\n  }\n\n  async terminateAllSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    \n    for (const sessionId of sessions) {\n      await redisClient.del(`session:${userId}:${sessionId}`);\n    }\n    \n    await redisClient.del(`user:sessions:${userId}`);\n  }\n\n  async getActiveSessions(userId) {\n    const sessions = await redisClient.smembers(`user:sessions:${userId}`);\n    const sessionData = await Promise.all(\n      sessions.map(async (sessionId) => {\n        const data = await redisClient.get(`session:${userId}:${sessionId}`);\n        return data ? JSON.parse(data) : null;\n      })\n    );\n\n    return sessionData.filter(s => s !== null);\n  }\n}\n\n// Initialize Session Manager\nconst sessionManager = new SessionManager();\n\n/**\n * Account Security Features\n */\nclass AccountSecurity {\n  constructor() {\n    this.maxLoginAttempts = 5;\n    this.lockoutDuration = 30 * 60 * 1000; // 30 minutes\n    this.passwordHistoryLimit = 5;\n  }\n\n  async recordLoginAttempt(identifier, success) {\n    const key = `login:attempts:${identifier}`;\n    \n    if (success) {\n      await redisClient.del(key);\n      return;\n    }\n\n    const attempts = await redisClient.incr(key);\n    await redisClient.expire(key, this.lockoutDuration / 1000);\n\n    if (attempts >= this.maxLoginAttempts) {\n      await this.lockAccount(identifier);\n    }\n\n    return attempts;\n  }\n\n  async isAccountLocked(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    const locked = await redisClient.get(lockKey);\n    return locked === '1';\n  }\n\n  async lockAccount(identifier) {\n    const lockKey = `account:locked:${identifier}`;\n    await redisClient.setex(lockKey, this.lockoutDuration / 1000, '1');\n    \n    // Log security event\n    console.log(`Account locked due to failed login attempts: ${identifier}`);\n  }\n\n  async unlockAccount(identifier) {\n    await redisClient.del(`account:locked:${identifier}`);\n    await redisClient.del(`login:attempts:${identifier}`);\n  }\n\n  async checkPasswordHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    const history = await redisClient.lrange(historyKey, 0, -1);\n    \n    for (const oldHash of history) {\n      if (oldHash === passwordHash) {\n        return false; // Password was used before\n      }\n    }\n    \n    return true; // Password is new\n  }\n\n  async addPasswordToHistory(userId, passwordHash) {\n    const historyKey = `password:history:${userId}`;\n    await redisClient.lpush(historyKey, passwordHash);\n    await redisClient.ltrim(historyKey, 0, this.passwordHistoryLimit - 1);\n  }\n}\n\n// Initialize Account Security\nconst accountSecurity = new AccountSecurity();\n\n/**\n * Enhanced authentication middleware\n */\nconst authenticate = async (req, res, next) => {\n  try {\n    // Extract token from header\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'No valid authentication token provided',\n        instance: req.originalUrl\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await jwtManager.verifyToken(token);\n\n    // Check if token is blacklisted\n    if (decoded.jti && await jwtManager.isTokenBlacklisted(decoded.jti)) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/token-revoked',\n        title: 'Token Revoked',\n        status: 401,\n        detail: 'This token has been revoked',\n        instance: req.originalUrl\n      });\n    }\n\n    // Validate session if sessionId is present\n    if (req.headers['x-session-id']) {\n      const sessionValid = await sessionManager.validateSession(\n        decoded.userId,\n        req.headers['x-session-id']\n      );\n      \n      if (!sessionValid) {\n        return res.status(401).json({\n          type: 'https://api.dreamerai.io/errors/invalid-session',\n          title: 'Invalid Session',\n          status: 401,\n          detail: 'Session has expired or is invalid',\n          instance: req.originalUrl\n        });\n      }\n    }\n\n    // Attach user info to request\n    req.user = {\n      id: decoded.userId,\n      role: decoded.role,\n      jti: decoded.jti\n    };\n\n    // Add security context\n    req.securityContext = {\n      tokenIssuedAt: decoded.iat,\n      tokenExpiresAt: decoded.exp,\n      deviceId: decoded.deviceId\n    };\n\n    next();\n  } catch (error) {\n    return res.status(401).json({\n      type: 'https://api.dreamerai.io/errors/authentication-failed',\n      title: 'Authentication Failed',\n      status: 401,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * MFA verification middleware\n */\nconst requireMFA = async (req, res, next) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/authentication-required',\n        title: 'Authentication Required',\n        status: 401,\n        detail: 'User must be authenticated',\n        instance: req.originalUrl\n      });\n    }\n\n    const mfaToken = req.headers['x-mfa-token'];\n    if (!mfaToken) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/mfa-required',\n        title: 'MFA Required',\n        status: 401,\n        detail: 'Multi-factor authentication token required',\n        instance: req.originalUrl\n      });\n    }\n\n    // Verify MFA token (implement based on user's MFA settings)\n    // This is a placeholder - implement actual MFA verification\n    const mfaValid = true; // await verifyUserMFA(req.user.id, mfaToken);\n    \n    if (!mfaValid) {\n      return res.status(401).json({\n        type: 'https://api.dreamerai.io/errors/invalid-mfa',\n        title: 'Invalid MFA Token',\n        status: 401,\n        detail: 'The provided MFA token is invalid',\n        instance: req.originalUrl\n      });\n    }\n\n    next();\n  } catch (error) {\n    return res.status(500).json({\n      type: 'https://api.dreamerai.io/errors/mfa-error',\n      title: 'MFA Verification Error',\n      status: 500,\n      detail: error.message,\n      instance: req.originalUrl\n    });\n  }\n};\n\n/**\n * Device trust middleware\n */\nconst deviceTrust = async (req, res, next) => {\n  const deviceId = req.headers['x-device-id'];\n  const deviceFingerprint = req.headers['x-device-fingerprint'];\n  \n  if (!deviceId || !deviceFingerprint) {\n    req.deviceTrusted = false;\n    return next();\n  }\n\n  // Verify device fingerprint\n  const trustedDevice = await redisClient.get(`device:trusted:${req.user.id}:${deviceId}`);\n  \n  if (trustedDevice) {\n    const savedFingerprint = JSON.parse(trustedDevice).fingerprint;\n    req.deviceTrusted = savedFingerprint === deviceFingerprint;\n  } else {\n    req.deviceTrusted = false;\n  }\n\n  next();\n};\n\n/**\n * Rate limiting for auth endpoints with progressive delays\n */\nconst authRateLimit = require('express-rate-limit')({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  skipSuccessfulRequests: true,\n  keyGenerator: (req) => {\n    // Use IP + user identifier for more accurate rate limiting\n    return `${req.ip}:${req.body.email || req.body.username || 'anonymous'}`;\n  },\n  handler: (req, res) => {\n    res.status(429).json({\n      type: 'https://api.dreamerai.io/errors/rate-limit',\n      title: 'Too Many Authentication Attempts',\n      status: 429,\n      detail: 'Too many authentication attempts. Please try again later.',\n      retryAfter: 900\n    });\n  },\n  skip: (req) => {\n    // Skip rate limiting for trusted devices\n    return req.deviceTrusted === true;\n  }\n});\n\nmodule.exports = {\n  jwtManager,\n  passwordManager,\n  mfaManager,\n  sessionManager,\n  accountSecurity,\n  authenticate,\n  requireMFA,\n  deviceTrust,\n  authRateLimit,\n  // Export legacy functions for backward compatibility\n  generateTokens: (userId, role) => jwtManager.generateTokens(userId, role),\n  verifyToken: (token) => jwtManager.verifyToken(token),\n  hashPassword: (password) => passwordManager.hashPassword(password),\n  verifyPassword: (password, hash) => passwordManager.verifyPassword(password, hash),\n  validatePassword: (password) => passwordManager.validatePassword(password)\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/errorHandler.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":1,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":42},{"ruleId":"unicorn/prefer-switch","severity":2,"message":"Use `switch` instead of multiple `else-if`.","line":17,"column":3,"nodeType":null,"messageId":"prefer-switch","endLine":17,"endColumn":39,"fix":{"range":[426,926],"text":"switch (err.name) {\n  case 'ValidationError': {\n    status = 400;\n    message = 'Validation Error';\n    code = 'VALIDATION_ERROR';\n  \n  break;\n  }\n  case 'UnauthorizedError': {\n    status = 401;\n    message = 'Unauthorized';\n    code = 'UNAUTHORIZED';\n  \n  break;\n  }\n  case 'CastError': {\n    status = 400;\n    message = 'Invalid ID format';\n    code = 'INVALID_ID';\n  \n  break;\n  }\n  default: if (err.code === 'ECONNREFUSED') {\n    status = 503;\n    message = 'Service Unavailable';\n    code = 'SERVICE_UNAVAILABLE';\n  }\n  }"}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const errorHandler = (err, req, res, next) => {\n  // Log error for debugging\n  console.error('Error:', {\n    message: err.message,\n    stack: err.stack,\n    path: req.path,\n    method: req.method,\n    ip: req.ip\n  });\n\n  // Default error status and message\n  let status = err.status || 500;\n  let message = err.message || 'Internal Server Error';\n  let code = err.code || 'INTERNAL_ERROR';\n\n  // Handle specific error types\n  if (err.name === 'ValidationError') {\n    status = 400;\n    message = 'Validation Error';\n    code = 'VALIDATION_ERROR';\n  } else if (err.name === 'UnauthorizedError') {\n    status = 401;\n    message = 'Unauthorized';\n    code = 'UNAUTHORIZED';\n  } else if (err.name === 'CastError') {\n    status = 400;\n    message = 'Invalid ID format';\n    code = 'INVALID_ID';\n  } else if (err.code === 'ECONNREFUSED') {\n    status = 503;\n    message = 'Service Unavailable';\n    code = 'SERVICE_UNAVAILABLE';\n  }\n\n  // Send error response\n  res.status(status).json({\n    error: {\n      message,\n      code,\n      ...(process.env.NODE_ENV === 'development' && {\n        details: err.message,\n        stack: err.stack\n      })\n    },\n    timestamp: new Date().toISOString(),\n    path: req.path\n  });\n};\n\nmodule.exports = { errorHandler };","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/logging.js","messages":[{"ruleId":"import/order","severity":2,"message":"`express-winston` import should occur before import of `winston`","line":2,"column":24,"nodeType":"CallExpression","endLine":2,"endColumn":50,"fix":{"range":[0,87],"text":"const expressWinston = require('express-winston');\nconst winston = require('winston');\n"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected method shorthand.","line":52,"column":3,"nodeType":"Property","messageId":"expectedMethodShorthand","endLine":55,"endColumn":4,"fix":{"range":[1332,1438],"text":"ignoreRoute (req, res) { \n    // Don't log health checks\n    return req.path === '/health'; \n  }"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'res' is defined but never used. Allowed unused args must match /^_/u.","line":52,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const winston = require('winston');\nconst expressWinston = require('express-winston');\n\n// Create logger instance\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'dreamer-ai-api' },\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ]\n});\n\n// Add file transport in production\nif (process.env.NODE_ENV === 'production') {\n  logger.add(new winston.transports.File({ \n    filename: 'logs/error.log', \n    level: 'error' \n  }));\n  logger.add(new winston.transports.File({ \n    filename: 'logs/combined.log' \n  }));\n}\n\n// Express request logger middleware\nconst requestLogger = expressWinston.logger({\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ],\n  format: winston.format.combine(\n    winston.format.json(),\n    winston.format.timestamp()\n  ),\n  meta: true,\n  msg: \"{{req.method}} {{req.url}} {{res.statusCode}} {{res.responseTime}}ms\",\n  expressFormat: false,\n  colorize: true,\n  ignoreRoute: function (req, res) { \n    // Don't log health checks\n    return req.path === '/health'; \n  }\n});\n\n// Express error logger middleware\nconst errorLogger = expressWinston.errorLogger({\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      )\n    })\n  ],\n  format: winston.format.combine(\n    winston.format.json(),\n    winston.format.timestamp()\n  )\n});\n\nmodule.exports = {\n  logger,\n  requestLogger,\n  errorLogger\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/rateLimiting.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":15,"nodeType":"CallExpression","endLine":3,"endColumn":33,"fix":{"range":[130,130],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`ioredis` import should occur before import of `rate-limit-redis`","line":3,"column":15,"nodeType":"CallExpression","endLine":3,"endColumn":33,"fix":{"range":[49,131],"text":"const Redis = require('ioredis');\nconst RedisStore = require('rate-limit-redis');\n"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":166,"column":8,"nodeType":"MemberExpression","endLine":166,"endColumn":24},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":269,"column":16,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":269,"endColumn":23,"fix":{"range":[6851,6978],"text":"for (const [key, bucket] of tokenBuckets.entries()) {\n    if (now - bucket.lastRefill > maxAge) {\n      tokenBuckets.delete(key);\n    }\n  }"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'res'.","line":282,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":282,"endColumn":6}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const rateLimit = require('express-rate-limit');\nconst RedisStore = require('rate-limit-redis');\nconst Redis = require('ioredis');\nconst { APIErrors } = require('./validation');\n\n// Redis client for distributed rate limiting\nconst redisClient = process.env.REDIS_URL \n  ? new Redis(process.env.REDIS_URL)\n  : null;\n\n/**\n * Token bucket implementation for more sophisticated rate limiting\n */\nclass TokenBucket {\n  constructor(capacity, refillRate, refillAmount = 1) {\n    this.capacity = capacity;\n    this.tokens = capacity;\n    this.refillRate = refillRate; // milliseconds\n    this.refillAmount = refillAmount;\n    this.lastRefill = Date.now();\n  }\n\n  consume(tokens = 1) {\n    this.refill();\n    \n    if (this.tokens >= tokens) {\n      this.tokens -= tokens;\n      return true;\n    }\n    \n    return false;\n  }\n\n  refill() {\n    const now = Date.now();\n    const timePassed = now - this.lastRefill;\n    const tokensToAdd = Math.floor(timePassed / this.refillRate) * this.refillAmount;\n    \n    if (tokensToAdd > 0) {\n      this.tokens = Math.min(this.capacity, this.tokens + tokensToAdd);\n      this.lastRefill = now;\n    }\n  }\n\n  getTokens() {\n    this.refill();\n    return this.tokens;\n  }\n}\n\n/**\n * Create rate limiter with Redis store for distributed systems\n */\nconst createRateLimiter = (options = {}) => {\n  const config = {\n    windowMs: options.windowMs || 15 * 60 * 1000, // 15 minutes\n    max: options.max || 100,\n    message: options.message || 'Too many requests',\n    standardHeaders: true,\n    legacyHeaders: false,\n    handler: (req, res) => {\n      const retryAfter = Math.ceil(options.windowMs / 1000);\n      const error = APIErrors.RateLimit(retryAfter, req.originalUrl);\n      \n      res.set('Retry-After', retryAfter);\n      res.status(error.status).json(error.toJSON());\n    },\n    skip: options.skip,\n    keyGenerator: options.keyGenerator || ((req) => {\n      // Use user ID if authenticated, otherwise use IP\n      return req.user?.id || req.ip;\n    })\n  };\n\n  // Use Redis store if available for distributed rate limiting\n  if (redisClient) {\n    config.store = new RedisStore({\n      client: redisClient,\n      prefix: options.prefix || 'rl:',\n      sendCommand: (...args) => redisClient.send_command(...args)\n    });\n  }\n\n  return rateLimit(config);\n};\n\n/**\n * Rate limiters for different endpoints\n */\nconst rateLimiters = {\n  // Strict rate limit for authentication endpoints\n  auth: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5,\n    prefix: 'rl:auth:',\n    message: 'Too many authentication attempts'\n  }),\n\n  // Standard API rate limit\n  api: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100,\n    prefix: 'rl:api:',\n    skip: (req) => req.user?.role === 'admin' || req.user?.role === 'super_admin'\n  }),\n\n  // Lenient rate limit for read operations\n  read: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 1000,\n    prefix: 'rl:read:'\n  }),\n\n  // Strict rate limit for write operations\n  write: createRateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 50,\n    prefix: 'rl:write:'\n  }),\n\n  // Very strict rate limit for sensitive operations\n  sensitive: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 10,\n    prefix: 'rl:sensitive:'\n  }),\n\n  // AI/Chat endpoints with token-based limits\n  ai: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 100,\n    prefix: 'rl:ai:',\n    keyGenerator: (req) => req.user?.id || req.ip\n  }),\n\n  // File upload rate limit\n  upload: createRateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 20,\n    prefix: 'rl:upload:'\n  }),\n\n  // Newsletter subscription\n  newsletter: createRateLimiter({\n    windowMs: 24 * 60 * 60 * 1000, // 24 hours\n    max: 3,\n    prefix: 'rl:newsletter:',\n    keyGenerator: (req) => req.body?.email || req.ip\n  })\n};\n\n/**\n * Dynamic rate limiter based on user tier\n */\nconst dynamicRateLimiter = (req, res, next) => {\n  const userTier = req.user?.tier || 'anonymous';\n  \n  const limits = {\n    anonymous: { windowMs: 15 * 60 * 1000, max: 100 },\n    free: { windowMs: 15 * 60 * 1000, max: 1000 },\n    premium: { windowMs: 15 * 60 * 1000, max: 5000 },\n    enterprise: { windowMs: 15 * 60 * 1000, max: 50000 }\n  };\n\n  const limiter = createRateLimiter({\n    ...limits[userTier],\n    prefix: `rl:tier:${userTier}:`\n  });\n\n  limiter(req, res, next);\n};\n\n/**\n * Token bucket rate limiter for more sophisticated control\n */\nconst tokenBuckets = new Map();\n\nconst tokenBucketLimiter = (options = {}) => {\n  const {\n    capacity = 10,\n    refillRate = 60000, // 1 minute\n    refillAmount = 1,\n    tokensPerRequest = 1\n  } = options;\n\n  return (req, res, next) => {\n    const key = req.user?.id || req.ip;\n    \n    if (!tokenBuckets.has(key)) {\n      tokenBuckets.set(key, new TokenBucket(capacity, refillRate, refillAmount));\n    }\n\n    const bucket = tokenBuckets.get(key);\n    const hasTokens = bucket.consume(tokensPerRequest);\n    const remainingTokens = bucket.getTokens();\n\n    // Set headers\n    res.set('X-RateLimit-Limit', capacity);\n    res.set('X-RateLimit-Remaining', remainingTokens);\n    res.set('X-RateLimit-Reset', new Date(Date.now() + refillRate).toISOString());\n\n    if (!hasTokens) {\n      const error = APIErrors.RateLimit(\n        Math.ceil(refillRate / 1000),\n        req.originalUrl\n      );\n      return res.status(error.status).json(error.toJSON());\n    }\n\n    next();\n  };\n};\n\n/**\n * Sliding window rate limiter\n */\nconst slidingWindowLimiter = (options = {}) => {\n  const {\n    windowMs = 60000, // 1 minute\n    max = 10\n  } = options;\n\n  const requests = new Map();\n\n  return (req, res, next) => {\n    const key = req.user?.id || req.ip;\n    const now = Date.now();\n    const windowStart = now - windowMs;\n\n    if (!requests.has(key)) {\n      requests.set(key, []);\n    }\n\n    // Remove old requests outside the window\n    const userRequests = requests.get(key).filter(time => time > windowStart);\n    \n    if (userRequests.length >= max) {\n      const oldestRequest = Math.min(...userRequests);\n      const resetTime = oldestRequest + windowMs;\n      const retryAfter = Math.ceil((resetTime - now) / 1000);\n\n      const error = APIErrors.RateLimit(retryAfter, req.originalUrl);\n      \n      res.set('Retry-After', retryAfter);\n      res.set('X-RateLimit-Limit', max);\n      res.set('X-RateLimit-Remaining', 0);\n      res.set('X-RateLimit-Reset', new Date(resetTime).toISOString());\n      \n      return res.status(error.status).json(error.toJSON());\n    }\n\n    userRequests.push(now);\n    requests.set(key, userRequests);\n\n    res.set('X-RateLimit-Limit', max);\n    res.set('X-RateLimit-Remaining', max - userRequests.length);\n\n    next();\n  };\n};\n\n/**\n * Cleanup old token buckets periodically\n */\nsetInterval(() => {\n  const now = Date.now();\n  const maxAge = 60 * 60 * 1000; // 1 hour\n\n  tokenBuckets.forEach((bucket, key) => {\n    if (now - bucket.lastRefill > maxAge) {\n      tokenBuckets.delete(key);\n    }\n  });\n}, 60 * 60 * 1000); // Run every hour\n\n/**\n * Express middleware to add rate limit info to all responses\n */\nconst rateLimitInfo = (req, res, next) => {\n  const originalSend = res.send;\n  \n  res.send = function(data) {\n    // Add rate limit info to response headers if available\n    if (req.rateLimit) {\n      res.set('X-RateLimit-Limit', req.rateLimit.limit);\n      res.set('X-RateLimit-Remaining', req.rateLimit.remaining);\n      res.set('X-RateLimit-Reset', new Date(req.rateLimit.resetTime).toISOString());\n    }\n    \n    originalSend.call(this, data);\n  };\n  \n  next();\n};\n\nmodule.exports = {\n  createRateLimiter,\n  rateLimiters,\n  dynamicRateLimiter,\n  tokenBucketLimiter,\n  slidingWindowLimiter,\n  rateLimitInfo,\n  TokenBucket\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/security.js","messages":[{"ruleId":"import/order","severity":2,"message":"`helmet` import should occur after import of `crypto`","line":1,"column":16,"nodeType":"CallExpression","endLine":1,"endColumn":33,"fix":{"range":[0,218],"text":"const mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst csrf = require('csurf');\nconst crypto = require('crypto');\nconst helmet = require('helmet');\n"}},{"ruleId":"import/order","severity":2,"message":"`express-mongo-sanitize` import should occur after import of `crypto`","line":2,"column":23,"nodeType":"CallExpression","endLine":2,"endColumn":56,"fix":{"range":[34,218],"text":"const xss = require('xss-clean');\nconst hpp = require('hpp');\nconst csrf = require('csurf');\nconst crypto = require('crypto');\nconst mongoSanitize = require('express-mongo-sanitize');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'xss' is assigned a value but never used.","line":3,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":10},{"ruleId":"import/order","severity":2,"message":"`xss-clean` import should occur after import of `isomorphic-dompurify`","line":3,"column":13,"nodeType":"CallExpression","endLine":3,"endColumn":33,"fix":{"range":[91,366],"text":"const hpp = require('hpp');\nconst csrf = require('csurf');\nconst crypto = require('crypto');\nconst { RateLimiterRedis } = require('rate-limiter-flexible');\nconst redis = require('ioredis');\nconst DOMPurify = require('isomorphic-dompurify');\nconst xss = require('xss-clean');\n"}},{"ruleId":"import/order","severity":2,"message":"`hpp` import should occur after import of `crypto`","line":4,"column":13,"nodeType":"CallExpression","endLine":4,"endColumn":27,"fix":{"range":[125,218],"text":"const csrf = require('csurf');\nconst crypto = require('crypto');\nconst hpp = require('hpp');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":14,"nodeType":"CallExpression","endLine":5,"endColumn":30,"fix":{"range":[183,183],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`csurf` import should occur after import of `crypto`","line":5,"column":14,"nodeType":"CallExpression","endLine":5,"endColumn":30,"fix":{"range":[153,218],"text":"const crypto = require('crypto');\nconst csrf = require('csurf');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":6,"column":16,"nodeType":"CallExpression","endLine":6,"endColumn":33,"fix":{"range":[217,217],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`rate-limiter-flexible` import should occur after import of `isomorphic-dompurify`","line":7,"column":30,"nodeType":"CallExpression","endLine":7,"endColumn":62,"fix":{"range":[218,366],"text":"const redis = require('ioredis');\nconst DOMPurify = require('isomorphic-dompurify');\nconst { RateLimiterRedis } = require('rate-limiter-flexible');\n"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'res'.","line":88,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":88,"endColumn":6},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":118,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":118,"endColumn":10},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":123,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":123,"endColumn":10},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":128,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":128,"endColumn":10},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":146,"column":13,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":146,"endColumn":27,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[3731,3750],"text":"Object.prototype.hasOwnProperty.call(obj, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":149,"column":7,"nodeType":"MemberExpression","endLine":149,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":149,"column":39,"nodeType":"MemberExpression","endLine":149,"endColumn":47},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'value'.","line":162,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":162,"endColumn":8},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":162,"column":17,"nodeType":"Identifier","messageId":"method","endLine":162,"endColumn":24,"fix":{"range":[4046,4052],"text":"All('\\0'"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'value'.","line":165,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":165,"endColumn":8},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":166,"column":6,"nodeType":"Identifier","messageId":"method","endLine":166,"endColumn":13,"fix":{"range":[4114,4119],"text":"All('<'"}},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":167,"column":6,"nodeType":"Identifier","messageId":"method","endLine":167,"endColumn":13,"fix":{"range":[4141,4146],"text":"All('>'"}},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":168,"column":6,"nodeType":"Identifier","messageId":"method","endLine":168,"endColumn":13,"fix":{"range":[4168,4173],"text":"All('\"'"}},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":169,"column":6,"nodeType":"Identifier","messageId":"method","endLine":169,"endColumn":13,"fix":{"range":[4197,4202],"text":"All('\\''"}},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":170,"column":6,"nodeType":"Identifier","messageId":"method","endLine":170,"endColumn":13,"fix":{"range":[4226,4232],"text":"All('/'"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to function parameter 'value'.","line":174,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParam","endLine":174,"endColumn":10},{"ruleId":"no-prototype-builtins","severity":2,"message":"Do not access Object.prototype method 'hasOwnProperty' from target object.","line":209,"column":17,"nodeType":"CallExpression","messageId":"prototypeBuildIn","endLine":209,"endColumn":31,"suggestions":[{"messageId":"callObjectPrototype","data":{"prop":"hasOwnProperty"},"fix":{"range":[5206,5225],"text":"Object.prototype.hasOwnProperty.call(obj, "},"desc":"Call Object.prototype.hasOwnProperty explicitly."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":210,"column":45,"nodeType":"MemberExpression","endLine":210,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":213,"column":22,"nodeType":"MemberExpression","endLine":213,"endColumn":30},{"ruleId":"unicorn/no-lonely-if","severity":2,"message":"Unexpected `if` as the only statement in a `if` block without `else`.","line":214,"column":13,"nodeType":"IfStatement","messageId":"no-lonely-if","endLine":216,"endColumn":14,"fix":{"range":[5340,5466],"text":"(typeof obj[key] === 'object' && checkObject(obj[key])) {\n              return true;\n            }"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":214,"column":29,"nodeType":"MemberExpression","endLine":214,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":243,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":303,"column":25,"nodeType":"MemberExpression","endLine":303,"endColumn":51},{"ruleId":"unicorn/catch-error-name","severity":2,"message":"The catch parameter `rejRes` should be named `error`.","line":322,"column":16,"nodeType":"Identifier","messageId":"catch-error-name","endLine":322,"endColumn":22,"fix":{"range":[8370,8739],"text":"error) {\n        const retryAfter = Math.round(error.msBeforeNext / 1000) || 60;\n        \n        res.setHeader('Retry-After', retryAfter);\n        res.setHeader('X-RateLimit-Limit', this.limiters[limiterName].points);\n        res.setHeader('X-RateLimit-Remaining', error.remainingPoints || 0);\n        res.setHeader('X-RateLimit-Reset', new Date(Date.now() + error"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":326,"column":44,"nodeType":"MemberExpression","endLine":326,"endColumn":70},{"ruleId":"unicorn/prefer-set-has","severity":2,"message":"`allowedMimeTypes` should be a `Set`, and use `allowedMimeTypes.has()` to check existence or non-existence.","line":358,"column":9,"nodeType":"Identifier","messageId":"error","endLine":358,"endColumn":25,"fix":{"range":[9375,10363],"text":"new Set([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'application/pdf',\n    'text/plain',\n    'text/csv'\n  ]);\n  \n  const maxFileSize = 10 * 1024 * 1024; // 10MB\n  \n  return (req, res, next) => {\n    if (!req.files || Object.keys(req.files).length === 0) {\n      return next();\n    }\n    \n    for (const fieldName in req.files) {\n      const files = Array.isArray(req.files[fieldName]) \n        ? req.files[fieldName] \n        : [req.files[fieldName]];\n      \n      for (const file of files) {\n        // Check file size\n        if (file.size > maxFileSize) {\n          return res.status(413).json({\n            type: 'https://api.dreamerai.io/errors/file-too-large',\n            title: 'File Too Large',\n            status: 413,\n            detail: `File ${file.name} exceeds the maximum size of ${maxFileSize / 1024 / 1024}MB`,\n            instance: req.originalUrl\n          });\n        }\n        \n        // Check MIME type\n        if (!allowedMimeTypes.has"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":376,"column":35,"nodeType":"MemberExpression","endLine":376,"endColumn":55},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":377,"column":11,"nodeType":"MemberExpression","endLine":377,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":378,"column":12,"nodeType":"MemberExpression","endLine":378,"endColumn":32},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":439,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":439,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11653,11702],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":464,"column":12,"nodeType":"MemberExpression","endLine":464,"endColumn":34},{"ruleId":"unicorn/prefer-set-has","severity":2,"message":"`deprecatedVersions` should be a `Set`, and use `deprecatedVersions.has()` to check existence or non-existence.","line":527,"column":9,"nodeType":"Identifier","messageId":"error","endLine":527,"endColumn":27,"fix":{"range":[14281,14440],"text":"new Set([]);\n  \n  return (req, res, next) => {\n    const version = req.params.version || req.headers['api-version'];\n    \n    if (version && deprecatedVersions.has"}}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":18,"fixableWarningCount":0,"source":"const helmet = require('helmet');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst csrf = require('csurf');\nconst crypto = require('crypto');\nconst { RateLimiterRedis } = require('rate-limiter-flexible');\nconst redis = require('ioredis');\nconst DOMPurify = require('isomorphic-dompurify');\n\n// Initialize Redis client\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD\n});\n\n/**\n * Comprehensive security headers configuration\n */\nconst securityHeaders = () => {\n  return helmet({\n    // Content Security Policy\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        scriptSrc: [\n          \"'self'\",\n          \"'nonce-{NONCE}'\", // Will be replaced dynamically\n          \"https://apis.google.com\",\n          \"https://www.google-analytics.com\"\n        ],\n        styleSrc: [\n          \"'self'\",\n          \"'unsafe-inline'\", // Consider replacing with nonces\n          \"https://fonts.googleapis.com\"\n        ],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n        connectSrc: [\n          \"'self'\",\n          \"https://api.dreamerai.io\",\n          \"wss://api.dreamerai.io\",\n          \"https://*.google-analytics.com\"\n        ],\n        mediaSrc: [\"'self'\", \"blob:\"],\n        objectSrc: [\"'none'\"],\n        childSrc: [\"'self'\"],\n        frameSrc: [\"'none'\"],\n        workerSrc: [\"'self'\", \"blob:\"],\n        frameAncestors: [\"'none'\"],\n        formAction: [\"'self'\"],\n        upgradeInsecureRequests: [],\n        blockAllMixedContent: [],\n        baseUri: [\"'self'\"],\n        reportUri: \"/api/v1/security/csp-report\"\n      },\n      reportOnly: false\n    },\n    \n    // Strict Transport Security\n    hsts: {\n      maxAge: 31536000,\n      includeSubDomains: true,\n      preload: true\n    },\n    \n    // Additional security headers\n    crossOriginEmbedderPolicy: true,\n    crossOriginOpenerPolicy: { policy: \"same-origin\" },\n    crossOriginResourcePolicy: { policy: \"same-origin\" },\n    dnsPrefetchControl: { allow: false },\n    frameguard: { action: 'deny' },\n    hidePoweredBy: true,\n    ieNoOpen: true,\n    noSniff: true,\n    originAgentCluster: true,\n    permittedCrossDomainPolicies: false,\n    referrerPolicy: { policy: \"strict-origin-when-cross-origin\" },\n    xssFilter: true\n  });\n};\n\n/**\n * CSP Nonce middleware for inline scripts\n */\nconst cspNonce = (req, res, next) => {\n  res.locals.nonce = crypto.randomBytes(16).toString('base64');\n  next();\n};\n\n/**\n * CSRF Protection Configuration\n */\nconst csrfProtection = csrf({\n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    maxAge: 3600000 // 1 hour\n  },\n  value: (req) => {\n    // Support multiple ways of sending CSRF token\n    return req.body._csrf || \n           req.query._csrf || \n           req.headers['x-csrf-token'] ||\n           req.headers['x-xsrf-token'];\n  }\n});\n\n/**\n * Advanced XSS Protection\n */\nconst xssProtection = () => {\n  return (req, res, next) => {\n    // Clean body\n    if (req.body) {\n      req.body = cleanObject(req.body);\n    }\n    \n    // Clean query parameters\n    if (req.query) {\n      req.query = cleanObject(req.query);\n    }\n    \n    // Clean params\n    if (req.params) {\n      req.params = cleanObject(req.params);\n    }\n    \n    next();\n  };\n};\n\nfunction cleanObject(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return cleanValue(obj);\n  }\n  \n  if (Array.isArray(obj)) {\n    return obj.map(item => cleanObject(item));\n  }\n  \n  const cleaned = {};\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      // Clean the key itself\n      const cleanKey = cleanValue(key);\n      cleaned[cleanKey] = cleanObject(obj[key]);\n    }\n  }\n  \n  return cleaned;\n}\n\nfunction cleanValue(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  \n  // Remove null bytes\n  value = value.replace(/\\0/g, '');\n  \n  // Basic XSS cleaning\n  value = value\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n  \n  // Use DOMPurify for HTML content\n  if (value.includes('<') || value.includes('>')) {\n    value = DOMPurify.sanitize(value, {\n      ALLOWED_TAGS: [],\n      ALLOWED_ATTR: []\n    });\n  }\n  \n  return value;\n}\n\n/**\n * SQL Injection Prevention\n */\nconst sqlInjectionProtection = () => {\n  return (req, res, next) => {\n    const suspicious = [\n      /(\\b(union|select|insert|update|delete|drop|create|alter|exec|execute|script|javascript|vbscript|onload|onerror|onclick)\\b)/gi,\n      /(-{2}|\\/\\*|\\*\\/|;|\\||\\\\)/g,\n      /(xp_|sp_|exec|execute|dbms_|utl_|pragma)/gi\n    ];\n    \n    const checkValue = (value) => {\n      if (typeof value !== 'string') return false;\n      \n      for (const pattern of suspicious) {\n        if (pattern.test(value)) {\n          return true;\n        }\n      }\n      return false;\n    };\n    \n    const checkObject = (obj) => {\n      if (!obj || typeof obj !== 'object') return false;\n      \n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          if (checkValue(key) || checkValue(obj[key])) {\n            return true;\n          }\n          if (typeof obj[key] === 'object') {\n            if (checkObject(obj[key])) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    };\n    \n    // Check all input sources\n    if (checkObject(req.body) || checkObject(req.query) || checkObject(req.params)) {\n      return res.status(400).json({\n        type: 'https://api.dreamerai.io/errors/invalid-input',\n        title: 'Invalid Input Detected',\n        status: 400,\n        detail: 'The request contains potentially malicious input',\n        instance: req.originalUrl\n      });\n    }\n    \n    next();\n  };\n};\n\n/**\n * NoSQL Injection Prevention\n */\nconst noSQLInjectionProtection = mongoSanitize({\n  replaceWith: '_',\n  onSanitize: ({ req, key }) => {\n    console.warn(`NoSQL injection attempt detected and sanitized: ${key}`);\n  }\n});\n\n/**\n * HTTP Parameter Pollution Prevention\n */\nconst parameterPollutionProtection = hpp({\n  whitelist: ['sort', 'filter', 'page', 'limit'] // Allow specific params to have arrays\n});\n\n/**\n * Advanced Rate Limiting\n */\nclass RateLimiter {\n  constructor() {\n    // Different rate limiters for different operations\n    this.limiters = {\n      // General API rate limit\n      api: new RateLimiterRedis({\n        storeClient: redisClient,\n        keyPrefix: 'rl:api',\n        points: 100, // requests\n        duration: 60, // per minute\n        blockDuration: 60 * 5 // block for 5 minutes\n      }),\n      \n      // Strict limit for authentication\n      auth: new RateLimiterRedis({\n        storeClient: redisClient,\n        keyPrefix: 'rl:auth',\n        points: 5,\n        duration: 60 * 15, // 15 minutes\n        blockDuration: 60 * 30 // block for 30 minutes\n      }),\n      \n      // AI endpoints (expensive operations)\n      ai: new RateLimiterRedis({\n        storeClient: redisClient,\n        keyPrefix: 'rl:ai',\n        points: 10,\n        duration: 60 * 60, // per hour\n        blockDuration: 60 * 60 // block for 1 hour\n      }),\n      \n      // File upload limit\n      upload: new RateLimiterRedis({\n        storeClient: redisClient,\n        keyPrefix: 'rl:upload',\n        points: 5,\n        duration: 60 * 60, // per hour\n        blockDuration: 60 * 60 * 2 // block for 2 hours\n      })\n    };\n  }\n  \n  middleware(limiterName) {\n    return async (req, res, next) => {\n      try {\n        const limiter = this.limiters[limiterName];\n        if (!limiter) {\n          return next();\n        }\n        \n        // Use IP + user ID for authenticated requests\n        const key = req.user ? `${req.ip}:${req.user.id}` : req.ip;\n        \n        await limiter.consume(key);\n        \n        // Add rate limit headers\n        const rateLimitInfo = await limiter.get(key);\n        if (rateLimitInfo) {\n          res.setHeader('X-RateLimit-Limit', limiter.points);\n          res.setHeader('X-RateLimit-Remaining', rateLimitInfo.remainingPoints);\n          res.setHeader('X-RateLimit-Reset', new Date(Date.now() + rateLimitInfo.msBeforeNext).toISOString());\n        }\n        \n        next();\n      } catch (rejRes) {\n        const retryAfter = Math.round(rejRes.msBeforeNext / 1000) || 60;\n        \n        res.setHeader('Retry-After', retryAfter);\n        res.setHeader('X-RateLimit-Limit', this.limiters[limiterName].points);\n        res.setHeader('X-RateLimit-Remaining', rejRes.remainingPoints || 0);\n        res.setHeader('X-RateLimit-Reset', new Date(Date.now() + rejRes.msBeforeNext).toISOString());\n        \n        res.status(429).json({\n          type: 'https://api.dreamerai.io/errors/rate-limit',\n          title: 'Rate Limit Exceeded',\n          status: 429,\n          detail: `You have exceeded the rate limit. Please try again in ${retryAfter} seconds.`,\n          instance: req.originalUrl,\n          retryAfter\n        });\n      }\n    };\n  }\n}\n\nconst rateLimiter = new RateLimiter();\n\n/**\n * Request Size Limiting\n */\nconst requestSizeLimit = {\n  json: '10mb',\n  urlencoded: '10mb',\n  raw: '20mb'\n};\n\n/**\n * File Upload Security\n */\nconst fileUploadSecurity = () => {\n  const allowedMimeTypes = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'application/pdf',\n    'text/plain',\n    'text/csv'\n  ];\n  \n  const maxFileSize = 10 * 1024 * 1024; // 10MB\n  \n  return (req, res, next) => {\n    if (!req.files || Object.keys(req.files).length === 0) {\n      return next();\n    }\n    \n    for (const fieldName in req.files) {\n      const files = Array.isArray(req.files[fieldName]) \n        ? req.files[fieldName] \n        : [req.files[fieldName]];\n      \n      for (const file of files) {\n        // Check file size\n        if (file.size > maxFileSize) {\n          return res.status(413).json({\n            type: 'https://api.dreamerai.io/errors/file-too-large',\n            title: 'File Too Large',\n            status: 413,\n            detail: `File ${file.name} exceeds the maximum size of ${maxFileSize / 1024 / 1024}MB`,\n            instance: req.originalUrl\n          });\n        }\n        \n        // Check MIME type\n        if (!allowedMimeTypes.includes(file.mimetype)) {\n          return res.status(415).json({\n            type: 'https://api.dreamerai.io/errors/unsupported-file-type',\n            title: 'Unsupported File Type',\n            status: 415,\n            detail: `File type ${file.mimetype} is not allowed`,\n            instance: req.originalUrl\n          });\n        }\n        \n        // Additional file content validation could be added here\n        // For example, checking magic bytes to ensure file type matches extension\n      }\n    }\n    \n    next();\n  };\n};\n\n/**\n * Security Event Logging\n */\nclass SecurityLogger {\n  constructor() {\n    this.events = {\n      AUTH_FAILURE: 'authentication_failure',\n      AUTH_SUCCESS: 'authentication_success',\n      SUSPICIOUS_ACTIVITY: 'suspicious_activity',\n      RATE_LIMIT: 'rate_limit_exceeded',\n      INJECTION_ATTEMPT: 'injection_attempt',\n      XSS_ATTEMPT: 'xss_attempt',\n      CSRF_FAILURE: 'csrf_failure',\n      UNAUTHORIZED_ACCESS: 'unauthorized_access',\n      DATA_BREACH_ATTEMPT: 'data_breach_attempt'\n    };\n  }\n  \n  async log(eventType, details) {\n    const event = {\n      timestamp: new Date().toISOString(),\n      type: eventType,\n      details,\n      severity: this.getSeverity(eventType)\n    };\n    \n    // Log to console (replace with proper logging service)\n    console.log('[SECURITY]', JSON.stringify(event));\n    \n    // Store in Redis for analysis\n    const key = `security:events:${eventType}:${Date.now()}`;\n    await redisClient.setex(key, 86400 * 7, JSON.stringify(event)); // Keep for 7 days\n    \n    // Trigger alerts for high-severity events\n    if (event.severity === 'high' || event.severity === 'critical') {\n      this.triggerAlert(event);\n    }\n  }\n  \n  getSeverity(eventType) {\n    const severityMap = {\n      [this.events.AUTH_SUCCESS]: 'info',\n      [this.events.AUTH_FAILURE]: 'medium',\n      [this.events.RATE_LIMIT]: 'low',\n      [this.events.SUSPICIOUS_ACTIVITY]: 'high',\n      [this.events.INJECTION_ATTEMPT]: 'critical',\n      [this.events.XSS_ATTEMPT]: 'high',\n      [this.events.CSRF_FAILURE]: 'high',\n      [this.events.UNAUTHORIZED_ACCESS]: 'high',\n      [this.events.DATA_BREACH_ATTEMPT]: 'critical'\n    };\n    \n    return severityMap[eventType] || 'medium';\n  }\n  \n  triggerAlert(event) {\n    // Implement alert mechanism (email, Slack, PagerDuty, etc.)\n    console.error('[SECURITY ALERT]', event);\n  }\n}\n\nconst securityLogger = new SecurityLogger();\n\n/**\n * IP-based Access Control\n */\nconst ipAccessControl = () => {\n  // In production, load from database or environment\n  const whitelist = process.env.IP_WHITELIST?.split(',') || [];\n  const blacklist = process.env.IP_BLACKLIST?.split(',') || [];\n  \n  return (req, res, next) => {\n    const clientIp = req.ip || req.connection.remoteAddress;\n    \n    // Check blacklist first\n    if (blacklist.includes(clientIp)) {\n      securityLogger.log(securityLogger.events.UNAUTHORIZED_ACCESS, {\n        ip: clientIp,\n        reason: 'blacklisted_ip'\n      });\n      \n      return res.status(403).json({\n        type: 'https://api.dreamerai.io/errors/access-denied',\n        title: 'Access Denied',\n        status: 403,\n        detail: 'Your IP address has been blocked',\n        instance: req.originalUrl\n      });\n    }\n    \n    // If whitelist is configured, only allow whitelisted IPs\n    if (whitelist.length > 0 && !whitelist.includes(clientIp)) {\n      securityLogger.log(securityLogger.events.UNAUTHORIZED_ACCESS, {\n        ip: clientIp,\n        reason: 'not_whitelisted'\n      });\n      \n      return res.status(403).json({\n        type: 'https://api.dreamerai.io/errors/access-denied',\n        title: 'Access Denied',\n        status: 403,\n        detail: 'Your IP address is not authorized',\n        instance: req.originalUrl\n      });\n    }\n    \n    next();\n  };\n};\n\n/**\n * API Versioning Security\n */\nconst apiVersioning = () => {\n  const supportedVersions = ['v1', 'v2'];\n  const deprecatedVersions = [];\n  \n  return (req, res, next) => {\n    const version = req.params.version || req.headers['api-version'];\n    \n    if (version && deprecatedVersions.includes(version)) {\n      return res.status(410).json({\n        type: 'https://api.dreamerai.io/errors/version-deprecated',\n        title: 'API Version Deprecated',\n        status: 410,\n        detail: `API version ${version} has been deprecated`,\n        instance: req.originalUrl\n      });\n    }\n    \n    if (version && !supportedVersions.includes(version)) {\n      return res.status(400).json({\n        type: 'https://api.dreamerai.io/errors/unsupported-version',\n        title: 'Unsupported API Version',\n        status: 400,\n        detail: `API version ${version} is not supported`,\n        instance: req.originalUrl,\n        supportedVersions\n      });\n    }\n    \n    next();\n  };\n};\n\nmodule.exports = {\n  securityHeaders,\n  cspNonce,\n  csrfProtection,\n  xssProtection,\n  sqlInjectionProtection,\n  noSQLInjectionProtection,\n  parameterPollutionProtection,\n  rateLimiter,\n  requestSizeLimit,\n  fileUploadSecurity,\n  securityLogger,\n  ipAccessControl,\n  apiVersioning\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/middleware/validation.js","messages":[{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":20,"column":29,"nodeType":"CallExpression","messageId":"substr","endLine":20,"endColumn":68,"fix":{"range":[583,594],"text":"slice(2, 11"}},{"ruleId":"unicorn/throw-new-error","severity":2,"message":"Use `new` when creating an error.","line":152,"column":19,"nodeType":"CallExpression","messageId":"throw-new-error","endLine":156,"endColumn":6,"fix":{"range":[3793,3793],"text":"new "}},{"ruleId":"promise/no-callback-in-promise","severity":1,"message":"Avoid calling back inside of a promise.","line":167,"column":45,"nodeType":"Identifier","messageId":"callback","endLine":167,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'next' is defined but never used. Allowed unused args must match /^_/u.","line":173,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":193,"column":16,"nodeType":"MemberExpression","endLine":193,"endColumn":31},{"ruleId":"unicorn/throw-new-error","severity":2,"message":"Use `new` when creating an error.","line":197,"column":19,"nodeType":"CallExpression","messageId":"throw-new-error","endLine":201,"endColumn":6,"fix":{"range":[4798,4798],"text":"new "}},{"ruleId":"unicorn/throw-new-error","severity":2,"message":"Use `new` when creating an error.","line":218,"column":17,"nodeType":"CallExpression","messageId":"throw-new-error","endLine":223,"endColumn":4,"fix":{"range":[5304,5304],"text":"new "}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":240,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":240,"endColumn":6},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substr()`.","line":240,"column":29,"nodeType":"CallExpression","messageId":"substr","endLine":240,"endColumn":68,"fix":{"range":[5834,5845],"text":"slice(2, 11"}},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":265,"column":28,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":265,"endColumn":35,"fix":{"range":[6306,6457],"text":"for (const key of Object.keys(req.query)) {\n      if (typeof req.query[key] === 'string') {\n        req.query[key] = req.query[key].trim();\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":266,"column":18,"nodeType":"MemberExpression","endLine":266,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":267,"column":9,"nodeType":"MemberExpression","endLine":267,"endColumn":23},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":267,"column":9,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":267,"endColumn":12},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":267,"column":26,"nodeType":"MemberExpression","endLine":267,"endColumn":40},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":275,"column":24,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":275,"endColumn":31,"fix":{"range":[6576,6819],"text":"for (const key of Object.keys(obj)) {\n        if (typeof obj[key] === 'string') {\n          obj[key] = obj[key].trim();\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n          sanitizeObject(obj[key]);\n        }\n      }"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":276,"column":20,"nodeType":"MemberExpression","endLine":276,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":277,"column":11,"nodeType":"MemberExpression","endLine":277,"endColumn":19},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'obj'.","line":277,"column":11,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":277,"endColumn":14},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":277,"column":22,"nodeType":"MemberExpression","endLine":277,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":278,"column":27,"nodeType":"MemberExpression","endLine":278,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":278,"column":52,"nodeType":"MemberExpression","endLine":278,"endColumn":60},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":279,"column":26,"nodeType":"MemberExpression","endLine":279,"endColumn":34},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":294,"column":30,"nodeType":"Identifier","messageId":"error","endLine":294,"endColumn":38,"fix":{"range":[7039,7047],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":295,"column":50,"nodeType":"Identifier","messageId":"error","endLine":295,"endColumn":58,"fix":{"range":[7120,7128],"text":"Number.parseInt"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":298,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":298,"endColumn":8},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'res'.","line":305,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":305,"endColumn":8}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":9,"fixableWarningCount":0,"source":"const { validationResult } = require('express-validator');\n\n/**\n * Standard error response formatter following RFC 7807\n */\nclass APIError extends Error {\n  constructor(type, title, status, detail, instance = null, errors = null) {\n    super(detail);\n    this.type = type;\n    this.title = title;\n    this.status = status;\n    this.detail = detail;\n    this.instance = instance;\n    this.errors = errors;\n    this.timestamp = new Date().toISOString();\n    this.requestId = this.generateRequestId();\n  }\n\n  generateRequestId() {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  toJSON() {\n    const response = {\n      type: this.type,\n      title: this.title,\n      status: this.status,\n      detail: this.detail,\n      timestamp: this.timestamp,\n      request_id: this.requestId\n    };\n\n    if (this.instance) {\n      response.instance = this.instance;\n    }\n\n    if (this.errors) {\n      response.errors = this.errors;\n    }\n\n    return response;\n  }\n}\n\n/**\n * Common API errors\n */\nconst APIErrors = {\n  ValidationError: (detail, errors, instance) => new APIError(\n    'https://api.dreamerai.io/errors/validation-error',\n    'Validation Error',\n    400,\n    detail,\n    instance,\n    errors\n  ),\n\n  NotFound: (resource, instance) => new APIError(\n    'https://api.dreamerai.io/errors/not-found',\n    'Resource Not Found',\n    404,\n    `The requested ${resource} was not found`,\n    instance\n  ),\n\n  Unauthorized: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/unauthorized',\n    'Unauthorized',\n    401,\n    detail || 'Authentication is required to access this resource',\n    instance\n  ),\n\n  Forbidden: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/forbidden',\n    'Forbidden',\n    403,\n    detail || 'You do not have permission to access this resource',\n    instance\n  ),\n\n  Conflict: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/conflict',\n    'Conflict',\n    409,\n    detail,\n    instance\n  ),\n\n  RateLimit: (retryAfter, instance) => new APIError(\n    'https://api.dreamerai.io/errors/rate-limit',\n    'Rate Limit Exceeded',\n    429,\n    `You have exceeded the rate limit. Please try again in ${retryAfter} seconds`,\n    instance\n  ),\n\n  ServerError: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/server-error',\n    'Internal Server Error',\n    500,\n    detail || 'An unexpected error occurred. Please try again later.',\n    instance\n  ),\n\n  BadRequest: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/bad-request',\n    'Bad Request',\n    400,\n    detail,\n    instance\n  ),\n\n  MethodNotAllowed: (method, allowedMethods, instance) => new APIError(\n    'https://api.dreamerai.io/errors/method-not-allowed',\n    'Method Not Allowed',\n    405,\n    `The ${method} method is not allowed for this resource. Allowed methods: ${allowedMethods.join(', ')}`,\n    instance\n  ),\n\n  PayloadTooLarge: (maxSize, instance) => new APIError(\n    'https://api.dreamerai.io/errors/payload-too-large',\n    'Payload Too Large',\n    413,\n    `Request payload exceeds the maximum allowed size of ${maxSize}`,\n    instance\n  ),\n\n  ServiceUnavailable: (detail, instance) => new APIError(\n    'https://api.dreamerai.io/errors/service-unavailable',\n    'Service Unavailable',\n    503,\n    detail || 'The service is temporarily unavailable. Please try again later.',\n    instance\n  )\n};\n\n/**\n * Handle validation errors from express-validator\n */\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    const formattedErrors = errors.array().map(err => ({\n      field: err.param,\n      message: err.msg,\n      code: 'VALIDATION_ERROR',\n      value: err.value\n    }));\n\n    const error = APIErrors.ValidationError(\n      'Invalid input data provided',\n      formattedErrors,\n      req.originalUrl\n    );\n\n    return res.status(error.status).json(error.toJSON());\n  }\n  next();\n};\n\n/**\n * Async error handler wrapper\n */\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n/**\n * Global error handler middleware\n */\nconst errorHandler = (err, req, res, next) => {\n  // Log error for monitoring\n  console.error('Error:', {\n    message: err.message,\n    stack: err.stack,\n    url: req.originalUrl,\n    method: req.method,\n    ip: req.ip,\n    user: req.user?.id\n  });\n\n  // Handle known API errors\n  if (err instanceof APIError) {\n    return res.status(err.status).json(err.toJSON());\n  }\n\n  // Handle Mongoose validation errors\n  if (err.name === 'ValidationError') {\n    const errors = Object.keys(err.errors).map(key => ({\n      field: key,\n      message: err.errors[key].message,\n      code: 'VALIDATION_ERROR'\n    }));\n\n    const error = APIErrors.ValidationError(\n      'Validation failed',\n      errors,\n      req.originalUrl\n    );\n\n    return res.status(error.status).json(error.toJSON());\n  }\n\n  // Handle duplicate key errors\n  if (err.code === 11000) {\n    const field = Object.keys(err.keyPattern)[0];\n    const error = APIErrors.Conflict(\n      `A resource with this ${field} already exists`,\n      req.originalUrl\n    );\n\n    return res.status(error.status).json(error.toJSON());\n  }\n\n  // Default to 500 server error\n  const error = APIErrors.ServerError(\n    process.env.NODE_ENV === 'production' \n      ? 'An unexpected error occurred'\n      : err.message,\n    req.originalUrl\n  );\n\n  res.status(error.status).json(error.toJSON());\n};\n\n/**\n * Not found handler\n */\nconst notFoundHandler = (req, res) => {\n  const error = APIErrors.NotFound('endpoint', req.originalUrl);\n  res.status(error.status).json(error.toJSON());\n};\n\n/**\n * Request ID middleware\n */\nconst requestIdMiddleware = (req, res, next) => {\n  req.id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  res.setHeader('X-Request-ID', req.id);\n  next();\n};\n\n/**\n * Response time middleware\n */\nconst responseTimeMiddleware = (req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    res.setHeader('X-Response-Time', `${duration}ms`);\n  });\n  \n  next();\n};\n\n/**\n * Sanitize input middleware\n */\nconst sanitizeInput = (req, res, next) => {\n  // Sanitize query parameters\n  if (req.query) {\n    Object.keys(req.query).forEach(key => {\n      if (typeof req.query[key] === 'string') {\n        req.query[key] = req.query[key].trim();\n      }\n    });\n  }\n\n  // Sanitize body\n  if (req.body && typeof req.body === 'object') {\n    const sanitizeObject = (obj) => {\n      Object.keys(obj).forEach(key => {\n        if (typeof obj[key] === 'string') {\n          obj[key] = obj[key].trim();\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n          sanitizeObject(obj[key]);\n        }\n      });\n    };\n    sanitizeObject(req.body);\n  }\n\n  next();\n};\n\n/**\n * Pagination middleware\n */\nconst paginationMiddleware = (defaultLimit = 20, maxLimit = 100) => {\n  return (req, res, next) => {\n    const page = Math.max(1, parseInt(req.query.page) || 1);\n    const limit = Math.min(maxLimit, Math.max(1, parseInt(req.query.limit) || defaultLimit));\n    const offset = (page - 1) * limit;\n\n    req.pagination = {\n      page,\n      limit,\n      offset\n    };\n\n    // Helper function to generate pagination response\n    res.paginate = (total, data) => {\n      const totalPages = Math.ceil(total / limit);\n      const hasMore = page < totalPages;\n\n      const baseUrl = `${req.protocol}://${req.get('host')}${req.baseUrl}${req.path}`;\n      const queryParams = { ...req.query, limit };\n\n      const links = {\n        first: `${baseUrl}?${new URLSearchParams({ ...queryParams, page: 1 })}`,\n        last: `${baseUrl}?${new URLSearchParams({ ...queryParams, page: totalPages })}`\n      };\n\n      if (page > 1) {\n        links.prev = `${baseUrl}?${new URLSearchParams({ ...queryParams, page: page - 1 })}`;\n      }\n\n      if (hasMore) {\n        links.next = `${baseUrl}?${new URLSearchParams({ ...queryParams, page: page + 1 })}`;\n      }\n\n      return {\n        success: true,\n        data,\n        pagination: {\n          page,\n          per_page: limit,\n          total,\n          total_pages: totalPages,\n          has_more: hasMore\n        },\n        links,\n        meta: {\n          timestamp: new Date().toISOString(),\n          version: '1.0',\n          request_id: req.id\n        }\n      };\n    };\n\n    next();\n  };\n};\n\n/**\n * CORS options for specific origins\n */\nconst corsOptions = {\n  origin: (origin, callback) => {\n    const allowedOrigins = (process.env.ALLOWED_ORIGINS || '').split(',').filter(Boolean);\n    \n    // Allow requests with no origin (mobile apps, Postman, etc.)\n    if (!origin) return callback(null, true);\n    \n    if (allowedOrigins.includes(origin) || process.env.NODE_ENV === 'development') {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-API-Key', 'X-Request-ID'],\n  exposedHeaders: ['X-Request-ID', 'X-Response-Time', 'X-RateLimit-Limit', 'X-RateLimit-Remaining'],\n  maxAge: 86400 // 24 hours\n};\n\nmodule.exports = {\n  APIError,\n  APIErrors,\n  handleValidationErrors,\n  asyncHandler,\n  errorHandler,\n  notFoundHandler,\n  requestIdMiddleware,\n  responseTimeMiddleware,\n  sanitizeInput,\n  paginationMiddleware,\n  corsOptions\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/admin.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":29,"nodeType":"CallExpression","endLine":4,"endColumn":58,"fix":{"range":[175,175],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":5,"column":37,"nodeType":"CallExpression","endLine":5,"endColumn":65,"fix":{"range":[69,242],"text":"const { query, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\n"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":105,"column":18,"nodeType":"Identifier","messageId":"error","endLine":105,"endColumn":26,"fix":{"range":[4128,4136],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":106,"column":19,"nodeType":"Identifier","messageId":"error","endLine":106,"endColumn":27,"fix":{"range":[4177,4185],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":137,"column":19,"nodeType":"Identifier","messageId":"error","endLine":137,"endColumn":27,"fix":{"range":[5058,5066],"text":"Number.parseInt"}},{"ruleId":"no-shadow","severity":2,"message":"'query' is already declared in the upper scope on line 5 column 9.","line":141,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":141,"endColumn":16}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { query, validationResult } = require('express-validator');\n\n// Get system statistics\nrouter.get('/stats', [auth, authorize('admin', 'super_admin')], async (req, res) => {\n  try {\n    const [\n      userStats,\n      leadStats,\n      bookingStats,\n      contentStats,\n      systemStats\n    ] = await Promise.all([\n      // User statistics\n      pool.query(`\n        SELECT \n          COUNT(*) as total_users,\n          COUNT(CASE WHEN role = 'visitor' THEN 1 END) as visitors,\n          COUNT(CASE WHEN role = 'client' THEN 1 END) as clients,\n          COUNT(CASE WHEN role = 'admin' THEN 1 END) as admins,\n          COUNT(CASE WHEN email_verified = true THEN 1 END) as verified_users,\n          COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as new_today,\n          COUNT(CASE WHEN last_login > NOW() - INTERVAL '24 hours' THEN 1 END) as active_today\n        FROM users\n      `),\n\n      // Lead statistics\n      pool.query(`\n        SELECT \n          COUNT(*) as total_leads,\n          COUNT(CASE WHEN status = 'new' THEN 1 END) as new_leads,\n          COUNT(CASE WHEN status = 'contacted' THEN 1 END) as contacted,\n          COUNT(CASE WHEN status = 'qualified' THEN 1 END) as qualified,\n          COUNT(CASE WHEN status = 'converted' THEN 1 END) as converted,\n          COUNT(CASE WHEN created_at > NOW() - INTERVAL '7 days' THEN 1 END) as leads_this_week\n        FROM leads\n      `),\n\n      // Booking statistics\n      pool.query(`\n        SELECT \n          COUNT(*) as total_bookings,\n          COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,\n          COUNT(CASE WHEN status = 'confirmed' THEN 1 END) as confirmed,\n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,\n          COUNT(CASE WHEN scheduled_at > NOW() THEN 1 END) as upcoming,\n          COUNT(CASE WHEN scheduled_at BETWEEN NOW() AND NOW() + INTERVAL '7 days' THEN 1 END) as next_week\n        FROM bookings\n      `),\n\n      // Content statistics\n      pool.query(`\n        SELECT \n          (SELECT COUNT(*) FROM services WHERE is_active = true) as active_services,\n          (SELECT COUNT(*) FROM case_studies WHERE status = 'published') as published_case_studies,\n          (SELECT COUNT(*) FROM testimonials WHERE is_active = true) as active_testimonials,\n          (SELECT COUNT(*) FROM chat_conversations) as total_conversations,\n          (SELECT COUNT(*) FROM chat_messages) as total_messages\n      `),\n\n      // System health\n      pool.query(`\n        SELECT \n          (SELECT COUNT(*) FROM analytics_events WHERE created_at > NOW() - INTERVAL '1 hour') as events_last_hour,\n          (SELECT COUNT(DISTINCT session_id) FROM analytics_events WHERE created_at > NOW() - INTERVAL '1 hour') as sessions_last_hour,\n          (SELECT pg_database_size(current_database())) as database_size_bytes,\n          (SELECT COUNT(*) FROM pg_stat_activity WHERE state = 'active') as active_connections\n      `)\n    ]);\n\n    res.json({\n      users: userStats.rows[0],\n      leads: leadStats.rows[0],\n      bookings: bookingStats.rows[0],\n      content: contentStats.rows[0],\n      system: {\n        ...systemStats.rows[0],\n        database_size_mb: Math.round(systemStats.rows[0].database_size_bytes / (1024 * 1024)),\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('Stats error:', error);\n    res.status(500).json({ error: 'Unable to retrieve system statistics' });\n  }\n});\n\n// Get audit logs\nrouter.get('/audit-logs', [auth, authorize('admin', 'super_admin')], [\n  query('page').optional().isInt({ min: 1 }),\n  query('limit').optional().isInt({ min: 1, max: 100 }),\n  query('userId').optional().isUUID(),\n  query('entityType').optional().isString(),\n  query('action').optional().isString()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 50;\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    const conditions = [];\n    const values = [];\n    let paramCount = 1;\n\n    if (req.query.userId) {\n      conditions.push(`user_id = $${paramCount}`);\n      values.push(req.query.userId);\n      paramCount++;\n    }\n\n    if (req.query.entityType) {\n      conditions.push(`entity_type = $${paramCount}`);\n      values.push(req.query.entityType);\n      paramCount++;\n    }\n\n    if (req.query.action) {\n      conditions.push(`action = $${paramCount}`);\n      values.push(req.query.action);\n      paramCount++;\n    }\n\n    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\n\n    // Get total count\n    const countQuery = `SELECT COUNT(*) FROM audit_logs ${whereClause}`;\n    const countResult = await pool.query(countQuery, values);\n    const total = parseInt(countResult.rows[0].count);\n\n    // Get logs\n    values.push(limit, offset);\n    const query = `\n      SELECT \n        al.*,\n        u.email as user_email,\n        u.first_name || ' ' || u.last_name as user_name\n      FROM audit_logs al\n      LEFT JOIN users u ON al.user_id = u.id\n      ${whereClause}\n      ORDER BY al.created_at DESC\n      LIMIT $${paramCount} OFFSET $${paramCount + 1}\n    `;\n\n    const result = await pool.query(query, values);\n\n    res.json({\n      data: result.rows,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('Audit logs error:', error);\n    res.status(500).json({ error: 'Unable to retrieve audit logs' });\n  }\n});\n\n// Get system health\nrouter.get('/system-health', [auth, authorize('admin', 'super_admin')], async (req, res) => {\n  try {\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {}\n    };\n\n    // Check database\n    try {\n      await pool.query('SELECT 1');\n      health.services.database = { status: 'healthy', message: 'Connected' };\n    } catch (error) {\n      health.services.database = { status: 'unhealthy', message: error.message };\n      health.status = 'degraded';\n    }\n\n    // Check Redis (if configured)\n    if (process.env.REDIS_URL) {\n      try {\n        const redis = require('../config/redis');\n        await redis.ping();\n        health.services.redis = { status: 'healthy', message: 'Connected' };\n      } catch (error) {\n        health.services.redis = { status: 'unhealthy', message: error.message };\n        health.status = 'degraded';\n      }\n    }\n\n    // Check AI services\n    health.services.ai = {\n      openai: AI_PROVIDERS.openai.apiKey ? 'configured' : 'not configured',\n      anthropic: AI_PROVIDERS.anthropic.apiKey ? 'configured' : 'not configured'\n    };\n\n    // System metrics\n    const systemMetrics = await pool.query(`\n      SELECT \n        (SELECT COUNT(*) FROM pg_stat_activity) as db_connections,\n        (SELECT COUNT(*) FROM pg_stat_activity WHERE state = 'active') as active_queries,\n        pg_database_size(current_database()) as database_size\n    `);\n\n    health.metrics = {\n      ...systemMetrics.rows[0],\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      node_version: process.version\n    };\n\n    res.json(health);\n  } catch (error) {\n    console.error('System health error:', error);\n    res.status(500).json({ \n      status: 'error',\n      error: 'Unable to check system health',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Backup database (super admin only)\nrouter.post('/backup', [auth, authorize('super_admin')], async (req, res) => {\n  try {\n    // This would typically trigger a backup process\n    // For now, just log the request\n    await pool.query(\n      `INSERT INTO audit_logs (id, user_id, action, entity_type, details)\n       VALUES (gen_random_uuid(), $1, 'backup_initiated', 'system', $2)`,\n      [req.user.id, JSON.stringify({ timestamp: new Date().toISOString() })]\n    );\n\n    res.json({\n      success: true,\n      message: 'Database backup initiated',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Backup error:', error);\n    res.status(500).json({ error: 'Unable to initiate backup' });\n  }\n});\n\n// Clear cache (admin only)\nrouter.post('/clear-cache', [auth, authorize('admin', 'super_admin')], async (req, res) => {\n  try {\n    // Clear Redis cache if available\n    if (process.env.REDIS_URL) {\n      const redis = require('../config/redis');\n      await redis.flushAll();\n    }\n\n    // Log the action\n    await pool.query(\n      `INSERT INTO audit_logs (id, user_id, action, entity_type, details)\n       VALUES (gen_random_uuid(), $1, 'cache_cleared', 'system', $2)`,\n      [req.user.id, JSON.stringify({ timestamp: new Date().toISOString() })]\n    );\n\n    res.json({\n      success: true,\n      message: 'Cache cleared successfully',\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Clear cache error:', error);\n    res.status(500).json({ error: 'Unable to clear cache' });\n  }\n});\n\n// AI provider reference for health check\nconst AI_PROVIDERS = {\n  openai: { apiKey: process.env.OPENAI_API_KEY },\n  anthropic: { apiKey: process.env.ANTHROPIC_API_KEY }\n};\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/analytics.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":29,"nodeType":"CallExpression","endLine":4,"endColumn":58,"fix":{"range":[175,175],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":5,"column":43,"nodeType":"CallExpression","endLine":5,"endColumn":71,"fix":{"range":[69,248],"text":"const { body, query, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\n"}},{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur before import of `../config/database`","line":6,"column":24,"nodeType":"CallExpression","endLine":6,"endColumn":39,"fix":{"range":[69,288],"text":"const { v4: uuidv4 } = require('uuid');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, validationResult } = require('express-validator');\n"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, validationResult } = require('express-validator');\nconst { v4: uuidv4 } = require('uuid');\n\n// Track analytics event\nrouter.post('/events', [\n  body('eventType').notEmpty().trim(),\n  body('pageUrl').optional().isURL({ require_protocol: false }),\n  body('properties').optional().isObject()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { eventType, pageUrl, properties } = req.body;\n    const userId = req.user?.id || null;\n    const sessionId = req.session?.id || req.headers['x-session-id'] || null;\n\n    await pool.query(\n      `INSERT INTO analytics_events \n       (id, event_type, user_id, session_id, page_url, properties, \n        user_agent, ip_address, created_at)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())`,\n      [\n        uuidv4(),\n        eventType,\n        userId,\n        sessionId,\n        pageUrl,\n        JSON.stringify(properties || {}),\n        req.headers['user-agent'],\n        req.ip\n      ]\n    );\n\n    res.json({ success: true, message: 'Event tracked successfully' });\n  } catch (error) {\n    console.error('Track event error:', error);\n    res.status(500).json({ error: 'Unable to track event' });\n  }\n});\n\n// Get analytics dashboard (admin only)\nrouter.get('/dashboard', [auth, authorize('admin', 'super_admin')], async (req, res) => {\n  try {\n    const [\n      userStats,\n      eventStats,\n      conversionStats,\n      revenueStats\n    ] = await Promise.all([\n      // User statistics\n      pool.query(`\n        SELECT \n          COUNT(DISTINCT CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN id END) as new_users_today,\n          COUNT(DISTINCT CASE WHEN created_at > NOW() - INTERVAL '7 days' THEN id END) as new_users_week,\n          COUNT(DISTINCT CASE WHEN created_at > NOW() - INTERVAL '30 days' THEN id END) as new_users_month,\n          COUNT(*) as total_users,\n          COUNT(CASE WHEN email_verified = true THEN 1 END) as verified_users\n        FROM users\n      `),\n      \n      // Event statistics\n      pool.query(`\n        SELECT \n          event_type,\n          COUNT(*) as count,\n          COUNT(DISTINCT user_id) as unique_users\n        FROM analytics_events\n        WHERE created_at > NOW() - INTERVAL '30 days'\n        GROUP BY event_type\n        ORDER BY count DESC\n        LIMIT 10\n      `),\n      \n      // Conversion statistics\n      pool.query(`\n        SELECT \n          COUNT(DISTINCT CASE WHEN status = 'new' THEN id END) as new_leads,\n          COUNT(DISTINCT CASE WHEN status = 'contacted' THEN id END) as contacted_leads,\n          COUNT(DISTINCT CASE WHEN status = 'qualified' THEN id END) as qualified_leads,\n          COUNT(DISTINCT CASE WHEN status = 'converted' THEN id END) as converted_leads,\n          ROUND(\n            COUNT(DISTINCT CASE WHEN status = 'converted' THEN id END)::numeric / \n            NULLIF(COUNT(*), 0) * 100, 2\n          ) as conversion_rate\n        FROM leads\n        WHERE created_at > NOW() - INTERVAL '30 days'\n      `),\n      \n      // Revenue statistics (if you have payment data)\n      pool.query(`\n        SELECT \n          COUNT(DISTINCT CASE WHEN status = 'confirmed' THEN id END) as confirmed_bookings,\n          COUNT(DISTINCT CASE WHEN status = 'completed' THEN id END) as completed_bookings,\n          COUNT(DISTINCT CASE WHEN status = 'cancelled' THEN id END) as cancelled_bookings\n        FROM bookings\n        WHERE created_at > NOW() - INTERVAL '30 days'\n      `)\n    ]);\n\n    res.json({\n      users: userStats.rows[0],\n      events: eventStats.rows,\n      conversions: conversionStats.rows[0],\n      bookings: revenueStats.rows[0],\n      generatedAt: new Date().toISOString()\n    });\n  } catch (error) {\n    console.error('Dashboard error:', error);\n    res.status(500).json({ error: 'Unable to retrieve dashboard data' });\n  }\n});\n\n// Get users report\nrouter.get('/reports/users', [auth, authorize('admin', 'super_admin')], [\n  query('startDate').optional().isISO8601(),\n  query('endDate').optional().isISO8601()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const startDate = req.query.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    const endDate = req.query.endDate || new Date().toISOString();\n\n    const result = await pool.query(`\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as new_users,\n        COUNT(CASE WHEN email_verified = true THEN 1 END) as verified_users,\n        COUNT(CASE WHEN role = 'client' THEN 1 END) as client_users\n      FROM users\n      WHERE created_at BETWEEN $1 AND $2\n      GROUP BY DATE(created_at)\n      ORDER BY date DESC\n    `, [startDate, endDate]);\n\n    const totalResult = await pool.query(`\n      SELECT \n        role,\n        COUNT(*) as count\n      FROM users\n      WHERE created_at BETWEEN $1 AND $2\n      GROUP BY role\n    `, [startDate, endDate]);\n\n    res.json({\n      daily: result.rows,\n      byRole: totalResult.rows,\n      period: { startDate, endDate }\n    });\n  } catch (error) {\n    console.error('Users report error:', error);\n    res.status(500).json({ error: 'Unable to generate users report' });\n  }\n});\n\n// Get conversions report\nrouter.get('/reports/conversions', [auth, authorize('admin', 'super_admin')], [\n  query('startDate').optional().isISO8601(),\n  query('endDate').optional().isISO8601()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const startDate = req.query.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    const endDate = req.query.endDate || new Date().toISOString();\n\n    const funnelResult = await pool.query(`\n      SELECT \n        status,\n        COUNT(*) as count,\n        AVG(EXTRACT(EPOCH FROM (updated_at - created_at))/3600)::int as avg_hours_in_status\n      FROM leads\n      WHERE created_at BETWEEN $1 AND $2\n      GROUP BY status\n      ORDER BY \n        CASE status\n          WHEN 'new' THEN 1\n          WHEN 'contacted' THEN 2\n          WHEN 'qualified' THEN 3\n          WHEN 'negotiating' THEN 4\n          WHEN 'converted' THEN 5\n          WHEN 'lost' THEN 6\n        END\n    `, [startDate, endDate]);\n\n    const sourceResult = await pool.query(`\n      SELECT \n        source,\n        COUNT(*) as total_leads,\n        COUNT(CASE WHEN status = 'converted' THEN 1 END) as converted_leads,\n        ROUND(\n          COUNT(CASE WHEN status = 'converted' THEN 1 END)::numeric / \n          NULLIF(COUNT(*), 0) * 100, 2\n        ) as conversion_rate\n      FROM leads\n      WHERE created_at BETWEEN $1 AND $2\n      GROUP BY source\n      ORDER BY total_leads DESC\n    `, [startDate, endDate]);\n\n    res.json({\n      funnel: funnelResult.rows,\n      bySource: sourceResult.rows,\n      period: { startDate, endDate }\n    });\n  } catch (error) {\n    console.error('Conversions report error:', error);\n    res.status(500).json({ error: 'Unable to generate conversions report' });\n  }\n});\n\n// Get revenue report\nrouter.get('/reports/revenue', [auth, authorize('admin', 'super_admin')], [\n  query('startDate').optional().isISO8601(),\n  query('endDate').optional().isISO8601()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const startDate = req.query.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();\n    const endDate = req.query.endDate || new Date().toISOString();\n\n    // Booking statistics\n    const bookingResult = await pool.query(`\n      SELECT \n        DATE(scheduled_at) as date,\n        consultation_type,\n        COUNT(*) as bookings,\n        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,\n        COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled,\n        COUNT(CASE WHEN status = 'no_show' THEN 1 END) as no_shows\n      FROM bookings\n      WHERE scheduled_at BETWEEN $1 AND $2\n      GROUP BY DATE(scheduled_at), consultation_type\n      ORDER BY date DESC, bookings DESC\n    `, [startDate, endDate]);\n\n    // Service popularity\n    const serviceResult = await pool.query(`\n      SELECT \n        s.name as service_name,\n        COUNT(b.id) as total_bookings,\n        COUNT(CASE WHEN b.status = 'completed' THEN 1 END) as completed_bookings\n      FROM services s\n      LEFT JOIN bookings b ON s.id = b.service_id\n        AND b.scheduled_at BETWEEN $1 AND $2\n      GROUP BY s.id, s.name\n      ORDER BY total_bookings DESC\n    `, [startDate, endDate]);\n\n    res.json({\n      bookings: bookingResult.rows,\n      services: serviceResult.rows,\n      period: { startDate, endDate }\n    });\n  } catch (error) {\n    console.error('Revenue report error:', error);\n    res.status(500).json({ error: 'Unable to generate revenue report' });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/auth.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":36,"nodeType":"CallExpression","endLine":2,"endColumn":64,"fix":{"range":[100,100],"text":"\n"}},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/ can be optimized to /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!$%&*?@])[\\d!$%&*?@A-Za-z]/.","line":28,"column":14,"nodeType":"Literal","messageId":"better-regex","endLine":28,"endColumn":79,"fix":{"range":[767,832],"text":"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!$%&*?@])[\\d!$%&*?@A-Za-z]/"}},{"ruleId":"unicorn/better-regex","severity":2,"message":"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/ can be optimized to /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!$%&*?@])[\\d!$%&*?@A-Za-z]/.","line":92,"column":14,"nodeType":"Literal","messageId":"better-regex","endLine":92,"endColumn":79,"fix":{"range":[2350,2415],"text":"/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!$%&*?@])[\\d!$%&*?@A-Za-z]/"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":98,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":98,"endColumn":52}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const express = require('express');\nconst { body, validationResult } = require('express-validator');\nconst router = express.Router();\nconst authController = require('../controllers/authController');\nconst { authenticate } = require('../middleware/auth');\n\n// Validation middleware\nconst validate = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ \n      error: 'Validation failed',\n      details: errors.array() \n    });\n  }\n  next();\n};\n\n// Register\nrouter.post('/register', [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters')\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain uppercase, lowercase, number and special character'),\n  body('firstName')\n    .trim()\n    .notEmpty()\n    .withMessage('First name is required'),\n  body('lastName')\n    .trim()\n    .notEmpty()\n    .withMessage('Last name is required'),\n  body('company')\n    .trim()\n    .optional(),\n  validate\n], authController.register);\n\n// Login\nrouter.post('/login', [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  body('password')\n    .notEmpty()\n    .withMessage('Password is required'),\n  validate\n], authController.login);\n\n// Refresh token\nrouter.post('/refresh', [\n  body('refreshToken')\n    .notEmpty()\n    .withMessage('Refresh token is required'),\n  validate\n], authController.refreshToken);\n\n// Logout (requires authentication)\nrouter.post('/logout', authenticate, authController.logout);\n\n// Verify email\nrouter.post('/verify-email', [\n  body('token')\n    .notEmpty()\n    .withMessage('Verification token is required'),\n  validate\n], authController.verifyEmail);\n\n// Request password reset\nrouter.post('/forgot-password', [\n  body('email')\n    .isEmail()\n    .normalizeEmail()\n    .withMessage('Valid email is required'),\n  validate\n], authController.requestPasswordReset);\n\n// Reset password\nrouter.post('/reset-password', [\n  body('token')\n    .notEmpty()\n    .withMessage('Reset token is required'),\n  body('newPassword')\n    .isLength({ min: 8 })\n    .withMessage('Password must be at least 8 characters')\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\n    .withMessage('Password must contain uppercase, lowercase, number and special character'),\n  validate\n], authController.resetPassword);\n\n// Get current user (requires authentication)\nrouter.get('/me', authenticate, async (req, res) => {\n  res.json({\n    user: req.user\n  });\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/bookings.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":6,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":6,"endColumn":50},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":11,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":11,"endColumn":53},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":16,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":16,"endColumn":51},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":21,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":21,"endColumn":53},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":26,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":26,"endColumn":56}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { authenticate } = require('../middleware/auth');\n\n// Get user's bookings\nrouter.get('/', authenticate, async (req, res) => {\n  res.json({ message: 'User bookings endpoint' });\n});\n\n// Get booking by ID\nrouter.get('/:id', authenticate, async (req, res) => {\n  res.json({ message: 'Get booking endpoint', bookingId: req.params.id });\n});\n\n// Create booking\nrouter.post('/', authenticate, async (req, res) => {\n  res.json({ message: 'Create booking endpoint' });\n});\n\n// Update booking\nrouter.put('/:id', authenticate, async (req, res) => {\n  res.json({ message: 'Update booking endpoint', bookingId: req.params.id });\n});\n\n// Cancel booking\nrouter.delete('/:id', authenticate, async (req, res) => {\n  res.json({ message: 'Cancel booking endpoint', bookingId: req.params.id });\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/case-studies.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `caseStudies.js` or `CaseStudies.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":29,"nodeType":"CallExpression","endLine":4,"endColumn":58,"fix":{"range":[175,175],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":5,"column":50,"nodeType":"CallExpression","endLine":5,"endColumn":78,"fix":{"range":[69,255],"text":"const { body, query, param, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\n"}},{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur before import of `../config/database`","line":6,"column":24,"nodeType":"CallExpression","endLine":6,"endColumn":39,"fix":{"range":[69,295],"text":"const { v4: uuidv4 } = require('uuid');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\n"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":20,"column":18,"nodeType":"Identifier","messageId":"error","endLine":20,"endColumn":26,"fix":{"range":[733,741],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":21,"column":19,"nodeType":"Identifier","messageId":"error","endLine":21,"endColumn":27,"fix":{"range":[782,790],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":34,"column":19,"nodeType":"Identifier","messageId":"error","endLine":34,"endColumn":27,"fix":{"range":[1230,1238],"text":"Number.parseInt"}},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":166,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":166,"endColumn":36,"fix":{"range":[5157,5652],"text":"for (const [key, value] of Object.entries(updates)) {\n      const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n      if (['title', 'slug', 'client_name', 'industry', 'challenge', \n           'solution', 'results', 'technologies', 'metrics', 'featured_image', \n           'status'].includes(snakeKey)) {\n        fields.push(`${snakeKey} = $${paramCount}`);\n        values.push(snakeKey === 'metrics' ? JSON.stringify(value) : value);\n        paramCount++;\n      }\n    }"}},{"ruleId":"unicorn/prefer-string-replace-all","severity":2,"message":"Prefer `String#replaceAll()` over `String#replace()`.","line":167,"column":28,"nodeType":"Identifier","messageId":"method","endLine":167,"endColumn":35,"fix":{"range":[5243,5243],"text":"All"}},{"ruleId":"no-shadow","severity":2,"message":"'query' is already declared in the upper scope on line 5 column 15.","line":182,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":182,"endColumn":16}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\nconst { v4: uuidv4 } = require('uuid');\n\n// Get all case studies (public - only published ones)\nrouter.get('/', [\n  query('page').optional().isInt({ min: 1 }),\n  query('limit').optional().isInt({ min: 1, max: 100 }),\n  query('status').optional().isIn(['draft', 'published', 'archived'])\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const offset = (page - 1) * limit;\n    const status = req.query.status || 'published';\n\n    // Only show published for non-admin users\n    const statusFilter = req.user?.role === 'admin' || req.user?.role === 'super_admin' \n      ? status \n      : 'published';\n\n    const countResult = await pool.query(\n      'SELECT COUNT(*) FROM case_studies WHERE status = $1',\n      [statusFilter]\n    );\n    const total = parseInt(countResult.rows[0].count);\n\n    const result = await pool.query(\n      `SELECT id, title, slug, client_name, industry, challenge, solution, \n              results, technologies, metrics, featured_image, status, published_at\n       FROM case_studies \n       WHERE status = $1\n       ORDER BY published_at DESC NULLS LAST, created_at DESC\n       LIMIT $2 OFFSET $3`,\n      [statusFilter, limit, offset]\n    );\n\n    res.json({\n      data: result.rows,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('List case studies error:', error);\n    res.status(500).json({ error: 'Unable to retrieve case studies' });\n  }\n});\n\n// Get single case study by slug\nrouter.get('/:slug', async (req, res) => {\n  try {\n    const { slug } = req.params;\n\n    const result = await pool.query(\n      `SELECT * FROM case_studies \n       WHERE slug = $1 AND (status = 'published' OR $2)`,\n      [slug, req.user?.role === 'admin' || req.user?.role === 'super_admin']\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Case study not found' });\n    }\n\n    res.json(result.rows[0]);\n  } catch (error) {\n    console.error('Get case study error:', error);\n    res.status(500).json({ error: 'Unable to retrieve case study' });\n  }\n});\n\n// Create new case study (admin only)\nrouter.post('/', [auth, authorize('admin', 'super_admin')], [\n  body('title').notEmpty().trim(),\n  body('slug').notEmpty().trim().isSlug(),\n  body('challenge').notEmpty(),\n  body('solution').notEmpty(),\n  body('results').notEmpty(),\n  body('technologies').isArray(),\n  body('metrics').optional().isObject()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      title, slug, clientName, industry, challenge, \n      solution, results, technologies, metrics, featuredImage\n    } = req.body;\n\n    const id = uuidv4();\n\n    // Check if slug already exists\n    const existing = await pool.query(\n      'SELECT id FROM case_studies WHERE slug = $1',\n      [slug]\n    );\n\n    if (existing.rows.length > 0) {\n      return res.status(400).json({ error: 'Slug already exists' });\n    }\n\n    const result = await pool.query(\n      `INSERT INTO case_studies \n       (id, title, slug, client_name, industry, challenge, solution, \n        results, technologies, metrics, featured_image, status, created_by)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, 'draft', $12)\n       RETURNING *`,\n      [id, title, slug, clientName, industry, challenge, solution, \n       results, technologies, JSON.stringify(metrics || {}), featuredImage, req.user.id]\n    );\n\n    res.status(201).json(result.rows[0]);\n  } catch (error) {\n    console.error('Create case study error:', error);\n    res.status(500).json({ error: 'Unable to create case study' });\n  }\n});\n\n// Update case study\nrouter.put('/:id', [auth, authorize('admin', 'super_admin')], [\n  param('id').isUUID(),\n  body('title').optional().notEmpty().trim(),\n  body('slug').optional().notEmpty().trim().isSlug(),\n  body('technologies').optional().isArray()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { id } = req.params;\n    const updates = req.body;\n\n    // If updating slug, check it doesn't exist\n    if (updates.slug) {\n      const existing = await pool.query(\n        'SELECT id FROM case_studies WHERE slug = $1 AND id != $2',\n        [updates.slug, id]\n      );\n\n      if (existing.rows.length > 0) {\n        return res.status(400).json({ error: 'Slug already exists' });\n      }\n    }\n\n    // Build dynamic update query\n    const fields = [];\n    const values = [];\n    let paramCount = 1;\n\n    Object.entries(updates).forEach(([key, value]) => {\n      const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n      if (['title', 'slug', 'client_name', 'industry', 'challenge', \n           'solution', 'results', 'technologies', 'metrics', 'featured_image', \n           'status'].includes(snakeKey)) {\n        fields.push(`${snakeKey} = $${paramCount}`);\n        values.push(snakeKey === 'metrics' ? JSON.stringify(value) : value);\n        paramCount++;\n      }\n    });\n\n    if (fields.length === 0) {\n      return res.status(400).json({ error: 'No valid fields to update' });\n    }\n\n    values.push(id);\n    const query = `UPDATE case_studies SET ${fields.join(', ')}, updated_at = NOW() \n                   WHERE id = $${paramCount} RETURNING *`;\n\n    const result = await pool.query(query, values);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Case study not found' });\n    }\n\n    res.json(result.rows[0]);\n  } catch (error) {\n    console.error('Update case study error:', error);\n    res.status(500).json({ error: 'Unable to update case study' });\n  }\n});\n\n// Delete case study\nrouter.delete('/:id', [auth, authorize('admin', 'super_admin')], [\n  param('id').isUUID()\n], async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await pool.query(\n      'DELETE FROM case_studies WHERE id = $1 RETURNING id',\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Case study not found' });\n    }\n\n    res.status(204).send();\n  } catch (error) {\n    console.error('Delete case study error:', error);\n    res.status(500).json({ error: 'Unable to delete case study' });\n  }\n});\n\n// Publish case study\nrouter.post('/:id/publish', [auth, authorize('admin', 'super_admin')], [\n  param('id').isUUID()\n], async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await pool.query(\n      `UPDATE case_studies \n       SET status = 'published', published_at = NOW(), updated_at = NOW()\n       WHERE id = $1 AND status = 'draft'\n       RETURNING *`,\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Case study not found or already published' });\n    }\n\n    res.json(result.rows[0]);\n  } catch (error) {\n    console.error('Publish case study error:', error);\n    res.status(500).json({ error: 'Unable to publish case study' });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/chat.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":18,"nodeType":"CallExpression","endLine":4,"endColumn":47,"fix":{"range":[164,164],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":5,"column":50,"nodeType":"CallExpression","endLine":5,"endColumn":78,"fix":{"range":[69,244],"text":"const { body, query, param, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\nconst { auth } = require('../middleware/auth');\n"}},{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur before import of `../config/database`","line":6,"column":24,"nodeType":"CallExpression","endLine":6,"endColumn":39,"fix":{"range":[69,284],"text":"const { v4: uuidv4 } = require('uuid');\nconst { pool } = require('../config/database');\nconst { auth } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":21,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":21,"endColumn":42},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":51,"column":18,"nodeType":"Identifier","messageId":"error","endLine":51,"endColumn":26,"fix":{"range":[1537,1545],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":52,"column":19,"nodeType":"Identifier","messageId":"error","endLine":52,"endColumn":27,"fix":{"range":[1586,1594],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":59,"column":19,"nodeType":"Identifier","messageId":"error","endLine":59,"endColumn":27,"fix":{"range":[1814,1822],"text":"Number.parseInt"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'temperature' is assigned a value but never used.","line":191,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":75},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":250,"column":9,"nodeType":"Identifier","messageId":"error","endLine":250,"endColumn":17,"fix":{"range":[7380,7388],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":251,"column":21,"nodeType":"CallExpression","messageId":"substring","endLine":251,"endColumn":58,"fix":{"range":[7462,7471],"text":"slice"}}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { auth } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\nconst { v4: uuidv4 } = require('uuid');\n\n// AI provider configurations\nconst AI_PROVIDERS = {\n  openai: {\n    apiKey: process.env.OPENAI_API_KEY,\n    models: ['gpt-4', 'gpt-4-turbo-preview', 'gpt-3.5-turbo']\n  },\n  anthropic: {\n    apiKey: process.env.ANTHROPIC_API_KEY,\n    models: ['claude-3-opus-20240229', 'claude-3-sonnet-20240229', 'claude-3-haiku-20240307']\n  }\n};\n\n// Get available models\nrouter.get('/models', async (req, res) => {\n  try {\n    const models = [];\n    \n    if (AI_PROVIDERS.openai.apiKey) {\n      models.push(...AI_PROVIDERS.openai.models.map(m => ({ provider: 'openai', model: m })));\n    }\n    \n    if (AI_PROVIDERS.anthropic.apiKey) {\n      models.push(...AI_PROVIDERS.anthropic.models.map(m => ({ provider: 'anthropic', model: m })));\n    }\n\n    res.json(models);\n  } catch (error) {\n    console.error('Get models error:', error);\n    res.status(500).json({ error: 'Unable to retrieve models' });\n  }\n});\n\n// List user's conversations\nrouter.get('/conversations', auth, [\n  query('page').optional().isInt({ min: 1 }),\n  query('limit').optional().isInt({ min: 1, max: 100 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 20;\n    const offset = (page - 1) * limit;\n\n    const countResult = await pool.query(\n      'SELECT COUNT(*) FROM chat_conversations WHERE user_id = $1',\n      [req.user.id]\n    );\n    const total = parseInt(countResult.rows[0].count);\n\n    const result = await pool.query(\n      `SELECT id, title, is_active, created_at, updated_at\n       FROM chat_conversations \n       WHERE user_id = $1\n       ORDER BY updated_at DESC\n       LIMIT $2 OFFSET $3`,\n      [req.user.id, limit, offset]\n    );\n\n    res.json({\n      data: result.rows,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('List conversations error:', error);\n    res.status(500).json({ error: 'Unable to retrieve conversations' });\n  }\n});\n\n// Get conversation with messages\nrouter.get('/conversations/:id', auth, [\n  param('id').isUUID()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { id } = req.params;\n\n    // Get conversation\n    const convResult = await pool.query(\n      'SELECT * FROM chat_conversations WHERE id = $1 AND user_id = $2',\n      [id, req.user.id]\n    );\n\n    if (convResult.rows.length === 0) {\n      return res.status(404).json({ error: 'Conversation not found' });\n    }\n\n    // Get messages\n    const msgResult = await pool.query(\n      `SELECT id, role, content, created_at\n       FROM chat_messages \n       WHERE conversation_id = $1\n       ORDER BY created_at ASC`,\n      [id]\n    );\n\n    res.json({\n      ...convResult.rows[0],\n      messages: msgResult.rows\n    });\n  } catch (error) {\n    console.error('Get conversation error:', error);\n    res.status(500).json({ error: 'Unable to retrieve conversation' });\n  }\n});\n\n// Create new conversation\nrouter.post('/conversations', auth, [\n  body('title').optional().trim()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { title } = req.body;\n    const id = uuidv4();\n\n    const result = await pool.query(\n      `INSERT INTO chat_conversations (id, user_id, title, is_active)\n       VALUES ($1, $2, $3, true)\n       RETURNING *`,\n      [id, req.user.id, title || 'New Conversation']\n    );\n\n    res.status(201).json(result.rows[0]);\n  } catch (error) {\n    console.error('Create conversation error:', error);\n    res.status(500).json({ error: 'Unable to create conversation' });\n  }\n});\n\n// Delete conversation\nrouter.delete('/conversations/:id', auth, [\n  param('id').isUUID()\n], async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await pool.query(\n      'DELETE FROM chat_conversations WHERE id = $1 AND user_id = $2 RETURNING id',\n      [id, req.user.id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Conversation not found' });\n    }\n\n    res.status(204).send();\n  } catch (error) {\n    console.error('Delete conversation error:', error);\n    res.status(500).json({ error: 'Unable to delete conversation' });\n  }\n});\n\n// Send message and get AI response\nrouter.post('/completions', auth, [\n  body('conversationId').optional().isUUID(),\n  body('messages').isArray().notEmpty(),\n  body('messages.*.role').isIn(['user', 'assistant', 'system']),\n  body('messages.*.content').notEmpty(),\n  body('model').optional().isString(),\n  body('temperature').optional().isFloat({ min: 0, max: 2 })\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { conversationId, messages, model = 'gpt-3.5-turbo', temperature = 0.7 } = req.body;\n    let convId = conversationId;\n\n    // Create conversation if not provided\n    if (!convId) {\n      const convResult = await pool.query(\n        `INSERT INTO chat_conversations (id, user_id, title, is_active)\n         VALUES ($1, $2, $3, true)\n         RETURNING id`,\n        [uuidv4(), req.user.id, 'New Conversation']\n      );\n      convId = convResult.rows[0].id;\n    } else {\n      // Verify conversation belongs to user\n      const convCheck = await pool.query(\n        'SELECT id FROM chat_conversations WHERE id = $1 AND user_id = $2',\n        [convId, req.user.id]\n      );\n      if (convCheck.rows.length === 0) {\n        return res.status(404).json({ error: 'Conversation not found' });\n      }\n    }\n\n    // Store user message\n    const userMessage = messages[messages.length - 1];\n    const userMsgId = uuidv4();\n    await pool.query(\n      `INSERT INTO chat_messages (id, conversation_id, role, content)\n       VALUES ($1, $2, $3, $4)`,\n      [userMsgId, convId, userMessage.role, userMessage.content]\n    );\n\n    // Here you would call the actual AI provider API\n    // For now, return a mock response\n    const aiResponse = {\n      role: 'assistant',\n      content: 'This is a mock AI response. In production, this would call OpenAI or Anthropic API based on the selected model.'\n    };\n\n    // Store AI response\n    const aiMsgId = uuidv4();\n    await pool.query(\n      `INSERT INTO chat_messages (id, conversation_id, role, content)\n       VALUES ($1, $2, $3, $4)`,\n      [aiMsgId, convId, aiResponse.role, aiResponse.content]\n    );\n\n    // Update conversation timestamp\n    await pool.query(\n      'UPDATE chat_conversations SET updated_at = NOW() WHERE id = $1',\n      [convId]\n    );\n\n    // Update conversation title if it's the first message\n    const msgCount = await pool.query(\n      'SELECT COUNT(*) FROM chat_messages WHERE conversation_id = $1',\n      [convId]\n    );\n    \n    if (parseInt(msgCount.rows[0].count) === 2) {\n      const title = userMessage.content.substring(0, 100);\n      await pool.query(\n        'UPDATE chat_conversations SET title = $1 WHERE id = $2',\n        [title, convId]\n      );\n    }\n\n    res.json({\n      conversationId: convId,\n      message: {\n        id: aiMsgId,\n        ...aiResponse,\n        created_at: new Date().toISOString()\n      },\n      tokensUsed: 150, // Mock token count\n      model\n    });\n  } catch (error) {\n    console.error('Chat completion error:', error);\n    res.status(500).json({ error: 'Unable to process chat request' });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/contact.js","messages":[{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":5,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":5,"endColumn":43},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[626,784],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":44,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":44,"endColumn":46},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1364,1411],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\n\n// Contact form submission\nrouter.post('/submit', async (req, res) => {\n  try {\n    const { name, email, company, message, type } = req.body;\n    \n    // Validate required fields\n    if (!name || !email || !message) {\n      return res.status(400).json({ \n        error: 'Please provide name, email, and message' \n      });\n    }\n\n    // Here you would typically:\n    // 1. Send email to support@dreamerai.io or jlasalle@dreamerai.io\n    // 2. Store in database\n    // 3. Send confirmation email to user\n    \n    // For now, just log and return success\n    console.log('Contact form submission:', {\n      name,\n      email,\n      company,\n      message,\n      type,\n      timestamp: new Date().toISOString()\n    });\n\n    res.json({\n      success: true,\n      message: 'Thank you for contacting Dreamer AI Solutions. We will respond within 24 hours.'\n    });\n  } catch (error) {\n    console.error('Contact form error:', error);\n    res.status(500).json({ \n      error: 'Unable to submit contact form. Please try again.' \n    });\n  }\n});\n\n// Newsletter subscription\nrouter.post('/subscribe', async (req, res) => {\n  try {\n    const { email } = req.body;\n    \n    if (!email) {\n      return res.status(400).json({ error: 'Email is required' });\n    }\n\n    // Here you would add to mailing list\n    console.log('Newsletter subscription:', email);\n\n    res.json({\n      success: true,\n      message: 'Successfully subscribed to Dreamer AI Solutions updates'\n    });\n  } catch (error) {\n    console.error('Subscription error:', error);\n    res.status(500).json({ \n      error: 'Unable to process subscription' \n    });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/health.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":12,"nodeType":"CallExpression","endLine":3,"endColumn":25,"fix":{"range":[94,94],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`os` import should occur before import of `express`","line":3,"column":12,"nodeType":"CallExpression","endLine":3,"endColumn":25},{"ruleId":"import/order","severity":2,"message":"`../config/redis` import should occur before import of `../database`","line":5,"column":15,"nodeType":"CallExpression","endLine":5,"endColumn":41,"fix":{"range":[95,178],"text":"const redis = require('../config/redis');\nconst { pool } = require('../database');\n"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":73,"column":20,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":73,"endColumn":71,"fix":{"range":[1987,2038],"text":"`${((usedMemory / totalMemory) * 100).toFixed(2)  }%`"}},{"ruleId":"unicorn/better-regex","severity":2,"message":"/redis_version:([^\\r\\n]+)/ can be optimized to /redis_version:([^\\n\\r]+)/.","line":121,"column":27,"nodeType":"Literal","messageId":"better-regex","endLine":121,"endColumn":53,"fix":{"range":[3238,3264],"text":"/redis_version:([^\\n\\r]+)/"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":143,"column":17,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":143,"endColumn":71,"fix":{"range":[3823,3877],"text":"`${Math.round(memoryUsage.heapUsed / 1024 / 1024)  } MB`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":144,"column":18,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":144,"endColumn":73,"fix":{"range":[3896,3951],"text":"`${Math.round(memoryUsage.heapTotal / 1024 / 1024)  } MB`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":145,"column":12,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":145,"endColumn":61,"fix":{"range":[3964,4013],"text":"`${Math.round(memoryUsage.rss / 1024 / 1024)  } MB`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":146,"column":17,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":146,"endColumn":71,"fix":{"range":[4031,4085],"text":"`${Math.round(memoryUsage.external / 1024 / 1024)  } MB`"}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":158,"column":25,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":158,"endColumn":55,"fix":{"range":[4314,4344],"text":"`${Date.now() - startTime  } ms`"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":165,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":165,"endColumn":43},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":170,"column":11,"nodeType":"Identifier","messageId":"error","endLine":170,"endColumn":15,"fix":{"range":[4643,4693],"text":", `# TYPE dreamer_ai_info gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":171,"column":11,"nodeType":"Identifier","messageId":"error","endLine":171,"endColumn":15,"fix":{"range":[4691,4825],"text":", `dreamer_ai_info{version=\"${process.env.npm_package_version || '1.0.0'}\",environment=\"${process.env.NODE_ENV}\"} 1`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":174,"column":11,"nodeType":"Identifier","messageId":"error","endLine":174,"endColumn":15,"fix":{"range":[4823,4918],"text":", `# HELP dreamer_ai_uptime_seconds Service uptime in seconds`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":175,"column":11,"nodeType":"Identifier","messageId":"error","endLine":175,"endColumn":15,"fix":{"range":[4916,4978],"text":", `# TYPE dreamer_ai_uptime_seconds counter`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":176,"column":11,"nodeType":"Identifier","messageId":"error","endLine":176,"endColumn":15,"suggestions":[{"messageId":"suggestion","fix":{"range":[4976,5043],"text":", `dreamer_ai_uptime_seconds ${process.uptime()}`);"},"data":{},"desc":"Merge with previous one."}]},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":181,"column":11,"nodeType":"Identifier","messageId":"error","endLine":181,"endColumn":15,"fix":{"range":[5186,5254],"text":", `# TYPE dreamer_ai_memory_heap_used_bytes gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":182,"column":11,"nodeType":"Identifier","messageId":"error","endLine":182,"endColumn":15,"fix":{"range":[5252,5331],"text":", `dreamer_ai_memory_heap_used_bytes ${memoryUsage.heapUsed}`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":184,"column":11,"nodeType":"Identifier","messageId":"error","endLine":184,"endColumn":15,"fix":{"range":[5329,5413],"text":", `# HELP dreamer_ai_memory_heap_total_bytes Total heap memory`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":185,"column":11,"nodeType":"Identifier","messageId":"error","endLine":185,"endColumn":15,"fix":{"range":[5411,5480],"text":", `# TYPE dreamer_ai_memory_heap_total_bytes gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":186,"column":11,"nodeType":"Identifier","messageId":"error","endLine":186,"endColumn":15,"fix":{"range":[5478,5559],"text":", `dreamer_ai_memory_heap_total_bytes ${memoryUsage.heapTotal}`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":188,"column":11,"nodeType":"Identifier","messageId":"error","endLine":188,"endColumn":15,"fix":{"range":[5557,5634],"text":", `# HELP dreamer_ai_memory_rss_bytes Resident set size`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":189,"column":11,"nodeType":"Identifier","messageId":"error","endLine":189,"endColumn":15,"fix":{"range":[5632,5694],"text":", `# TYPE dreamer_ai_memory_rss_bytes gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":190,"column":11,"nodeType":"Identifier","messageId":"error","endLine":190,"endColumn":15,"fix":{"range":[5692,5760],"text":", `dreamer_ai_memory_rss_bytes ${memoryUsage.rss}`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":201,"column":13,"nodeType":"Identifier","messageId":"error","endLine":201,"endColumn":17,"fix":{"range":[6091,6159],"text":", `# TYPE dreamer_ai_db_connections_total gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":202,"column":13,"nodeType":"Identifier","messageId":"error","endLine":202,"endColumn":17,"fix":{"range":[6157,6233],"text":", `dreamer_ai_db_connections_total ${poolMetrics.total}`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":204,"column":13,"nodeType":"Identifier","messageId":"error","endLine":204,"endColumn":17,"fix":{"range":[6231,6323],"text":", `# HELP dreamer_ai_db_connections_idle Idle database connections`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":205,"column":13,"nodeType":"Identifier","messageId":"error","endLine":205,"endColumn":17,"fix":{"range":[6321,6388],"text":", `# TYPE dreamer_ai_db_connections_idle gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":206,"column":13,"nodeType":"Identifier","messageId":"error","endLine":206,"endColumn":17,"fix":{"range":[6386,6460],"text":", `dreamer_ai_db_connections_idle ${poolMetrics.idle}`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":208,"column":13,"nodeType":"Identifier","messageId":"error","endLine":208,"endColumn":17,"fix":{"range":[6458,6556],"text":", `# HELP dreamer_ai_db_connections_waiting Waiting database connections`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":209,"column":13,"nodeType":"Identifier","messageId":"error","endLine":209,"endColumn":17,"fix":{"range":[6554,6624],"text":", `# TYPE dreamer_ai_db_connections_waiting gauge`);"}},{"ruleId":"unicorn/no-array-push-push","severity":2,"message":"Do not call `Array#push()` multiple times.","line":210,"column":13,"nodeType":"Identifier","messageId":"error","endLine":210,"endColumn":17,"fix":{"range":[6622,6702],"text":", `dreamer_ai_db_connections_waiting ${poolMetrics.waiting}`);"}}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":30,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst os = require('os');\nconst { pool } = require('../database');\nconst redis = require('../config/redis');\n\n// Basic health check\nrouter.get('/', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'dreamer-ai-backend',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV,\n    version: process.env.npm_package_version || '1.0.0'\n  });\n});\n\n// Readiness check - checks if all dependencies are ready\nrouter.get('/ready', async (req, res) => {\n  const checks = {\n    database: false,\n    redis: false\n  };\n  \n  try {\n    // Check database connection\n    const dbResult = await pool.query('SELECT 1');\n    checks.database = dbResult.rows.length === 1;\n  } catch (error) {\n    console.error('Database health check failed:', error);\n  }\n  \n  try {\n    // Check Redis connection\n    await redis.ping();\n    checks.redis = true;\n  } catch (error) {\n    console.error('Redis health check failed:', error);\n  }\n  \n  const isReady = Object.values(checks).every(check => check === true);\n  const status = isReady ? 200 : 503;\n  \n  res.status(status).json({\n    ready: isReady,\n    checks,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Liveness check - checks if the service is alive\nrouter.get('/live', (req, res) => {\n  // Check memory usage\n  const memoryUsage = process.memoryUsage();\n  const totalMemory = os.totalmem();\n  const freeMemory = os.freemem();\n  const usedMemory = totalMemory - freeMemory;\n  const memoryThreshold = 0.9; // 90% threshold\n  \n  const isMemoryOk = (usedMemory / totalMemory) < memoryThreshold;\n  const isAlive = isMemoryOk;\n  \n  res.status(isAlive ? 200 : 503).json({\n    alive: isAlive,\n    memory: {\n      used: memoryUsage.heapUsed,\n      total: memoryUsage.heapTotal,\n      external: memoryUsage.external,\n      rss: memoryUsage.rss,\n      systemUsed: usedMemory,\n      systemTotal: totalMemory,\n      percentUsed: ((usedMemory / totalMemory) * 100).toFixed(2) + '%'\n    },\n    cpu: {\n      loadAverage: os.loadavg(),\n      cores: os.cpus().length\n    },\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Detailed health check with all service dependencies\nrouter.get('/detailed', async (req, res) => {\n  const startTime = Date.now();\n  const health = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    version: process.env.npm_package_version || '1.0.0',\n    environment: process.env.NODE_ENV,\n    checks: {}\n  };\n  \n  // Database check\n  try {\n    const dbStart = Date.now();\n    const result = await pool.query('SELECT version()');\n    health.checks.database = {\n      status: 'healthy',\n      responseTime: Date.now() - dbStart,\n      version: result.rows[0].version\n    };\n  } catch (error) {\n    health.checks.database = {\n      status: 'unhealthy',\n      error: error.message\n    };\n    health.status = 'degraded';\n  }\n  \n  // Redis check\n  try {\n    const redisStart = Date.now();\n    const pong = await redis.ping();\n    const info = await redis.info('server');\n    health.checks.redis = {\n      status: 'healthy',\n      responseTime: Date.now() - redisStart,\n      ping: pong,\n      version: info.match(/redis_version:([^\\r\\n]+)/)?.[1]\n    };\n  } catch (error) {\n    health.checks.redis = {\n      status: 'unhealthy',\n      error: error.message\n    };\n    health.status = 'degraded';\n  }\n  \n  // API endpoints check\n  health.checks.endpoints = {\n    auth: { available: true, path: '/api/auth' },\n    users: { available: true, path: '/api/users' },\n    services: { available: true, path: '/api/services' },\n    bookings: { available: true, path: '/api/bookings' }\n  };\n  \n  // System resources\n  const memoryUsage = process.memoryUsage();\n  health.system = {\n    memory: {\n      heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + ' MB',\n      heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + ' MB',\n      rss: Math.round(memoryUsage.rss / 1024 / 1024) + ' MB',\n      external: Math.round(memoryUsage.external / 1024 / 1024) + ' MB'\n    },\n    cpu: {\n      usage: process.cpuUsage(),\n      loadAverage: os.loadavg()\n    },\n    pid: process.pid,\n    platform: process.platform,\n    nodeVersion: process.version\n  };\n  \n  // Response time\n  health.responseTime = Date.now() - startTime + ' ms';\n  \n  const statusCode = health.status === 'healthy' ? 200 : 503;\n  res.status(statusCode).json(health);\n});\n\n// Metrics endpoint for Prometheus\nrouter.get('/metrics', async (req, res) => {\n  const metrics = [];\n  \n  // Basic service info\n  metrics.push(`# HELP dreamer_ai_info Service information`);\n  metrics.push(`# TYPE dreamer_ai_info gauge`);\n  metrics.push(`dreamer_ai_info{version=\"${process.env.npm_package_version || '1.0.0'}\",environment=\"${process.env.NODE_ENV}\"} 1`);\n  \n  // Uptime\n  metrics.push(`# HELP dreamer_ai_uptime_seconds Service uptime in seconds`);\n  metrics.push(`# TYPE dreamer_ai_uptime_seconds counter`);\n  metrics.push(`dreamer_ai_uptime_seconds ${process.uptime()}`);\n  \n  // Memory metrics\n  const memoryUsage = process.memoryUsage();\n  metrics.push(`# HELP dreamer_ai_memory_heap_used_bytes Heap memory used`);\n  metrics.push(`# TYPE dreamer_ai_memory_heap_used_bytes gauge`);\n  metrics.push(`dreamer_ai_memory_heap_used_bytes ${memoryUsage.heapUsed}`);\n  \n  metrics.push(`# HELP dreamer_ai_memory_heap_total_bytes Total heap memory`);\n  metrics.push(`# TYPE dreamer_ai_memory_heap_total_bytes gauge`);\n  metrics.push(`dreamer_ai_memory_heap_total_bytes ${memoryUsage.heapTotal}`);\n  \n  metrics.push(`# HELP dreamer_ai_memory_rss_bytes Resident set size`);\n  metrics.push(`# TYPE dreamer_ai_memory_rss_bytes gauge`);\n  metrics.push(`dreamer_ai_memory_rss_bytes ${memoryUsage.rss}`);\n  \n  // Database connection pool metrics\n  try {\n    const poolMetrics = pool.totalCount !== undefined ? {\n      total: pool.totalCount,\n      idle: pool.idleCount,\n      waiting: pool.waitingCount\n    } : { total: 0, idle: 0, waiting: 0 };\n    \n    metrics.push(`# HELP dreamer_ai_db_connections_total Total database connections`);\n    metrics.push(`# TYPE dreamer_ai_db_connections_total gauge`);\n    metrics.push(`dreamer_ai_db_connections_total ${poolMetrics.total}`);\n    \n    metrics.push(`# HELP dreamer_ai_db_connections_idle Idle database connections`);\n    metrics.push(`# TYPE dreamer_ai_db_connections_idle gauge`);\n    metrics.push(`dreamer_ai_db_connections_idle ${poolMetrics.idle}`);\n    \n    metrics.push(`# HELP dreamer_ai_db_connections_waiting Waiting database connections`);\n    metrics.push(`# TYPE dreamer_ai_db_connections_waiting gauge`);\n    metrics.push(`dreamer_ai_db_connections_waiting ${poolMetrics.waiting}`);\n  } catch (error) {\n    console.error('Failed to get database metrics:', error);\n  }\n  \n  res.set('Content-Type', 'text/plain');\n  res.send(metrics.join('\\n'));\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/leads.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":6,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":6,"endColumn":37},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":11,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":11,"endColumn":70},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":16,"column":71,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":16,"endColumn":73},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":21,"column":71,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":21,"endColumn":73},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":26,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":26,"endColumn":76}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { authenticate, authorize } = require('../middleware/auth');\n\n// Submit lead (public)\nrouter.post('/', async (req, res) => {\n  res.json({ message: 'Submit lead endpoint' });\n});\n\n// Get all leads (admin only)\nrouter.get('/', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Get leads endpoint' });\n});\n\n// Get lead by ID (admin only)\nrouter.get('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Get lead endpoint', leadId: req.params.id });\n});\n\n// Update lead status (admin only)\nrouter.put('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Update lead endpoint', leadId: req.params.id });\n});\n\n// Delete lead (admin only)\nrouter.delete('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Delete lead endpoint', leadId: req.params.id });\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/newsletter.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":18,"nodeType":"CallExpression","endLine":3,"endColumn":47,"fix":{"range":[116,116],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":4,"column":36,"nodeType":"CallExpression","endLine":4,"endColumn":64,"fix":{"range":[69,182],"text":"const { body, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":24,"nodeType":"CallExpression","endLine":5,"endColumn":39,"fix":{"range":[221,221],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur before import of `../config/database`","line":5,"column":24,"nodeType":"CallExpression","endLine":5,"endColumn":39,"fix":{"range":[69,222],"text":"const { v4: uuidv4 } = require('uuid');\nconst { pool } = require('../config/database');\nconst { body, validationResult } = require('express-validator');\n"}},{"ruleId":"import/order","severity":2,"message":"`crypto` import should occur before import of `express`","line":6,"column":16,"nodeType":"CallExpression","endLine":6,"endColumn":33}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { body, validationResult } = require('express-validator');\nconst { v4: uuidv4 } = require('uuid');\nconst crypto = require('crypto');\n\n// Subscribe to newsletter\nrouter.post('/subscribe', [\n  body('email').isEmail().normalizeEmail()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { email } = req.body;\n    const unsubscribeToken = crypto.randomBytes(32).toString('hex');\n\n    // Check if already subscribed\n    const existing = await pool.query(\n      'SELECT * FROM newsletter_subscribers WHERE email = $1',\n      [email]\n    );\n\n    if (existing.rows.length > 0) {\n      if (existing.rows[0].is_active) {\n        return res.status(400).json({ \n          error: 'This email is already subscribed' \n        });\n      } else {\n        // Reactivate subscription\n        await pool.query(\n          'UPDATE newsletter_subscribers SET is_active = true, updated_at = NOW() WHERE email = $1',\n          [email]\n        );\n      }\n    } else {\n      // New subscription\n      await pool.query(\n        `INSERT INTO newsletter_subscribers (id, email, unsubscribe_token, is_active, subscribed_at)\n         VALUES ($1, $2, $3, true, NOW())`,\n        [uuidv4(), email, unsubscribeToken]\n      );\n    }\n\n    res.json({\n      success: true,\n      message: 'Successfully subscribed to Dreamer AI Solutions newsletter'\n    });\n  } catch (error) {\n    console.error('Newsletter subscription error:', error);\n    res.status(500).json({ \n      error: 'Unable to process subscription' \n    });\n  }\n});\n\n// Unsubscribe from newsletter\nrouter.delete('/unsubscribe/:token', async (req, res) => {\n  try {\n    const { token } = req.params;\n\n    const result = await pool.query(\n      `UPDATE newsletter_subscribers \n       SET is_active = false, unsubscribed_at = NOW()\n       WHERE unsubscribe_token = $1 AND is_active = true\n       RETURNING email`,\n      [token]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ \n        error: 'Invalid unsubscribe link' \n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'You have been unsubscribed from our newsletter'\n    });\n  } catch (error) {\n    console.error('Newsletter unsubscribe error:', error);\n    res.status(500).json({ \n      error: 'Unable to process unsubscribe request' \n    });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/services.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":6,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":6,"endColumn":36},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":11,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":11,"endColumn":39},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":16,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":16,"endColumn":71},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":21,"column":71,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":21,"endColumn":73},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":26,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":26,"endColumn":76}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { authenticate, authorize } = require('../middleware/auth');\n\n// Get all services\nrouter.get('/', async (req, res) => {\n  res.json({ message: 'Services list endpoint' });\n});\n\n// Get service by ID\nrouter.get('/:id', async (req, res) => {\n  res.json({ message: 'Get service endpoint', serviceId: req.params.id });\n});\n\n// Create service (admin only)\nrouter.post('/', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Create service endpoint' });\n});\n\n// Update service (admin only)\nrouter.put('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Update service endpoint', serviceId: req.params.id });\n});\n\n// Delete service (admin only)\nrouter.delete('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Delete service endpoint', serviceId: req.params.id });\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/showcase.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateVisual' is assigned a value but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { \n  processDocument, \n  transcribeAudio, \n  generateVisual,\n  analyzeData \n} = require('../services/showcaseService');\n\n// Document analysis demo\nrouter.post('/analyze-document', async (req, res) => {\n  try {\n    const { text, type } = req.body;\n    \n    if (!text) {\n      return res.status(400).json({ error: 'Document text is required' });\n    }\n\n    const result = await processDocument(text, type);\n    \n    res.json({\n      summary: result.summary,\n      keyPoints: result.keyPoints,\n      processedBy: 'Dreamer AI Document Intelligence'\n    });\n  } catch (error) {\n    console.error('Document analysis error:', error);\n    res.status(500).json({ \n      error: 'Unable to process document at this time' \n    });\n  }\n});\n\n// Voice transcription demo\nrouter.post('/transcribe', async (req, res) => {\n  try {\n    const { audioUrl } = req.body;\n    \n    if (!audioUrl) {\n      return res.status(400).json({ error: 'Audio URL is required' });\n    }\n\n    const result = await transcribeAudio(audioUrl);\n    \n    res.json({\n      transcript: result.text,\n      confidence: result.confidence,\n      processedBy: 'Dreamer AI Voice Solutions'\n    });\n  } catch (error) {\n    console.error('Transcription error:', error);\n    res.status(500).json({ \n      error: 'Unable to process audio at this time' \n    });\n  }\n});\n\n// Data analysis demo\nrouter.post('/analyze-data', async (req, res) => {\n  try {\n    const { data, analysisType } = req.body;\n    \n    if (!data) {\n      return res.status(400).json({ error: 'Data is required' });\n    }\n\n    const result = await analyzeData(data, analysisType);\n    \n    res.json({\n      insights: result.insights,\n      patterns: result.patterns,\n      recommendations: result.recommendations,\n      processedBy: 'Dreamer AI Analytics Engine'\n    });\n  } catch (error) {\n    console.error('Data analysis error:', error);\n    res.status(500).json({ \n      error: 'Unable to analyze data at this time' \n    });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/testimonials.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":29,"nodeType":"CallExpression","endLine":4,"endColumn":58,"fix":{"range":[175,175],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`express-validator` import should occur before import of `../config/database`","line":5,"column":50,"nodeType":"CallExpression","endLine":5,"endColumn":78,"fix":{"range":[69,255],"text":"const { body, query, param, validationResult } = require('express-validator');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\n"}},{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur before import of `../config/database`","line":6,"column":24,"nodeType":"CallExpression","endLine":6,"endColumn":39,"fix":{"range":[69,295],"text":"const { v4: uuidv4 } = require('uuid');\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\n"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":21,"column":18,"nodeType":"Identifier","messageId":"error","endLine":21,"endColumn":26,"fix":{"range":[749,757],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":22,"column":19,"nodeType":"Identifier","messageId":"error","endLine":22,"endColumn":27,"fix":{"range":[798,806],"text":"Number.parseInt"}},{"ruleId":"unicorn/prefer-number-properties","severity":2,"message":"Prefer `Number.parseInt` over `parseInt`.","line":50,"column":19,"nodeType":"Identifier","messageId":"error","endLine":50,"endColumn":27,"fix":{"range":[1792,1800],"text":"Number.parseInt"}},{"ruleId":"no-shadow","severity":2,"message":"'query' is already declared in the upper scope on line 5 column 15.","line":54,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":54,"endColumn":16},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":185,"column":29,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":185,"endColumn":36,"fix":{"range":[5788,5990],"text":"for (const [key, value] of Object.entries(updates)) {\n      if (fieldMap[key]) {\n        fields.push(`${fieldMap[key]} = $${paramCount}`);\n        values.push(value);\n        paramCount++;\n      }\n    }"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":186,"column":11,"nodeType":"MemberExpression","endLine":186,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":187,"column":24,"nodeType":"MemberExpression","endLine":187,"endColumn":37},{"ruleId":"no-shadow","severity":2,"message":"'query' is already declared in the upper scope on line 5 column 15.","line":198,"column":11,"nodeType":"Identifier","messageId":"noShadow","endLine":198,"endColumn":16}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":8,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { pool } = require('../config/database');\nconst { auth, authorize } = require('../middleware/auth');\nconst { body, query, param, validationResult } = require('express-validator');\nconst { v4: uuidv4 } = require('uuid');\n\n// Get all testimonials (public - only active ones)\nrouter.get('/', [\n  query('page').optional().isInt({ min: 1 }),\n  query('limit').optional().isInt({ min: 1, max: 100 }),\n  query('isFeatured').optional().isBoolean(),\n  query('isActive').optional().isBoolean()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const offset = (page - 1) * limit;\n    \n    // Build WHERE clause\n    const conditions = [];\n    const values = [];\n    let paramCount = 1;\n\n    // Only show active testimonials to non-admin users\n    if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'super_admin')) {\n      conditions.push(`is_active = true`);\n    } else if (req.query.isActive !== undefined) {\n      conditions.push(`is_active = $${paramCount}`);\n      values.push(req.query.isActive === 'true');\n      paramCount++;\n    }\n\n    if (req.query.isFeatured !== undefined) {\n      conditions.push(`is_featured = $${paramCount}`);\n      values.push(req.query.isFeatured === 'true');\n      paramCount++;\n    }\n\n    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';\n\n    // Get total count\n    const countQuery = `SELECT COUNT(*) FROM testimonials ${whereClause}`;\n    const countResult = await pool.query(countQuery, values);\n    const total = parseInt(countResult.rows[0].count);\n\n    // Get testimonials\n    values.push(limit, offset);\n    const query = `\n      SELECT id, client_name, client_title, client_company, client_image,\n             content, rating, is_featured, is_active, created_at\n      FROM testimonials \n      ${whereClause}\n      ORDER BY is_featured DESC, created_at DESC\n      LIMIT $${paramCount} OFFSET $${paramCount + 1}\n    `;\n\n    const result = await pool.query(query, values);\n\n    res.json({\n      data: result.rows,\n      pagination: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit)\n      }\n    });\n  } catch (error) {\n    console.error('List testimonials error:', error);\n    res.status(500).json({ error: 'Unable to retrieve testimonials' });\n  }\n});\n\n// Get single testimonial\nrouter.get('/:id', [param('id').isUUID()], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { id } = req.params;\n\n    const result = await pool.query(\n      'SELECT * FROM testimonials WHERE id = $1',\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Testimonial not found' });\n    }\n\n    // Only show inactive testimonials to admins\n    const testimonial = result.rows[0];\n    if (!testimonial.is_active && \n        (!req.user || (req.user.role !== 'admin' && req.user.role !== 'super_admin'))) {\n      return res.status(404).json({ error: 'Testimonial not found' });\n    }\n\n    res.json(testimonial);\n  } catch (error) {\n    console.error('Get testimonial error:', error);\n    res.status(500).json({ error: 'Unable to retrieve testimonial' });\n  }\n});\n\n// Create new testimonial (admin only)\nrouter.post('/', [auth, authorize('admin', 'super_admin')], [\n  body('clientName').notEmpty().trim(),\n  body('content').notEmpty().trim(),\n  body('rating').optional().isInt({ min: 1, max: 5 }),\n  body('isFeatured').optional().isBoolean(),\n  body('isActive').optional().isBoolean()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const {\n      clientName, clientTitle, clientCompany, clientImage,\n      content, rating, isFeatured = false, isActive = true\n    } = req.body;\n\n    const id = uuidv4();\n\n    const result = await pool.query(\n      `INSERT INTO testimonials \n       (id, client_name, client_title, client_company, client_image,\n        content, rating, is_featured, is_active, created_by)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n       RETURNING *`,\n      [id, clientName, clientTitle, clientCompany, clientImage,\n       content, rating, isFeatured, isActive, req.user.id]\n    );\n\n    res.status(201).json(result.rows[0]);\n  } catch (error) {\n    console.error('Create testimonial error:', error);\n    res.status(500).json({ error: 'Unable to create testimonial' });\n  }\n});\n\n// Update testimonial\nrouter.put('/:id', [auth, authorize('admin', 'super_admin')], [\n  param('id').isUUID(),\n  body('clientName').optional().notEmpty().trim(),\n  body('content').optional().notEmpty().trim(),\n  body('rating').optional().isInt({ min: 1, max: 5 }),\n  body('isFeatured').optional().isBoolean(),\n  body('isActive').optional().isBoolean()\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const { id } = req.params;\n    const updates = req.body;\n\n    // Build dynamic update query\n    const fields = [];\n    const values = [];\n    let paramCount = 1;\n\n    const fieldMap = {\n      clientName: 'client_name',\n      clientTitle: 'client_title',\n      clientCompany: 'client_company',\n      clientImage: 'client_image',\n      content: 'content',\n      rating: 'rating',\n      isFeatured: 'is_featured',\n      isActive: 'is_active'\n    };\n\n    Object.entries(updates).forEach(([key, value]) => {\n      if (fieldMap[key]) {\n        fields.push(`${fieldMap[key]} = $${paramCount}`);\n        values.push(value);\n        paramCount++;\n      }\n    });\n\n    if (fields.length === 0) {\n      return res.status(400).json({ error: 'No valid fields to update' });\n    }\n\n    values.push(id);\n    const query = `UPDATE testimonials SET ${fields.join(', ')}, updated_at = NOW() \n                   WHERE id = $${paramCount} RETURNING *`;\n\n    const result = await pool.query(query, values);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Testimonial not found' });\n    }\n\n    res.json(result.rows[0]);\n  } catch (error) {\n    console.error('Update testimonial error:', error);\n    res.status(500).json({ error: 'Unable to update testimonial' });\n  }\n});\n\n// Delete testimonial\nrouter.delete('/:id', [auth, authorize('admin', 'super_admin')], [\n  param('id').isUUID()\n], async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await pool.query(\n      'DELETE FROM testimonials WHERE id = $1 RETURNING id',\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({ error: 'Testimonial not found' });\n    }\n\n    res.status(204).send();\n  } catch (error) {\n    console.error('Delete testimonial error:', error);\n    res.status(500).json({ error: 'Unable to delete testimonial' });\n  }\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/routes/users.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[35,35],"text":"\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":6,"column":68,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":6,"endColumn":70},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":11,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":11,"endColumn":53},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":16,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":16,"endColumn":53},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":21,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":21,"endColumn":76}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const express = require('express');\nconst router = express.Router();\nconst { authenticate, authorize } = require('../middleware/auth');\n\n// Get all users (admin only)\nrouter.get('/', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Users list endpoint' });\n});\n\n// Get user by ID\nrouter.get('/:id', authenticate, async (req, res) => {\n  res.json({ message: 'Get user endpoint', userId: req.params.id });\n});\n\n// Update user\nrouter.put('/:id', authenticate, async (req, res) => {\n  res.json({ message: 'Update user endpoint', userId: req.params.id });\n});\n\n// Delete user (admin only)\nrouter.delete('/:id', authenticate, authorize('admin'), async (req, res) => {\n  res.json({ message: 'Delete user endpoint', userId: req.params.id });\n});\n\nmodule.exports = router;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/server-production.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `serverProduction.js` or `ServerProduction.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"import/order","severity":2,"message":"`express` import should occur after import of `crypto`","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":35,"fix":{"range":[0,297],"text":"const cors = require('cors');\nconst compression = require('compression');\nconst helmet = require('helmet');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nconst express = require('express');\n"}},{"ruleId":"import/order","severity":2,"message":"`cors` import should occur after import of `crypto`","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[36,297],"text":"const compression = require('compression');\nconst helmet = require('helmet');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nconst cors = require('cors');\n"}},{"ruleId":"import/order","severity":2,"message":"`compression` import should occur after import of `crypto`","line":3,"column":21,"nodeType":"CallExpression","endLine":3,"endColumn":43,"fix":{"range":[66,297],"text":"const helmet = require('helmet');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nconst compression = require('compression');\n"}},{"ruleId":"import/order","severity":2,"message":"`helmet` import should occur after import of `crypto`","line":4,"column":16,"nodeType":"CallExpression","endLine":4,"endColumn":33,"fix":{"range":[110,297],"text":"const mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nconst helmet = require('helmet');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mongoSanitize' is assigned a value but never used.","line":5,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"import/order","severity":2,"message":"`express-mongo-sanitize` import should occur after import of `crypto`","line":5,"column":23,"nodeType":"CallExpression","endLine":5,"endColumn":56,"fix":{"range":[144,297],"text":"const xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nconst mongoSanitize = require('express-mongo-sanitize');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'xss' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10},{"ruleId":"import/order","severity":2,"message":"`xss-clean` import should occur after import of `crypto`","line":6,"column":13,"nodeType":"CallExpression","endLine":6,"endColumn":33,"fix":{"range":[201,297],"text":"const hpp = require('hpp');\nconst crypto = require('crypto');\nconst xss = require('xss-clean');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hpp' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":7,"column":13,"nodeType":"CallExpression","endLine":7,"endColumn":27,"fix":{"range":[262,262],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`hpp` import should occur after import of `crypto`","line":7,"column":13,"nodeType":"CallExpression","endLine":7,"endColumn":27,"fix":{"range":[235,297],"text":"const crypto = require('crypto');\nconst hpp = require('hpp');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'crypto' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":28,"column":5,"nodeType":"CallExpression","endLine":28,"endColumn":37},{"ruleId":"import/order","severity":2,"message":"`./middleware/security` import should occur after import of `./middleware/logging`","line":28,"column":5,"nodeType":"CallExpression","endLine":28,"endColumn":37,"fix":{"range":[495,936],"text":"\n// Import other middleware\nconst { errorHandler } = require('./middleware/errorHandler');\nconst { requestLogger } = require('./middleware/logging');\nconst {\n  securityHeaders,\n  cspNonce,\n  csrfProtection,\n  xssProtection,\n  sqlInjectionProtection,\n  noSQLInjectionProtection,\n  parameterPollutionProtection,\n  rateLimiter,\n  requestSizeLimit,\n  fileUploadSecurity,\n  securityLogger,\n  ipAccessControl\n} = require('./middleware/security');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'corsOptions' is assigned a value but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":14},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":38,"column":5,"nodeType":"CallExpression","endLine":38,"endColumn":39},{"ruleId":"import/order","severity":2,"message":"`./routes/users` import should occur after import of `./routes/showcase`","line":42,"column":20,"nodeType":"CallExpression","endLine":42,"endColumn":45,"fix":{"range":[1130,1479],"text":"const serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst userRoutes = require('./routes/users');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/services` import should occur after import of `./routes/contact`","line":43,"column":23,"nodeType":"CallExpression","endLine":43,"endColumn":51,"fix":{"range":[1176,1426],"text":"const bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst serviceRoutes = require('./routes/services');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/leads` import should occur after import of `./routes/contact`","line":45,"column":20,"nodeType":"CallExpression","endLine":45,"endColumn":45,"fix":{"range":[1280,1426],"text":"const healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst leadRoutes = require('./routes/leads');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/health` import should occur after import of `./routes/contact`","line":46,"column":22,"nodeType":"CallExpression","endLine":46,"endColumn":48,"fix":{"range":[1326,1426],"text":"const contactRoutes = require('./routes/contact');\nconst healthRoutes = require('./routes/health');\n"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":51,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":51,"endColumn":12,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1506,1560],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"object-shorthand","severity":2,"message":"Expected method shorthand.","line":125,"column":3,"nodeType":"Property","messageId":"expectedMethodShorthand","endLine":140,"endColumn":4,"fix":{"range":[3577,4123],"text":"origin (origin, callback) {\n    const allowedOrigins = process.env.ALLOWED_ORIGINS \n      ? process.env.ALLOWED_ORIGINS.split(',').map(o => o.trim())\n      : ['http://localhost:3000'];\n    \n    // Allow requests with no origin (mobile apps, Postman, etc) in development\n    if (!origin && process.env.NODE_ENV !== 'production') {\n      return callback(null, true);\n    }\n    \n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }"}},{"ruleId":"unicorn/prefer-includes","severity":2,"message":"Use `.includes()`, rather than `.indexOf()`, when checking for existence.","line":135,"column":35,"nodeType":"Identifier","messageId":"prefer-includes","endLine":135,"endColumn":42,"fix":{"range":[3982,4019],"text":"allowedOrigins.includes(origin)"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":171,"column":5,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":171,"endColumn":8},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":277,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7964,8031],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":278,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8034,8089],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":279,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8092,8172],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":280,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":280,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8175,8288],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":289,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":289,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8516,8583],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":292,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8614,8648],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":298,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8764,8806],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":328,"column":5,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":328,"endColumn":19,"fix":{"range":[9720,9734],"text":"reason"}}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst helmet = require('helmet');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss-clean');\nconst hpp = require('hpp');\nconst crypto = require('crypto');\nrequire('dotenv').config({ path: process.env.NODE_ENV === 'production' ? '.env.production' : '.env' });\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Import security middleware\nconst {\n  securityHeaders,\n  cspNonce,\n  csrfProtection,\n  xssProtection,\n  sqlInjectionProtection,\n  noSQLInjectionProtection,\n  parameterPollutionProtection,\n  rateLimiter,\n  requestSizeLimit,\n  fileUploadSecurity,\n  securityLogger,\n  ipAccessControl\n} = require('./middleware/security');\n\n// Import other middleware\nconst { errorHandler } = require('./middleware/errorHandler');\nconst { requestLogger } = require('./middleware/logging');\nconst { \n  requestIdMiddleware, \n  responseTimeMiddleware,\n  sanitizeInput,\n  corsOptions \n} = require('./middleware/validation');\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\n\n// Security Configuration\nconsole.log('🔒 Initializing security middleware...');\n\n// Basic security middleware\napp.use(requestIdMiddleware);\napp.use(responseTimeMiddleware);\n\n// IP-based access control (if configured)\nif (process.env.IP_WHITELIST || process.env.IP_BLACKLIST) {\n  app.use(ipAccessControl());\n}\n\n// Security headers with CSP nonce\napp.use(cspNonce);\napp.use(securityHeaders());\n\n// Enhanced Helmet configuration for production\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\n        \"'self'\",\n        \"'nonce-{NONCE}'\",\n        \"https://apis.google.com\",\n        \"https://www.google-analytics.com\"\n      ],\n      styleSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\", // Consider replacing with nonces in production\n        \"https://fonts.googleapis.com\"\n      ],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\"],\n      connectSrc: [\n        \"'self'\",\n        \"https://api.dreamerai.io\",\n        \"wss://api.dreamerai.io\",\n        \"https://*.google-analytics.com\"\n      ],\n      mediaSrc: [\"'self'\", \"blob:\"],\n      objectSrc: [\"'none'\"],\n      childSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n      workerSrc: [\"'self'\", \"blob:\"],\n      frameAncestors: [\"'none'\"],\n      formAction: [\"'self'\"],\n      upgradeInsecureRequests: [],\n      blockAllMixedContent: [],\n      baseUri: [\"'self'\"],\n      reportUri: \"/api/v1/security/csp-report\"\n    },\n    reportOnly: false\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  },\n  crossOriginEmbedderPolicy: true,\n  crossOriginOpenerPolicy: { policy: \"same-origin\" },\n  crossOriginResourcePolicy: { policy: \"same-origin\" },\n  dnsPrefetchControl: { allow: false },\n  frameguard: { action: 'deny' },\n  hidePoweredBy: true,\n  ieNoOpen: true,\n  noSniff: true,\n  originAgentCluster: true,\n  permittedCrossDomainPolicies: false,\n  referrerPolicy: { policy: \"strict-origin-when-cross-origin\" },\n  xssFilter: true\n}));\n\n// CORS configuration with production origins\nconst corsConfig = {\n  origin: function (origin, callback) {\n    const allowedOrigins = process.env.ALLOWED_ORIGINS \n      ? process.env.ALLOWED_ORIGINS.split(',').map(o => o.trim())\n      : ['http://localhost:3000'];\n    \n    // Allow requests with no origin (mobile apps, Postman, etc) in development\n    if (!origin && process.env.NODE_ENV !== 'production') {\n      return callback(null, true);\n    }\n    \n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-API-Key', 'X-Session-ID', 'X-CSRF-Token'],\n  exposedHeaders: ['X-Request-ID', 'X-Response-Time', 'X-RateLimit-Limit', 'X-RateLimit-Remaining'],\n  maxAge: 86400, // 24 hours\n  optionsSuccessStatus: 200\n};\napp.use(cors(corsConfig));\n\n// Trust proxy for accurate IP addresses\napp.set('trust proxy', true);\n\n// Disable X-Powered-By header\napp.disable('x-powered-by');\n\n// Compression with security considerations\napp.use(compression({\n  filter: (req, res) => {\n    if (req.headers['x-no-compression']) {\n      return false;\n    }\n    return compression.filter(req, res);\n  },\n  level: 6\n}));\n\n// Body parsing with size limits\napp.use(express.json({ \n  limit: requestSizeLimit.json,\n  verify: (req, res, buf) => {\n    req.rawBody = buf.toString('utf8');\n  }\n}));\napp.use(express.urlencoded({ \n  extended: true, \n  limit: requestSizeLimit.urlencoded,\n  parameterLimit: 1000\n}));\n\n// Security middleware stack\napp.use(sanitizeInput);\napp.use(xssProtection());\napp.use(sqlInjectionProtection());\napp.use(noSQLInjectionProtection);\napp.use(parameterPollutionProtection);\napp.use(fileUploadSecurity());\n\n// Request logging with security context\napp.use(requestLogger);\n\n// Health check endpoints (no auth required)\napp.use('/health', healthRoutes);\n\n// CSP violation reporting endpoint\napp.post('/api/v1/security/csp-report', express.json({ type: 'application/csp-report' }), (req, res) => {\n  const report = req.body['csp-report'];\n  securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n    type: 'csp_violation',\n    report,\n    ip: req.ip,\n    userAgent: req.get('user-agent')\n  });\n  res.status(204).end();\n});\n\n// API versioning\napp.get('/api/version', (req, res) => {\n  res.json({\n    version: process.env.API_VERSION || '1.0.0',\n    api: 'Dreamer AI Solutions API',\n    environment: process.env.NODE_ENV,\n    documentation: '/api/v1/docs'\n  });\n});\n\n// Apply general rate limiting to all API routes\napp.use('/api/', rateLimiter.middleware('api'));\n\n// Apply CSRF protection to state-changing operations\napp.use('/api/', (req, res, next) => {\n  if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(req.method)) {\n    return csrfProtection(req, res, next);\n  }\n  next();\n});\n\n// Mount routes with specific security policies\napp.use('/api/auth', rateLimiter.middleware('auth'), authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/services', serviceRoutes);\napp.use('/api/bookings', bookingRoutes);\napp.use('/api/leads', leadRoutes);\napp.use('/api/contact', contactRoutes);\napp.use('/api/showcase', showcaseRoutes);\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({\n    type: 'https://api.dreamerai.io/errors/not-found',\n    title: 'Not Found',\n    status: 404,\n    detail: 'The requested resource was not found',\n    instance: req.originalUrl,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Error handling middleware (must be last)\napp.use((err, req, res, next) => {\n  // Log security-relevant errors\n  if (err.name === 'UnauthorizedError' || err.status === 401) {\n    securityLogger.log(securityLogger.events.AUTH_FAILURE, {\n      error: err.message,\n      ip: req.ip,\n      url: req.originalUrl\n    });\n  } else if (err.type === 'entity.parse.failed') {\n    securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n      error: 'Invalid JSON payload',\n      ip: req.ip,\n      url: req.originalUrl\n    });\n  } else if (err.message && err.message.includes('CORS')) {\n    securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n      error: 'CORS violation',\n      origin: req.get('origin'),\n      ip: req.ip,\n      url: req.originalUrl\n    });\n  }\n  \n  errorHandler(err, req, res, next);\n});\n\n// Start server\nconst server = app.listen(PORT, () => {\n  console.log(`🚀 Secure Dreamer AI server running on port ${PORT}`);\n  console.log(`📝 Environment: ${process.env.NODE_ENV}`);\n  console.log(`🔗 API URL: ${process.env.API_URL || `http://localhost:${PORT}`}`);\n  console.log(`🛡️  Security features: ${process.env.NODE_ENV === 'production' ? 'ENABLED' : 'DEVELOPMENT MODE'}`);\n  \n  if (process.env.NODE_ENV !== 'production') {\n    console.warn('⚠️  WARNING: Not running in production mode. Some security features may be disabled.');\n  }\n});\n\n// Graceful shutdown\nconst gracefulShutdown = (signal) => {\n  console.log(`\\n${signal} received. Starting graceful shutdown...`);\n  \n  server.close(() => {\n    console.log('HTTP server closed');\n    \n    // Close database connections\n    // Close Redis connections\n    // Clean up any other resources\n    \n    console.log('Graceful shutdown complete');\n    process.exit(0);\n  });\n  \n  // Force shutdown after 30 seconds\n  setTimeout(() => {\n    console.error('Could not close connections in time, forcefully shutting down');\n    process.exit(1);\n  }, 30000);\n};\n\nprocess.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\nprocess.on('SIGINT', () => gracefulShutdown('SIGINT'));\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught Exception:', err);\n  securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n    error: 'Uncaught exception',\n    message: err.message,\n    stack: err.stack\n  });\n  gracefulShutdown('UNCAUGHT_EXCEPTION');\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n    error: 'Unhandled rejection',\n    reason: reason\n  });\n});\n\nmodule.exports = app;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/server-secure.js","messages":[{"ruleId":"unicorn/filename-case","severity":2,"message":"Filename is not in camel case or pascal case. Rename it to `serverSecure.js` or `ServerSecure.js`.","line":1,"column":1,"nodeType":null,"messageId":"filename-case"},{"ruleId":"import/order","severity":2,"message":"`cors` import should occur before import of `express`","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[0,66],"text":"const cors = require('cors');\nconst express = require('express');\n"}},{"ruleId":"import/order","severity":2,"message":"`compression` import should occur before import of `express`","line":3,"column":21,"nodeType":"CallExpression","endLine":3,"endColumn":43,"fix":{"range":[0,110],"text":"const compression = require('compression');\nconst express = require('express');\nconst cors = require('cors');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":5,"column":14,"nodeType":"CallExpression","endLine":5,"endColumn":31,"fix":{"range":[190,190],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`fs` import should occur before import of `express`","line":6,"column":12,"nodeType":"CallExpression","endLine":6,"endColumn":25,"fix":{"range":[0,217],"text":"const fs = require('fs');\nconst express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\n"}},{"ruleId":"import/order","severity":2,"message":"`path` import should occur before import of `express`","line":7,"column":14,"nodeType":"CallExpression","endLine":7,"endColumn":29,"fix":{"range":[0,247],"text":"const path = require('path');\nconst express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst fs = require('fs');\n"}},{"ruleId":"import/order","severity":2,"message":"`https` import should occur before import of `express`","line":8,"column":15,"nodeType":"CallExpression","endLine":8,"endColumn":31,"fix":{"range":[0,279],"text":"const https = require('https');\nconst express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst fs = require('fs');\nconst path = require('path');\n"}},{"ruleId":"import/order","severity":2,"message":"`tls` import should occur before import of `express`","line":9,"column":13,"nodeType":"CallExpression","endLine":9,"endColumn":27,"fix":{"range":[0,307],"text":"const tls = require('tls');\nconst express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst fs = require('fs');\nconst path = require('path');\nconst https = require('https');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":31,"column":5,"nodeType":"CallExpression","endLine":31,"endColumn":37},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":41,"column":5,"nodeType":"CallExpression","endLine":41,"endColumn":39},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":49,"column":5,"nodeType":"CallExpression","endLine":49,"endColumn":41},{"ruleId":"import/order","severity":2,"message":"`./middleware/authEnhanced` import should occur before import of `./middleware/security`","line":49,"column":5,"nodeType":"CallExpression","endLine":49,"endColumn":41,"fix":{"range":[489,1148],"text":"const {\n  authenticate,\n  requireMFA,\n  deviceTrust,\n  authRateLimit\n} = require('./middleware/authEnhanced');\nconst {\n  securityHeaders,\n  cspNonce,\n  csrfProtection,\n  xssProtection,\n  sqlInjectionProtection,\n  noSQLInjectionProtection,\n  parameterPollutionProtection,\n  rateLimiter,\n  requestSizeLimit,\n  fileUploadSecurity,\n  securityLogger,\n  ipAccessControl,\n  apiVersioning\n} = require('./middleware/security');\n\n// Import enhanced validation middleware\nconst {\n  errorHandler,\n  notFoundHandler,\n  requestIdMiddleware,\n  responseTimeMiddleware,\n  sanitizeInput,\n  corsOptions\n} = require('./middleware/validation');\n\n// Import enhanced authentication\n"}},{"ruleId":"no-shadow","severity":2,"message":"'app' is already declared in the upper scope on line 12 column 7.","line":52,"column":38,"nodeType":"Identifier","messageId":"noShadow","endLine":52,"endColumn":41},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2731,2768],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":118,"column":7,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":118,"endColumn":10},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":167,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":167,"endColumn":45},{"ruleId":"import/order","severity":2,"message":"`./routes/contact` import should occur before import of `./routes/showcase`","line":218,"column":23,"nodeType":"CallExpression","endLine":218,"endColumn":50,"fix":{"range":[5439,5543],"text":"const contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\n"}},{"ruleId":"no-shadow","severity":2,"message":"'path' is already declared in the upper scope on line 7 column 7.","line":269,"column":23,"nodeType":"Identifier","messageId":"noShadow","endLine":269,"endColumn":27},{"ruleId":"unicorn/prefer-regexp-test","severity":2,"message":"Prefer `RegExp#test(…)` over `String#match(…)`.","line":272,"column":18,"nodeType":"CallExpression","messageId":"string-match","endLine":272,"endColumn":43,"fix":{"range":[7489,7513],"text":"/\\.(js|css)$/.test(path"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":304,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8311,8371],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":308,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8438,8472],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":334,"column":10,"nodeType":"CallExpression","endLine":334,"endColumn":51},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":335,"column":11,"nodeType":"CallExpression","endLine":335,"endColumn":53},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found readFileSync from package \"fs\" with non literal argument at index 0","line":336,"column":35,"nodeType":"CallExpression","endLine":336,"endColumn":75},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":365,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10013,10073],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":370,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":370,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10147,10228],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":371,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10233,10311],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":372,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10316,10368],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":377,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10457,10525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":378,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":378,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10530,10601],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":379,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10606,10675],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cpuUsage' is assigned a value but never used.","line":391,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":391,"endColumn":17}],"suppressedMessages":[],"errorCount":29,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":10,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst compression = require('compression');\nconst swaggerUi = require('swagger-ui-express');\nconst YAML = require('yamljs');\nconst fs = require('fs');\nconst path = require('path');\nconst https = require('https');\nconst tls = require('tls');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst HTTPS_PORT = process.env.HTTPS_PORT || 5443;\n\n// Import enhanced security middleware\nconst {\n  securityHeaders,\n  cspNonce,\n  csrfProtection,\n  xssProtection,\n  sqlInjectionProtection,\n  noSQLInjectionProtection,\n  parameterPollutionProtection,\n  rateLimiter,\n  requestSizeLimit,\n  fileUploadSecurity,\n  securityLogger,\n  ipAccessControl,\n  apiVersioning\n} = require('./middleware/security');\n\n// Import enhanced validation middleware\nconst {\n  errorHandler,\n  notFoundHandler,\n  requestIdMiddleware,\n  responseTimeMiddleware,\n  sanitizeInput,\n  corsOptions\n} = require('./middleware/validation');\n\n// Import enhanced authentication\nconst {\n  authenticate,\n  requireMFA,\n  deviceTrust,\n  authRateLimit\n} = require('./middleware/authEnhanced');\n\n// Security configuration\nconst configureSecurityMiddleware = (app) => {\n  // Basic security\n  app.use(requestIdMiddleware);\n  app.use(responseTimeMiddleware);\n  app.use(ipAccessControl());\n  \n  // Security headers with CSP nonce\n  app.use(cspNonce);\n  app.use(securityHeaders());\n  \n  // CORS with security\n  app.use(cors({\n    ...corsOptions,\n    credentials: true,\n    optionsSuccessStatus: 200\n  }));\n  \n  // Compression with security considerations\n  app.use(compression({\n    filter: (req, res) => {\n      // Don't compress responses with no-transform directive\n      if (req.headers['cache-control'] && req.headers['cache-control'].includes('no-transform')) {\n        return false;\n      }\n      return compression.filter(req, res);\n    },\n    level: 6 // Balance between compression and CPU usage\n  }));\n  \n  // Request logging with security context\n  app.use((req, res, next) => {\n    const startTime = Date.now();\n    \n    res.on('finish', () => {\n      const duration = Date.now() - startTime;\n      const logData = {\n        timestamp: new Date().toISOString(),\n        method: req.method,\n        url: req.originalUrl,\n        status: res.statusCode,\n        duration,\n        ip: req.ip,\n        userAgent: req.get('user-agent'),\n        requestId: req.id,\n        userId: req.user?.id\n      };\n      \n      // Log security-relevant events\n      if (res.statusCode >= 400) {\n        securityLogger.log(\n          res.statusCode === 401 ? securityLogger.events.AUTH_FAILURE : securityLogger.events.SUSPICIOUS_ACTIVITY,\n          logData\n        );\n      }\n      \n      console.log(JSON.stringify(logData));\n    });\n    \n    next();\n  });\n  \n  // Body parsing with security limits\n  app.use(express.json({ \n    limit: requestSizeLimit.json,\n    verify: (req, res, buf) => {\n      // Store raw body for signature verification\n      req.rawBody = buf.toString('utf8');\n    }\n  }));\n  \n  app.use(express.urlencoded({ \n    extended: true, \n    limit: requestSizeLimit.urlencoded,\n    parameterLimit: 1000 // Prevent parameter pollution\n  }));\n  \n  app.use(express.raw({ \n    limit: requestSizeLimit.raw,\n    type: 'application/octet-stream'\n  }));\n  \n  // Security middleware stack\n  app.use(sanitizeInput);\n  app.use(xssProtection());\n  app.use(sqlInjectionProtection());\n  app.use(noSQLInjectionProtection);\n  app.use(parameterPollutionProtection);\n  \n  // Trust proxy for accurate IP addresses\n  app.set('trust proxy', true);\n  \n  // Disable X-Powered-By header\n  app.disable('x-powered-by');\n  \n  // File upload security\n  app.use(fileUploadSecurity());\n};\n\n// Apply security middleware\nconfigureSecurityMiddleware(app);\n\n// API versioning\napp.use('/api/:version', apiVersioning());\n\n// Health check endpoints (no auth required)\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    service: 'Dreamer AI Solutions Backend',\n    version: process.env.API_VERSION || '1.0.0',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\napp.get('/health/ready', async (req, res) => {\n  try {\n    // Check critical dependencies\n    const checks = {\n      database: 'ok', // Implement actual DB check\n      redis: 'ok', // Implement actual Redis check\n      encryption: 'ok' // Verify encryption service\n    };\n    \n    res.json({\n      status: 'ready',\n      checks,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    res.status(503).json({\n      status: 'not ready',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Security report endpoint\napp.post('/api/v1/security/csp-report', express.json({ type: 'application/csp-report' }), (req, res) => {\n  const report = req.body['csp-report'];\n  securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n    type: 'csp_violation',\n    report\n  });\n  res.status(204).end();\n});\n\n// API v1 router with security\nconst apiV1 = express.Router();\n\n// Apply general rate limiting\napiV1.use(rateLimiter.middleware('api'));\n\n// CSRF protection for state-changing operations\napiV1.use((req, res, next) => {\n  if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(req.method)) {\n    return csrfProtection(req, res, next);\n  }\n  next();\n});\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst chatRoutes = require('./routes/chat');\nconst showcaseRoutes = require('./routes/showcase');\nconst contactRoutes = require('./routes/contact');\n\n// API Documentation with security\nconst swaggerDocument = YAML.load(path.join(__dirname, 'openapi.yaml'));\napiV1.use('/docs', authenticate, swaggerUi.serve);\napiV1.get('/docs', authenticate, swaggerUi.setup(swaggerDocument, {\n  customCss: '.swagger-ui .topbar { display: none }',\n  customSiteTitle: 'Dreamer AI Solutions API Documentation',\n  swaggerOptions: {\n    persistAuthorization: true,\n    displayRequestDuration: true,\n    filter: true,\n    showExtensions: true,\n    showCommonExtensions: true\n  }\n}));\n\n// OpenAPI spec endpoints (require authentication)\napiV1.get('/openapi.yaml', authenticate, (req, res) => {\n  res.setHeader('Content-Type', 'application/x-yaml');\n  res.sendFile(path.join(__dirname, 'openapi.yaml'));\n});\n\napiV1.get('/openapi.json', authenticate, (req, res) => {\n  res.json(swaggerDocument);\n});\n\n// API routes with specific security policies\napiV1.use('/auth', authRateLimit, authRoutes);\napiV1.use('/chat', authenticate, deviceTrust, rateLimiter.middleware('ai'), chatRoutes);\napiV1.use('/showcase', rateLimiter.middleware('api'), showcaseRoutes);\napiV1.use('/contact', authenticate, rateLimiter.middleware('api'), contactRoutes);\n\n// Admin routes with MFA\napiV1.use('/admin', authenticate, requireMFA, require('./routes/admin'));\n\n// Mount API v1\napp.use('/api/v1', apiV1);\n\n// Legacy API redirect with deprecation warning\napp.use('/api/:endpoint', (req, res) => {\n  res.setHeader('X-API-Deprecation-Warning', 'Legacy endpoints are deprecated. Use /api/v1 instead.');\n  res.redirect(301, `/api/v1/${req.params.endpoint}${req.url}`);\n});\n\n// Static file serving with security\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../frontend/build'), {\n    maxAge: '1d',\n    etag: true,\n    lastModified: true,\n    setHeaders: (res, path) => {\n      if (path.endsWith('.html')) {\n        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n      } else if (path.match(/\\.(js|css)$/)) {\n        res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');\n      }\n    }\n  }));\n}\n\n// 404 handler\napp.use(notFoundHandler);\n\n// Global error handler with security considerations\napp.use((err, req, res, next) => {\n  // Log security-relevant errors\n  if (err.name === 'UnauthorizedError' || err.status === 401) {\n    securityLogger.log(securityLogger.events.AUTH_FAILURE, {\n      error: err.message,\n      ip: req.ip,\n      url: req.originalUrl\n    });\n  } else if (err.type === 'entity.parse.failed') {\n    securityLogger.log(securityLogger.events.SUSPICIOUS_ACTIVITY, {\n      error: 'Invalid JSON payload',\n      ip: req.ip,\n      url: req.originalUrl\n    });\n  }\n  \n  errorHandler(err, req, res, next);\n});\n\n// Graceful shutdown handler\nconst gracefulShutdown = () => {\n  console.log('SIGTERM signal received: closing HTTP server');\n  \n  // Stop accepting new connections\n  server.close(() => {\n    console.log('HTTP server closed');\n    \n    // Close database connections\n    // db.close();\n    \n    // Close Redis connections\n    // redis.quit();\n    \n    process.exit(0);\n  });\n  \n  // Force shutdown after 30 seconds\n  setTimeout(() => {\n    console.error('Could not close connections in time, forcefully shutting down');\n    process.exit(1);\n  }, 30000);\n};\n\nprocess.on('SIGTERM', gracefulShutdown);\nprocess.on('SIGINT', gracefulShutdown);\n\n// HTTPS configuration for production\nlet server;\nif (process.env.NODE_ENV === 'production' && process.env.ENABLE_HTTPS === 'true') {\n  // TLS configuration\n  const tlsOptions = {\n    key: fs.readFileSync(process.env.TLS_KEY_PATH),\n    cert: fs.readFileSync(process.env.TLS_CERT_PATH),\n    ca: process.env.TLS_CA_PATH ? fs.readFileSync(process.env.TLS_CA_PATH) : undefined,\n    \n    // Security settings\n    secureProtocol: 'TLSv1_2_method',\n    ciphers: [\n      'ECDHE-RSA-AES128-GCM-SHA256',\n      'ECDHE-RSA-AES256-GCM-SHA384',\n      'ECDHE-RSA-AES128-SHA256',\n      'ECDHE-RSA-AES256-SHA384'\n    ].join(':'),\n    honorCipherOrder: true,\n    \n    // Disable insecure protocols\n    secureOptions: \n      tls.constants.SSL_OP_NO_SSLv2 |\n      tls.constants.SSL_OP_NO_SSLv3 |\n      tls.constants.SSL_OP_NO_TLSv1 |\n      tls.constants.SSL_OP_NO_TLSv1_1\n  };\n  \n  // Create HTTPS server\n  server = https.createServer(tlsOptions, app);\n  \n  // Redirect HTTP to HTTPS\n  const httpApp = express();\n  httpApp.use((req, res) => {\n    res.redirect(301, `https://${req.headers.host}${req.url}`);\n  });\n  httpApp.listen(PORT, () => {\n    console.log(`HTTP redirect server running on port ${PORT}`);\n  });\n  \n  // Start HTTPS server\n  server.listen(HTTPS_PORT, () => {\n    console.log(`Secure Dreamer AI Solutions backend running on port ${HTTPS_PORT}`);\n    console.log(`API Documentation: https://localhost:${HTTPS_PORT}/api/v1/docs`);\n    console.log(`Environment: ${process.env.NODE_ENV}`);\n  });\n} else {\n  // HTTP server for development\n  server = app.listen(PORT, () => {\n    console.log(`Dreamer AI Solutions backend running on port ${PORT}`);\n    console.log(`API Documentation: http://localhost:${PORT}/api/v1/docs`);\n    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n    \n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('WARNING: Running in development mode without HTTPS');\n    }\n  });\n}\n\n// Security monitoring\nsetInterval(() => {\n  // Monitor server health\n  const memoryUsage = process.memoryUsage();\n  const cpuUsage = process.cpuUsage();\n  \n  if (memoryUsage.heapUsed / memoryUsage.heapTotal > 0.9) {\n    console.warn('High memory usage detected:', memoryUsage);\n  }\n  \n  // Additional monitoring can be added here\n}, 60000); // Check every minute\n\nmodule.exports = app;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/server.js","messages":[{"ruleId":"import/order","severity":2,"message":"`cors` import should occur before import of `express`","line":2,"column":14,"nodeType":"CallExpression","endLine":2,"endColumn":29,"fix":{"range":[0,66],"text":"const cors = require('cors');\nconst express = require('express');\n"}},{"ruleId":"import/order","severity":2,"message":"`compression` import should occur before import of `express`","line":4,"column":21,"nodeType":"CallExpression","endLine":4,"endColumn":43,"fix":{"range":[0,144],"text":"const compression = require('compression');\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\n"}},{"ruleId":"import/order","severity":2,"message":"`express-rate-limit` import should occur before import of `helmet`","line":5,"column":23,"nodeType":"CallExpression","endLine":5,"endColumn":52,"fix":{"range":[66,197],"text":"const { rateLimit } = require('express-rate-limit');\nconst helmet = require('helmet');\nconst compression = require('compression');\n"}},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":10,"column":27,"nodeType":"CallExpression","endLine":10,"endColumn":58},{"ruleId":"import/order","severity":2,"message":"`./routes/services` import should occur before import of `./routes/users`","line":15,"column":23,"nodeType":"CallExpression","endLine":15,"endColumn":51,"fix":{"range":[432,530],"text":"const serviceRoutes = require('./routes/services');\nconst userRoutes = require('./routes/users');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/bookings` import should occur before import of `./routes/users`","line":16,"column":23,"nodeType":"CallExpression","endLine":16,"endColumn":51,"fix":{"range":[432,582],"text":"const bookingRoutes = require('./routes/bookings');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/leads` import should occur before import of `./routes/users`","line":17,"column":20,"nodeType":"CallExpression","endLine":17,"endColumn":45,"fix":{"range":[432,628],"text":"const leadRoutes = require('./routes/leads');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/health` import should occur before import of `./routes/users`","line":18,"column":22,"nodeType":"CallExpression","endLine":18,"endColumn":48,"fix":{"range":[432,677],"text":"const healthRoutes = require('./routes/health');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/contact` import should occur before import of `./routes/users`","line":19,"column":23,"nodeType":"CallExpression","endLine":19,"endColumn":50,"fix":{"range":[432,728],"text":"const contactRoutes = require('./routes/contact');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/showcase` import should occur before import of `./routes/users`","line":20,"column":24,"nodeType":"CallExpression","endLine":20,"endColumn":52,"fix":{"range":[432,781],"text":"const showcaseRoutes = require('./routes/showcase');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/newsletter` import should occur before import of `./routes/users`","line":21,"column":26,"nodeType":"CallExpression","endLine":21,"endColumn":56,"fix":{"range":[432,838],"text":"const newsletterRoutes = require('./routes/newsletter');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/case-studies` import should occur before import of `./routes/users`","line":22,"column":27,"nodeType":"CallExpression","endLine":22,"endColumn":59,"fix":{"range":[432,898],"text":"const caseStudiesRoutes = require('./routes/case-studies');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/testimonials` import should occur before import of `./routes/users`","line":23,"column":28,"nodeType":"CallExpression","endLine":23,"endColumn":60,"fix":{"range":[432,959],"text":"const testimonialsRoutes = require('./routes/testimonials');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\nconst caseStudiesRoutes = require('./routes/case-studies');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/chat` import should occur before import of `./routes/users`","line":24,"column":20,"nodeType":"CallExpression","endLine":24,"endColumn":44,"fix":{"range":[432,1004],"text":"const chatRoutes = require('./routes/chat');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\nconst caseStudiesRoutes = require('./routes/case-studies');\nconst testimonialsRoutes = require('./routes/testimonials');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/analytics` import should occur before import of `./routes/auth`","line":25,"column":25,"nodeType":"CallExpression","endLine":25,"endColumn":54,"fix":{"range":[387,1059],"text":"const analyticsRoutes = require('./routes/analytics');\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\nconst caseStudiesRoutes = require('./routes/case-studies');\nconst testimonialsRoutes = require('./routes/testimonials');\nconst chatRoutes = require('./routes/chat');\n"}},{"ruleId":"import/order","severity":2,"message":"`./routes/admin` import should occur before import of `./routes/auth`","line":26,"column":21,"nodeType":"CallExpression","endLine":26,"endColumn":46,"fix":{"range":[387,1106],"text":"const adminRoutes = require('./routes/admin');\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\nconst caseStudiesRoutes = require('./routes/case-studies');\nconst testimonialsRoutes = require('./routes/testimonials');\nconst chatRoutes = require('./routes/chat');\nconst analyticsRoutes = require('./routes/analytics');\n"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected method shorthand.","line":51,"column":3,"nodeType":"Property","messageId":"expectedMethodShorthand","endLine":58,"endColumn":4,"fix":{"range":[1631,1925],"text":"origin (origin, callback) {\n    const allowedOrigins = (process.env.ALLOWED_ORIGINS || 'http://localhost:3000').split(',');\n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }"}},{"ruleId":"unicorn/prefer-includes","severity":2,"message":"Use `.includes()`, rather than `.indexOf()`, when checking for existence.","line":53,"column":35,"nodeType":"Identifier","messageId":"prefer-includes","endLine":53,"endColumn":42,"fix":{"range":[1784,1821],"text":"allowedOrigins.includes(origin)"}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":135,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3875,3924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":136,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3927,3982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":137,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3985,4037],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":142,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4096,4157],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":144,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4185,4214],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":150,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4278,4338],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":152,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4366,4395],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":17,"fixableWarningCount":0,"source":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst { rateLimit } = require('express-rate-limit');\nrequire('dotenv').config();\n\n// Import middleware\nconst { errorHandler } = require('./middleware/errorHandler');\nconst { requestLogger } = require('./middleware/logging');\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst serviceRoutes = require('./routes/services');\nconst bookingRoutes = require('./routes/bookings');\nconst leadRoutes = require('./routes/leads');\nconst healthRoutes = require('./routes/health');\nconst contactRoutes = require('./routes/contact');\nconst showcaseRoutes = require('./routes/showcase');\nconst newsletterRoutes = require('./routes/newsletter');\nconst caseStudiesRoutes = require('./routes/case-studies');\nconst testimonialsRoutes = require('./routes/testimonials');\nconst chatRoutes = require('./routes/chat');\nconst analyticsRoutes = require('./routes/analytics');\nconst adminRoutes = require('./routes/admin');\n\n// Create Express app\nconst app = express();\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n    },\n  },\n  crossOriginEmbedderPolicy: false,\n}));\n\n// CORS configuration\nconst corsOptions = {\n  origin: function (origin, callback) {\n    const allowedOrigins = (process.env.ALLOWED_ORIGINS || 'http://localhost:3000').split(',');\n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  optionsSuccessStatus: 200\n};\napp.use(cors(corsOptions));\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Compression\napp.use(compression());\n\n// Request logging\napp.use(requestLogger);\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\napp.use('/api/', limiter);\n\n// Stricter rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 5,\n  skipSuccessfulRequests: true,\n});\napp.use('/api/auth/login', authLimiter);\napp.use('/api/auth/register', authLimiter);\n\n// Health check routes\napp.use('/health', healthRoutes);\n\n// API version endpoint\napp.get('/api/version', (req, res) => {\n  res.json({\n    version: '1.0.0',\n    api: 'Dreamer AI Solutions API',\n    documentation: '/api/docs'\n  });\n});\n\n// Mount routes\napp.use('/api/auth', authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/services', serviceRoutes);\napp.use('/api/bookings', bookingRoutes);\napp.use('/api/leads', leadRoutes);\napp.use('/api/contact', contactRoutes);\napp.use('/api/showcase', showcaseRoutes);\napp.use('/api/newsletter', newsletterRoutes);\napp.use('/api/case-studies', caseStudiesRoutes);\napp.use('/api/testimonials', testimonialsRoutes);\napp.use('/api/chat', chatRoutes);\napp.use('/api/analytics', analyticsRoutes);\napp.use('/api/admin', adminRoutes);\n\n// 404 handler\napp.use((req, res) => {\n  res.status(404).json({\n    error: 'Not Found',\n    message: 'The requested resource was not found',\n    path: req.path\n  });\n});\n\n// Error handling middleware (must be last)\napp.use(errorHandler);\n\n// Start server\nconst PORT = process.env.PORT || 3001;\nconst server = app.listen(PORT, () => {\n  console.log(`🚀 Server running on port ${PORT}`);\n  console.log(`📝 Environment: ${process.env.NODE_ENV}`);\n  console.log(`🔗 API URL: http://localhost:${PORT}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received. Shutting down gracefully...');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received. Shutting down gracefully...');\n  server.close(() => {\n    console.log('Server closed');\n    process.exit(0);\n  });\n});\n\nmodule.exports = app;","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/services/showcaseService.js","messages":[{"ruleId":"import/order","severity":2,"message":"`@anthropic-ai/sdk` import should occur before import of `openai`","line":2,"column":19,"nodeType":"CallExpression","endLine":2,"endColumn":47,"fix":{"range":[0,82],"text":"const Anthropic = require('@anthropic-ai/sdk');\nconst OpenAI = require('openai');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'anthropic' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":21,"column":25,"nodeType":"CallExpression","messageId":"substring","endLine":21,"endColumn":48,"fix":{"range":[575,584],"text":"slice"}},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":29,"column":11,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":29,"endColumn":56,"fix":{"range":[782,827],"text":"{content} = response.choices[0].message"}},{"ruleId":"require-await","severity":2,"message":"Async function 'transcribeAudio' has no 'await' expression.","line":47,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":47,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'audioUrl' is defined but never used. Allowed unused args must match /^_/u.","line":47,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":40},{"ruleId":"no-unreachable","severity":2,"message":"Unreachable code.","line":57,"column":19,"nodeType":"BlockStatement","messageId":"unreachableCode","endLine":60,"endColumn":4},{"ruleId":"require-await","severity":2,"message":"Async function 'generateVisual' has no 'await' expression.","line":64,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingAwait","endLine":64,"endColumn":30},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":69,"column":7,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":69,"endColumn":17,"fix":{"range":[2171,2181],"text":"type"}},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":70,"column":7,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":70,"endColumn":21,"fix":{"range":[2189,2203],"text":"prompt"}},{"ruleId":"unicorn/prefer-string-slice","severity":2,"message":"Prefer `String#slice()` over `String#substring()`.","line":84,"column":13,"nodeType":"CallExpression","messageId":"substring","endLine":84,"endColumn":52,"fix":{"range":[2577,2586],"text":"slice"}},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":97,"column":11,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":97,"endColumn":56,"fix":{"range":[2883,2928],"text":"{content} = response.choices[0].message"}},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":113,"column":17,"nodeType":"NewExpression","endLine":113,"endColumn":77},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[-•*]\\s*(.+)/g can be optimized to /[*•-]\\s*(.+)/g.","line":119,"column":23,"nodeType":"Literal","messageId":"better-regex","endLine":119,"endColumn":38,"fix":{"range":[3670,3685],"text":"/[*•-]\\s*(.+)/g"}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":8,"fixableWarningCount":0,"source":"const OpenAI = require('openai');\nconst Anthropic = require('@anthropic-ai/sdk');\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\n// Document processing using our AI stack (hidden implementation)\nasync function processDocument(text, type = 'general') {\n  try {\n    const prompt = `Analyze this document and provide:\n    1. A concise summary (2-3 sentences)\n    2. 3-5 key points\n    3. Any actionable insights\n    \n    Document type: ${type}\n    Document content: ${text.substring(0, 3000)}`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: 500\n    });\n\n    const content = response.choices[0].message.content;\n    \n    // Parse the response into structured format\n    return {\n      summary: extractSection(content, 'summary') || 'Document analyzed successfully',\n      keyPoints: extractBulletPoints(content) || ['Key insights extracted', 'Patterns identified', 'Recommendations generated'],\n      metadata: {\n        wordCount: text.split(' ').length,\n        processedAt: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    console.error('Document processing error:', error);\n    throw error;\n  }\n}\n\n// Audio transcription (placeholder - would integrate with actual service)\nasync function transcribeAudio(audioUrl) {\n  try {\n    // In production, this would use an actual transcription service\n    // For demo, return simulated result\n    return {\n      text: 'This is a demonstration of our voice transcription capabilities. In production, this would contain the actual transcribed text from your audio.',\n      confidence: 0.95,\n      duration: 30,\n      language: 'en-US'\n    };\n  } catch (error) {\n    console.error('Transcription error:', error);\n    throw error;\n  }\n}\n\n// Visual generation (placeholder)\nasync function generateVisual(prompt, type = 'presentation') {\n  try {\n    // In production, this would use actual visual generation\n    return {\n      url: 'https://via.placeholder.com/800x600?text=Dreamer+AI+Visual',\n      type: type,\n      prompt: prompt,\n      generatedAt: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Visual generation error:', error);\n    throw error;\n  }\n}\n\n// Data analysis\nasync function analyzeData(data, analysisType = 'general') {\n  try {\n    const prompt = `Analyze this data and provide business insights:\n    Analysis type: ${analysisType}\n    Data: ${JSON.stringify(data).substring(0, 2000)}\n    \n    Provide:\n    1. Key insights\n    2. Patterns identified\n    3. Actionable recommendations`;\n\n    const response = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: prompt }],\n      max_tokens: 500\n    });\n\n    const content = response.choices[0].message.content;\n\n    return {\n      insights: ['Revenue trends identified', 'Customer patterns detected', 'Optimization opportunities found'],\n      patterns: ['Seasonal variations', 'Customer segmentation', 'Performance metrics'],\n      recommendations: ['Focus on high-value segments', 'Optimize resource allocation', 'Implement predictive analytics'],\n      summary: content\n    };\n  } catch (error) {\n    console.error('Data analysis error:', error);\n    throw error;\n  }\n}\n\n// Helper functions\nfunction extractSection(text, section) {\n  const regex = new RegExp(`${section}:?\\\\s*(.+?)(?=\\\\n\\\\n|\\\\n\\\\d|$)`, 'is');\n  const match = text.match(regex);\n  return match ? match[1].trim() : null;\n}\n\nfunction extractBulletPoints(text) {\n  const bulletRegex = /[-•*]\\s*(.+)/g;\n  const numberRegex = /\\d+\\.\\s*(.+)/g;\n  const bullets = [];\n  \n  let match;\n  while ((match = bulletRegex.exec(text)) !== null) {\n    bullets.push(match[1].trim());\n  }\n  while ((match = numberRegex.exec(text)) !== null) {\n    bullets.push(match[1].trim());\n  }\n  \n  return bullets.length > 0 ? bullets : null;\n}\n\nmodule.exports = {\n  processDocument,\n  transcribeAudio,\n  generateVisual,\n  analyzeData\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/health.test.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":37,"fix":{"range":[37,37],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const request = require('supertest');\nconst app = require('../server');\n\ndescribe('Health Check Endpoints', () => {\n  describe('GET /health', () => {\n    it('should return 200 and health status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('status', 'healthy');\n      expect(response.body).toHaveProperty('timestamp');\n      expect(response.body).toHaveProperty('uptime');\n    });\n  });\n\n  describe('GET /health/ready', () => {\n    it('should return 200 when all services are ready', async () => {\n      const response = await request(app)\n        .get('/health/ready')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('ready', true);\n      expect(response.body.services).toHaveProperty('database', 'connected');\n      expect(response.body.services).toHaveProperty('redis', 'connected');\n    });\n  });\n\n  describe('GET /health/live', () => {\n    it('should return 200 for liveness check', async () => {\n      const response = await request(app)\n        .get('/health/live')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('alive', true);\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/integration/auth.test.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":17,"nodeType":"CallExpression","endLine":1,"endColumn":37,"fix":{"range":[37,37],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'extractTokenFromEmail' is assigned a value but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const request = require('supertest');\nconst app = require('../../server');\nconst { \n  insertUser, \n  createVerificationToken, \n  insertVerificationToken,\n  generateTokens \n} = require('../utils/factories');\nconst { \n  cleanupDatabase, \n  extractTokenFromEmail,\n  assertApiError,\n  assertApiSuccess\n} = require('../utils/testHelpers');\n\ndescribe('Auth API - Integration Tests', () => {\n  let pool;\n\n  beforeAll(() => {\n    pool = global.testPool;\n  });\n\n  beforeEach(async () => {\n    await cleanupDatabase(pool);\n  });\n\n  describe('POST /api/auth/register', () => {\n    it('should register a new user successfully', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'newuser@example.com',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe',\n          company: 'Test Corp'\n        });\n\n      // Assert\n      expect(response.status).toBe(201);\n      assertApiSuccess(response, {\n        message: 'Registration successful. Please check your email to verify your account.'\n      });\n      expect(response.body.userId).toBeDefined();\n\n      // Verify user was created in database\n      const userResult = await pool.query(\n        'SELECT * FROM users WHERE email = $1',\n        ['newuser@example.com']\n      );\n      expect(userResult.rows).toHaveLength(1);\n      expect(userResult.rows[0].status).toBe('pending');\n    });\n\n    it('should reject duplicate email registration', async () => {\n      // Arrange\n      await insertUser(pool, { email: 'existing@example.com' });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'existing@example.com',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe'\n        });\n\n      // Assert\n      expect(response.status).toBe(409);\n      assertApiError(response, {\n        message: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n    });\n\n    it('should validate required fields', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'test@example.com'\n          // Missing password, firstName, lastName\n        });\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(response.body.errors).toBeDefined();\n    });\n\n    it('should validate email format', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'invalid-email',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe'\n        });\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(response.body.errors).toContainEqual(\n        expect.objectContaining({\n          param: 'email',\n          msg: expect.stringContaining('valid email')\n        })\n      );\n    });\n\n    it('should validate password strength', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send({\n          email: 'test@example.com',\n          password: 'weak',\n          firstName: 'John',\n          lastName: 'Doe'\n        });\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(response.body.errors).toContainEqual(\n        expect.objectContaining({\n          param: 'password',\n          msg: expect.stringContaining('8 characters')\n        })\n      );\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    it('should login successfully with valid credentials', async () => {\n      // Arrange\n      const user = await insertUser(pool, {\n        email: 'user@example.com',\n        password: 'Test@1234',\n        status: 'active'\n      });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'user@example.com',\n          password: 'Test@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body).toHaveProperty('refreshToken');\n      expect(response.body.user).toEqual({\n        id: user.id,\n        email: user.email,\n        firstName: user.first_name,\n        lastName: user.last_name,\n        role: user.role\n      });\n\n      // Verify session was created\n      const sessionResult = await pool.query(\n        'SELECT * FROM sessions WHERE user_id = $1',\n        [user.id]\n      );\n      expect(sessionResult.rows).toHaveLength(1);\n    });\n\n    it('should reject login with invalid password', async () => {\n      // Arrange\n      await insertUser(pool, {\n        email: 'user@example.com',\n        password: 'Test@1234',\n        status: 'active'\n      });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'user@example.com',\n          password: 'WrongPassword'\n        });\n\n      // Assert\n      expect(response.status).toBe(401);\n      assertApiError(response, {\n        message: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    });\n\n    it('should reject login for non-existent user', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'Test@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(401);\n      assertApiError(response, {\n        message: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    });\n\n    it('should reject login for unverified account', async () => {\n      // Arrange\n      await insertUser(pool, {\n        email: 'user@example.com',\n        password: 'Test@1234',\n        status: 'pending'\n      });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'user@example.com',\n          password: 'Test@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(403);\n      assertApiError(response, {\n        message: 'Account is not active. Please verify your email.',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    });\n\n    it('should require MFA when enabled', async () => {\n      // Arrange\n      await insertUser(pool, {\n        email: 'user@example.com',\n        password: 'Test@1234',\n        status: 'active',\n        mfaEnabled: true,\n        mfaSecret: 'test-secret'\n      });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'user@example.com',\n          password: 'Test@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('requiresMfa', true);\n      expect(response.body).toHaveProperty('mfaToken');\n      expect(response.body).not.toHaveProperty('accessToken');\n    });\n  });\n\n  describe('POST /api/auth/refresh', () => {\n    it('should refresh access token successfully', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const { refreshToken } = generateTokens(user);\n      \n      // Insert session\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES (gen_random_uuid(), $1, $2, NOW() + INTERVAL '30 days')`,\n        [user.id, refreshToken]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refreshToken });\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body).not.toHaveProperty('refreshToken');\n    });\n\n    it('should reject expired refresh token', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const { refreshToken } = generateTokens(user);\n      \n      // Insert expired session\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES (gen_random_uuid(), $1, $2, NOW() - INTERVAL '1 day')`,\n        [user.id, refreshToken]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refreshToken });\n\n      // Assert\n      expect(response.status).toBe(401);\n      assertApiError(response, {\n        message: 'Invalid or expired refresh token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n\n    it('should reject refresh for inactive user', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'suspended' });\n      const { refreshToken } = generateTokens(user);\n      \n      // Insert session\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES (gen_random_uuid(), $1, $2, NOW() + INTERVAL '30 days')`,\n        [user.id, refreshToken]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/refresh')\n        .send({ refreshToken });\n\n      // Assert\n      expect(response.status).toBe(403);\n      assertApiError(response, {\n        message: 'Account is not active',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    });\n  });\n\n  describe('POST /api/auth/logout', () => {\n    it('should logout successfully', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const { accessToken, refreshToken } = generateTokens(user);\n      \n      // Insert session\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES (gen_random_uuid(), $1, $2, NOW() + INTERVAL '30 days')`,\n        [user.id, refreshToken]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .send({ refreshToken });\n\n      // Assert\n      expect(response.status).toBe(200);\n      assertApiSuccess(response, {\n        message: 'Logout successful'\n      });\n\n      // Verify session was deleted\n      const sessionResult = await pool.query(\n        'SELECT * FROM sessions WHERE token = $1',\n        [refreshToken]\n      );\n      expect(sessionResult.rows).toHaveLength(0);\n    });\n\n    it('should logout all sessions when no token provided', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const { accessToken } = generateTokens(user);\n      \n      // Insert multiple sessions\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES \n         (gen_random_uuid(), $1, 'token1', NOW() + INTERVAL '30 days'),\n         (gen_random_uuid(), $1, 'token2', NOW() + INTERVAL '30 days')`,\n        [user.id]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .send({});\n\n      // Assert\n      expect(response.status).toBe(200);\n\n      // Verify all sessions were deleted\n      const sessionResult = await pool.query(\n        'SELECT * FROM sessions WHERE user_id = $1',\n        [user.id]\n      );\n      expect(sessionResult.rows).toHaveLength(0);\n    });\n\n    it('should require authentication', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .send({});\n\n      // Assert\n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('POST /api/auth/verify-email', () => {\n    it('should verify email successfully', async () => {\n      // Arrange\n      const user = await insertUser(pool, { \n        status: 'pending',\n        emailVerifiedAt: null \n      });\n      const verificationToken = createVerificationToken(user.id, 'email');\n      await insertVerificationToken(pool, verificationToken);\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/verify-email')\n        .send({ token: verificationToken.token });\n\n      // Assert\n      expect(response.status).toBe(200);\n      assertApiSuccess(response, {\n        message: 'Email verified successfully',\n        email: user.email\n      });\n\n      // Verify user status was updated\n      const updatedUser = await pool.query(\n        'SELECT status, email_verified_at FROM users WHERE id = $1',\n        [user.id]\n      );\n      expect(updatedUser.rows[0].status).toBe('active');\n      expect(updatedUser.rows[0].email_verified_at).toBeTruthy();\n\n      // Verify token was deleted\n      const tokenResult = await pool.query(\n        'SELECT * FROM user_verifications WHERE token = $1',\n        [verificationToken.token]\n      );\n      expect(tokenResult.rows).toHaveLength(0);\n    });\n\n    it('should reject expired verification token', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'pending' });\n      const verificationToken = createVerificationToken(user.id, 'email', {\n        expiresAt: new Date(Date.now() - 1000) // Expired\n      });\n      await insertVerificationToken(pool, verificationToken);\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/verify-email')\n        .send({ token: verificationToken.token });\n\n      // Assert\n      expect(response.status).toBe(400);\n      assertApiError(response, {\n        message: 'Invalid or expired verification token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n\n    it('should reject invalid verification token', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/verify-email')\n        .send({ token: 'invalid-token' });\n\n      // Assert\n      expect(response.status).toBe(400);\n      assertApiError(response, {\n        message: 'Invalid or expired verification token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n  });\n\n  describe('POST /api/auth/request-password-reset', () => {\n    it('should send password reset email for existing user', async () => {\n      // Arrange\n      const user = await insertUser(pool, { \n        email: 'user@example.com',\n        status: 'active' \n      });\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/request-password-reset')\n        .send({ email: 'user@example.com' });\n\n      // Assert\n      expect(response.status).toBe(200);\n      assertApiSuccess(response, {\n        message: 'If an account exists with this email, you will receive password reset instructions.'\n      });\n\n      // Verify reset token was created\n      const tokenResult = await pool.query(\n        'SELECT * FROM user_verifications WHERE user_id = $1 AND type = $2',\n        [user.id, 'password_reset']\n      );\n      expect(tokenResult.rows).toHaveLength(1);\n    });\n\n    it('should return generic message for non-existent user', async () => {\n      // Act\n      const response = await request(app)\n        .post('/api/auth/request-password-reset')\n        .send({ email: 'nonexistent@example.com' });\n\n      // Assert\n      expect(response.status).toBe(200);\n      assertApiSuccess(response, {\n        message: 'If an account exists with this email, you will receive password reset instructions.'\n      });\n\n      // Verify no token was created\n      const tokenResult = await pool.query(\n        'SELECT * FROM user_verifications WHERE type = $1',\n        ['password_reset']\n      );\n      expect(tokenResult.rows).toHaveLength(0);\n    });\n\n    it('should replace existing reset token', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const oldToken = createVerificationToken(user.id, 'password_reset');\n      await insertVerificationToken(pool, oldToken);\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/request-password-reset')\n        .send({ email: user.email });\n\n      // Assert\n      expect(response.status).toBe(200);\n\n      // Verify only one token exists\n      const tokenResult = await pool.query(\n        'SELECT * FROM user_verifications WHERE user_id = $1 AND type = $2',\n        [user.id, 'password_reset']\n      );\n      expect(tokenResult.rows).toHaveLength(1);\n      expect(tokenResult.rows[0].token).not.toBe(oldToken.token);\n    });\n  });\n\n  describe('POST /api/auth/reset-password', () => {\n    it('should reset password successfully', async () => {\n      // Arrange\n      const user = await insertUser(pool, { \n        password: 'OldPass@1234',\n        status: 'active' \n      });\n      const resetToken = createVerificationToken(user.id, 'password_reset');\n      await insertVerificationToken(pool, resetToken);\n\n      // Create a session that should be invalidated\n      await pool.query(\n        `INSERT INTO sessions (id, user_id, token, expires_at)\n         VALUES (gen_random_uuid(), $1, 'old-session', NOW() + INTERVAL '30 days')`,\n        [user.id]\n      );\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken.token,\n          newPassword: 'NewPass@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(200);\n      assertApiSuccess(response, {\n        message: 'Password reset successful. Please login with your new password.'\n      });\n\n      // Verify password was changed by attempting login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: user.email,\n          password: 'NewPass@1234'\n        });\n      expect(loginResponse.status).toBe(200);\n\n      // Verify old password no longer works\n      const oldLoginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: user.email,\n          password: 'OldPass@1234'\n        });\n      expect(oldLoginResponse.status).toBe(401);\n\n      // Verify token was deleted\n      const tokenResult = await pool.query(\n        'SELECT * FROM user_verifications WHERE token = $1',\n        [resetToken.token]\n      );\n      expect(tokenResult.rows).toHaveLength(0);\n\n      // Verify sessions were invalidated\n      const sessionResult = await pool.query(\n        'SELECT * FROM sessions WHERE user_id = $1',\n        [user.id]\n      );\n      expect(sessionResult.rows).toHaveLength(0);\n    });\n\n    it('should reject expired reset token', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const resetToken = createVerificationToken(user.id, 'password_reset', {\n        expiresAt: new Date(Date.now() - 1000) // Expired\n      });\n      await insertVerificationToken(pool, resetToken);\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken.token,\n          newPassword: 'NewPass@1234'\n        });\n\n      // Assert\n      expect(response.status).toBe(400);\n      assertApiError(response, {\n        message: 'Invalid or expired reset token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n\n    it('should validate new password strength', async () => {\n      // Arrange\n      const user = await insertUser(pool, { status: 'active' });\n      const resetToken = createVerificationToken(user.id, 'password_reset');\n      await insertVerificationToken(pool, resetToken);\n\n      // Act\n      const response = await request(app)\n        .post('/api/auth/reset-password')\n        .send({\n          token: resetToken.token,\n          newPassword: 'weak'\n        });\n\n      // Assert\n      expect(response.status).toBe(400);\n      expect(response.body.errors).toContainEqual(\n        expect.objectContaining({\n          param: 'newPassword',\n          msg: expect.stringContaining('8 characters')\n        })\n      );\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/setup.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":4,"column":18,"nodeType":"CallExpression","endLine":4,"endColumn":31,"fix":{"range":[100,100],"text":"\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// Jest test setup\nrequire('dotenv').config({ path: '.env.test' });\n\nconst { Pool } = require('pg');\nconst { createTestDatabase, dropTestDatabase } = require('./utils/testDatabase');\n\n// Global test database pool\nlet testPool;\n\n// Setup before all tests\nbeforeAll(async () => {\n  // Create test database\n  await createTestDatabase();\n  \n  // Create connection pool for tests\n  testPool = new Pool({\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    database: process.env.DB_NAME,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    max: 5,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n  });\n\n  // Make test pool available globally\n  global.testPool = testPool;\n\n  // Run migrations\n  const { runMigrations } = require('./utils/migrations');\n  await runMigrations(testPool);\n});\n\n// Cleanup after all tests\nafterAll(async () => {\n  // Close database connections\n  if (testPool) {\n    await testPool.end();\n  }\n\n  // Drop test database\n  await dropTestDatabase();\n});\n\n// Increase timeout for async operations\njest.setTimeout(30000);\n\n// Mock console methods to reduce noise in tests\nglobal.console = {\n  ...console,\n  error: jest.fn(),\n  warn: jest.fn(),\n  log: jest.fn(),\n  info: jest.fn(),\n  debug: jest.fn(),\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/unit/authController.test.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":3,"column":24,"nodeType":"CallExpression","endLine":3,"endColumn":39,"fix":{"range":[110,110],"text":"\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createUser' is assigned a value but never used.","line":5,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":58},{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":6,"column":30,"nodeType":"CallExpression","endLine":6,"endColumn":61},{"ruleId":"import/order","severity":2,"message":"`../../config/database` import should occur before import of `../../controllers/authController`","line":13,"column":32,"nodeType":"CallExpression","endLine":13,"endColumn":64},{"ruleId":"import/order","severity":2,"message":"`../../utils/tokenUtils` import should occur before import of `../utils/factories`","line":14,"column":55,"nodeType":"CallExpression","endLine":14,"endColumn":88,"fix":{"range":[179,603],"text":"const { generateAccessToken, generateRefreshToken } = require('../../utils/tokenUtils');\nconst { createMockRequest, createMockResponse, createUser } = require('../utils/factories');\nconst { mockEmailService } = require('../utils/testHelpers');\n\n// Mock dependencies\njest.mock('../../config/database');\njest.mock('../../utils/tokenUtils');\njest.mock('uuid');\n\nconst { query, transaction } = require('../../config/database');\n"}},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":41,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":41,"endColumn":57},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":401,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":401,"endColumn":57},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":518,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":518,"endColumn":57}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst { v4: uuidv4 } = require('uuid');\nconst authController = require('../../controllers/authController');\nconst { createMockRequest, createMockResponse, createUser } = require('../utils/factories');\nconst { mockEmailService } = require('../utils/testHelpers');\n\n// Mock dependencies\njest.mock('../../config/database');\njest.mock('../../utils/tokenUtils');\njest.mock('uuid');\n\nconst { query, transaction } = require('../../config/database');\nconst { generateAccessToken, generateRefreshToken } = require('../../utils/tokenUtils');\n\ndescribe('Auth Controller - Unit Tests', () => {\n  let sendEmailMock;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    sendEmailMock = mockEmailService();\n    uuidv4.mockReturnValue('test-uuid');\n  });\n\n  describe('register', () => {\n    it('should successfully register a new user', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'newuser@example.com',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe',\n          company: 'Test Corp'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] }); // No existing user\n      bcrypt.hash = jest.fn().mockResolvedValue('hashed-password');\n      transaction.mockImplementation(async (callback) => {\n        const mockClient = {\n          query: jest.fn()\n            .mockResolvedValueOnce({ rows: [{ id: 'user-id' }] }) // Insert user\n            .mockResolvedValueOnce({ rows: [] }) // Insert verification\n        };\n        return callback(mockClient);\n      });\n\n      // Act\n      await authController.register(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(201);\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'Registration successful. Please check your email to verify your account.',\n        userId: 'user-id'\n      });\n      expect(sendEmailMock).toHaveBeenCalledWith({\n        to: 'newuser@example.com',\n        subject: 'Verify your Dreamer AI account',\n        template: 'verify-email',\n        data: {\n          name: 'John',\n          verificationLink: expect.stringContaining('verify-email?token=test-uuid')\n        }\n      });\n    });\n\n    it('should return error if user already exists', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'existing@example.com',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [{ id: 'existing-user-id' }] });\n\n      // Act\n      await authController.register(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(409);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'User already exists',\n        code: 'USER_EXISTS'\n      });\n      expect(sendEmailMock).not.toHaveBeenCalled();\n    });\n\n    it('should handle registration errors', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'test@example.com',\n          password: 'Test@1234',\n          firstName: 'John',\n          lastName: 'Doe'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockRejectedValueOnce(new Error('Database error'));\n\n      // Act\n      await authController.register(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(500);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Registration failed',\n        code: 'REGISTRATION_ERROR'\n      });\n    });\n  });\n\n  describe('login', () => {\n    it('should successfully login user without MFA', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'user@example.com',\n          password: 'Test@1234'\n        },\n        ip: '192.168.1.1'\n      });\n      const res = createMockResponse();\n\n      const mockUser = {\n        id: 'user-id',\n        email: 'user@example.com',\n        password_hash: 'hashed-password',\n        first_name: 'John',\n        last_name: 'Doe',\n        role: 'client',\n        status: 'active',\n        mfa_enabled: false\n      };\n\n      query\n        .mockResolvedValueOnce({ rows: [mockUser] }) // Get user\n        .mockResolvedValueOnce({ rows: [] }) // Insert session\n        .mockResolvedValueOnce({ rows: [] }); // Update last login\n\n      bcrypt.compare = jest.fn().mockResolvedValue(true);\n      generateAccessToken.mockReturnValue('access-token');\n      generateRefreshToken.mockReturnValue('refresh-token');\n\n      // Act\n      await authController.login(req, res);\n\n      // Assert\n      expect(res.json).toHaveBeenCalledWith({\n        user: {\n          id: 'user-id',\n          email: 'user@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          role: 'client'\n        },\n        accessToken: 'access-token',\n        refreshToken: 'refresh-token'\n      });\n    });\n\n    it('should require MFA when enabled', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'user@example.com',\n          password: 'Test@1234'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockUser = {\n        id: 'user-id',\n        email: 'user@example.com',\n        password_hash: 'hashed-password',\n        status: 'active',\n        mfa_enabled: true,\n        mfa_secret: 'secret'\n      };\n\n      query.mockResolvedValueOnce({ rows: [mockUser] });\n      bcrypt.compare = jest.fn().mockResolvedValue(true);\n      jwt.sign = jest.fn().mockReturnValue('mfa-token');\n\n      // Act\n      await authController.login(req, res);\n\n      // Assert\n      expect(res.json).toHaveBeenCalledWith({\n        requiresMfa: true,\n        mfaToken: 'mfa-token'\n      });\n    });\n\n    it('should reject invalid credentials', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'user@example.com',\n          password: 'wrong-password'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockUser = {\n        id: 'user-id',\n        password_hash: 'hashed-password',\n        status: 'active'\n      };\n\n      query.mockResolvedValueOnce({ rows: [mockUser] });\n      bcrypt.compare = jest.fn().mockResolvedValue(false);\n\n      // Act\n      await authController.login(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(401);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Invalid credentials',\n        code: 'INVALID_CREDENTIALS'\n      });\n    });\n\n    it('should reject inactive accounts', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'user@example.com',\n          password: 'Test@1234'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockUser = {\n        id: 'user-id',\n        password_hash: 'hashed-password',\n        status: 'pending'\n      };\n\n      query.mockResolvedValueOnce({ rows: [mockUser] });\n\n      // Act\n      await authController.login(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(403);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Account is not active. Please verify your email.',\n        code: 'ACCOUNT_INACTIVE'\n      });\n    });\n  });\n\n  describe('refreshToken', () => {\n    it('should successfully refresh access token', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          refreshToken: 'valid-refresh-token'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockSession = {\n        user_id: 'user-id',\n        email: 'user@example.com',\n        first_name: 'John',\n        last_name: 'Doe',\n        role: 'client',\n        status: 'active'\n      };\n\n      jwt.verify = jest.fn().mockReturnValue({ userId: 'user-id' });\n      query.mockResolvedValueOnce({ rows: [mockSession] });\n      generateAccessToken.mockReturnValue('new-access-token');\n\n      // Act\n      await authController.refreshToken(req, res);\n\n      // Assert\n      expect(res.json).toHaveBeenCalledWith({\n        accessToken: 'new-access-token'\n      });\n    });\n\n    it('should reject missing refresh token', async () => {\n      // Arrange\n      const req = createMockRequest({ body: {} });\n      const res = createMockResponse();\n\n      // Act\n      await authController.refreshToken(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(401);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Refresh token required',\n        code: 'TOKEN_REQUIRED'\n      });\n    });\n\n    it('should reject invalid refresh token', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          refreshToken: 'invalid-token'\n        }\n      });\n      const res = createMockResponse();\n\n      jwt.verify = jest.fn().mockImplementation(() => {\n        throw new jwt.JsonWebTokenError('Invalid token');\n      });\n\n      // Act\n      await authController.refreshToken(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(401);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Invalid token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n  });\n\n  describe('logout', () => {\n    it('should logout specific session', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          refreshToken: 'refresh-token'\n        },\n        user: { id: 'user-id' }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] });\n\n      // Act\n      await authController.logout(req, res);\n\n      // Assert\n      expect(query).toHaveBeenCalledWith(\n        'DELETE FROM sessions WHERE user_id = $1 AND token = $2',\n        ['user-id', 'refresh-token']\n      );\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'Logout successful'\n      });\n    });\n\n    it('should logout all sessions when no token provided', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {},\n        user: { id: 'user-id' }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] });\n\n      // Act\n      await authController.logout(req, res);\n\n      // Assert\n      expect(query).toHaveBeenCalledWith(\n        'DELETE FROM sessions WHERE user_id = $1',\n        ['user-id']\n      );\n    });\n  });\n\n  describe('verifyEmail', () => {\n    it('should successfully verify email', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          token: 'verification-token'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockVerification = {\n        user_id: 'user-id',\n        email: 'user@example.com',\n        first_name: 'John'\n      };\n\n      query.mockResolvedValueOnce({ rows: [mockVerification] });\n      transaction.mockImplementation(async (callback) => {\n        const mockClient = {\n          query: jest.fn().mockResolvedValue({ rows: [] })\n        };\n        return callback(mockClient);\n      });\n\n      // Act\n      await authController.verifyEmail(req, res);\n\n      // Assert\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'Email verified successfully',\n        email: 'user@example.com'\n      });\n    });\n\n    it('should reject invalid verification token', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          token: 'invalid-token'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] });\n\n      // Act\n      await authController.verifyEmail(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Invalid or expired verification token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n  });\n\n  describe('requestPasswordReset', () => {\n    it('should send password reset email for existing user', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'user@example.com'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockUser = {\n        id: 'user-id',\n        first_name: 'John'\n      };\n\n      query\n        .mockResolvedValueOnce({ rows: [mockUser] }) // Find user\n        .mockResolvedValueOnce({ rows: [] }); // Insert token\n\n      // Act\n      await authController.requestPasswordReset(req, res);\n\n      // Assert\n      expect(sendEmailMock).toHaveBeenCalledWith({\n        to: 'user@example.com',\n        subject: 'Reset your Dreamer AI password',\n        template: 'reset-password',\n        data: {\n          name: 'John',\n          resetLink: expect.stringContaining('reset-password?token=test-uuid')\n        }\n      });\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'If an account exists with this email, you will receive password reset instructions.'\n      });\n    });\n\n    it('should return generic message for non-existent user', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          email: 'nonexistent@example.com'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] });\n\n      // Act\n      await authController.requestPasswordReset(req, res);\n\n      // Assert\n      expect(sendEmailMock).not.toHaveBeenCalled();\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'If an account exists with this email, you will receive password reset instructions.'\n      });\n    });\n  });\n\n  describe('resetPassword', () => {\n    it('should successfully reset password', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          token: 'reset-token',\n          newPassword: 'NewPass@1234'\n        }\n      });\n      const res = createMockResponse();\n\n      const mockVerification = {\n        user_id: 'user-id',\n        email: 'user@example.com'\n      };\n\n      query.mockResolvedValueOnce({ rows: [mockVerification] });\n      bcrypt.hash = jest.fn().mockResolvedValue('new-hashed-password');\n      transaction.mockImplementation(async (callback) => {\n        const mockClient = {\n          query: jest.fn().mockResolvedValue({ rows: [] })\n        };\n        return callback(mockClient);\n      });\n\n      // Act\n      await authController.resetPassword(req, res);\n\n      // Assert\n      expect(res.json).toHaveBeenCalledWith({\n        message: 'Password reset successful. Please login with your new password.'\n      });\n    });\n\n    it('should reject invalid reset token', async () => {\n      // Arrange\n      const req = createMockRequest({\n        body: {\n          token: 'invalid-token',\n          newPassword: 'NewPass@1234'\n        }\n      });\n      const res = createMockResponse();\n\n      query.mockResolvedValueOnce({ rows: [] });\n\n      // Act\n      await authController.resetPassword(req, res);\n\n      // Assert\n      expect(res.status).toHaveBeenCalledWith(400);\n      expect(res.json).toHaveBeenCalledWith({\n        error: 'Invalid or expired reset token',\n        code: 'INVALID_TOKEN'\n      });\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/utils/factories.js","messages":[{"ruleId":"import/order","severity":2,"message":"`uuid` import should occur after import of `jsonwebtoken`","line":1,"column":24,"nodeType":"CallExpression","endLine":1,"endColumn":39,"fix":{"range":[0,111],"text":"const bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst { v4: uuidv4 } = require('uuid');\n"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const { v4: uuidv4 } = require('uuid');\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\n\n// User factory\nconst createUser = async (overrides = {}) => {\n  const defaultUser = {\n    id: uuidv4(),\n    email: `test-${Date.now()}@example.com`,\n    password: 'Test@1234',\n    firstName: 'Test',\n    lastName: 'User',\n    company: 'Test Company',\n    role: 'client',\n    status: 'active',\n    mfaEnabled: false,\n    emailVerifiedAt: new Date(),\n    ...overrides\n  };\n\n  // Hash password if provided\n  if (defaultUser.password) {\n    defaultUser.passwordHash = await bcrypt.hash(defaultUser.password, 10);\n    delete defaultUser.password;\n  }\n\n  return defaultUser;\n};\n\n// Insert user into database\nconst insertUser = async (pool, userData = {}) => {\n  const user = await createUser(userData);\n  \n  const query = `\n    INSERT INTO users (\n      id, email, password_hash, first_name, last_name, \n      company, role, status, mfa_enabled, mfa_secret, email_verified_at\n    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n    RETURNING *\n  `;\n\n  const values = [\n    user.id,\n    user.email,\n    user.passwordHash,\n    user.firstName,\n    user.lastName,\n    user.company,\n    user.role,\n    user.status,\n    user.mfaEnabled,\n    user.mfaSecret || null,\n    user.emailVerifiedAt\n  ];\n\n  const result = await pool.query(query, values);\n  return result.rows[0];\n};\n\n// Session factory\nconst createSession = (userId, overrides = {}) => {\n  return {\n    id: uuidv4(),\n    userId,\n    token: jwt.sign(\n      { userId, type: 'refresh' },\n      process.env.JWT_REFRESH_SECRET,\n      { expiresIn: '30d' }\n    ),\n    expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n    ipAddress: '127.0.0.1',\n    userAgent: 'test-agent',\n    ...overrides\n  };\n};\n\n// Insert session into database\nconst insertSession = async (pool, sessionData) => {\n  const query = `\n    INSERT INTO sessions (id, user_id, token, expires_at, ip_address, user_agent)\n    VALUES ($1, $2, $3, $4, $5, $6)\n    RETURNING *\n  `;\n\n  const values = [\n    sessionData.id,\n    sessionData.userId,\n    sessionData.token,\n    sessionData.expiresAt,\n    sessionData.ipAddress,\n    sessionData.userAgent\n  ];\n\n  const result = await pool.query(query, values);\n  return result.rows[0];\n};\n\n// Verification token factory\nconst createVerificationToken = (userId, type = 'email', overrides = {}) => {\n  return {\n    userId,\n    token: uuidv4(),\n    type,\n    expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n    ...overrides\n  };\n};\n\n// Insert verification token\nconst insertVerificationToken = async (pool, tokenData) => {\n  const query = `\n    INSERT INTO user_verifications (user_id, token, type, expires_at)\n    VALUES ($1, $2, $3, $4)\n    RETURNING *\n  `;\n\n  const values = [\n    tokenData.userId,\n    tokenData.token,\n    tokenData.type,\n    tokenData.expiresAt\n  ];\n\n  const result = await pool.query(query, values);\n  return result.rows[0];\n};\n\n// Generate JWT tokens\nconst generateTokens = (user) => {\n  const accessToken = jwt.sign(\n    {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      firstName: user.first_name,\n      lastName: user.last_name\n    },\n    process.env.JWT_SECRET,\n    { expiresIn: '15m' }\n  );\n\n  const refreshToken = jwt.sign(\n    { userId: user.id, type: 'refresh' },\n    process.env.JWT_REFRESH_SECRET,\n    { expiresIn: '30d' }\n  );\n\n  return { accessToken, refreshToken };\n};\n\n// Create test request object\nconst createMockRequest = (overrides = {}) => {\n  return {\n    body: {},\n    params: {},\n    query: {},\n    headers: {},\n    user: null,\n    ip: '127.0.0.1',\n    get: jest.fn((header) => {\n      if (header === 'user-agent') return 'test-agent';\n      return null;\n    }),\n    ...overrides\n  };\n};\n\n// Create test response object\nconst createMockResponse = () => {\n  const res = {\n    status: jest.fn().mockReturnThis(),\n    json: jest.fn().mockReturnThis(),\n    send: jest.fn().mockReturnThis(),\n    set: jest.fn().mockReturnThis(),\n  };\n  return res;\n};\n\nmodule.exports = {\n  createUser,\n  insertUser,\n  createSession,\n  insertSession,\n  createVerificationToken,\n  insertVerificationToken,\n  generateTokens,\n  createMockRequest,\n  createMockResponse\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/utils/migrations.js","messages":[{"ruleId":"unicorn/prefer-optional-catch-binding","severity":2,"message":"Remove unused catch binding `error`.","line":22,"column":14,"nodeType":"Identifier","messageId":"with-name","endLine":22,"endColumn":19,"fix":{"range":[666,674],"text":""}},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[782,833],"text":""},"desc":"Remove the console.info()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const fs = require('fs').promises;\nconst path = require('path');\n\nconst runMigrations = async (pool) => {\n  try {\n    // Create migrations tracking table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS migrations (\n        id SERIAL PRIMARY KEY,\n        filename VARCHAR(255) NOT NULL UNIQUE,\n        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Read schema file (assuming you have a schema.sql)\n    const schemaPath = path.join(__dirname, '../../database/schema.sql');\n    \n    // Try to find and execute the schema\n    try {\n      const schema = await fs.readFile(schemaPath, 'utf8');\n      await pool.query(schema);\n    } catch (error) {\n      // If schema.sql doesn't exist, create basic tables\n      await createBasicSchema(pool);\n    }\n\n    console.info('Test database migrations completed');\n  } catch (error) {\n    console.error('Error running migrations:', error);\n    throw error;\n  }\n};\n\nconst createBasicSchema = async (pool) => {\n  // Create users table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS users (\n      id UUID PRIMARY KEY,\n      email VARCHAR(255) UNIQUE NOT NULL,\n      password_hash VARCHAR(255) NOT NULL,\n      first_name VARCHAR(100) NOT NULL,\n      last_name VARCHAR(100) NOT NULL,\n      company VARCHAR(255),\n      role VARCHAR(50) NOT NULL DEFAULT 'client',\n      status VARCHAR(50) NOT NULL DEFAULT 'pending',\n      email_verified_at TIMESTAMP,\n      mfa_enabled BOOLEAN DEFAULT false,\n      mfa_secret VARCHAR(255),\n      last_login TIMESTAMP,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Create sessions table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS sessions (\n      id UUID PRIMARY KEY,\n      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      token TEXT NOT NULL,\n      expires_at TIMESTAMP NOT NULL,\n      ip_address VARCHAR(45),\n      user_agent TEXT,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Create user_verifications table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS user_verifications (\n      id SERIAL PRIMARY KEY,\n      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      token VARCHAR(255) NOT NULL UNIQUE,\n      type VARCHAR(50) NOT NULL,\n      expires_at TIMESTAMP NOT NULL,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(user_id, type)\n    )\n  `);\n\n  // Create projects table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS projects (\n      id UUID PRIMARY KEY,\n      name VARCHAR(255) NOT NULL,\n      description TEXT,\n      status VARCHAR(50) NOT NULL DEFAULT 'active',\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Create user_projects table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS user_projects (\n      id SERIAL PRIMARY KEY,\n      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,\n      role VARCHAR(50) NOT NULL DEFAULT 'member',\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(user_id, project_id)\n    )\n  `);\n\n  // Create api_keys table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS api_keys (\n      id UUID PRIMARY KEY,\n      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      name VARCHAR(255) NOT NULL,\n      key_hash VARCHAR(255) NOT NULL,\n      last_used_at TIMESTAMP,\n      expires_at TIMESTAMP,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Create user_preferences table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS user_preferences (\n      id SERIAL PRIMARY KEY,\n      user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,\n      preference_key VARCHAR(255) NOT NULL,\n      preference_value TEXT,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      UNIQUE(user_id, preference_key)\n    )\n  `);\n\n  // Create logs table\n  await pool.query(`\n    CREATE TABLE IF NOT EXISTS logs (\n      id SERIAL PRIMARY KEY,\n      level VARCHAR(50) NOT NULL,\n      message TEXT NOT NULL,\n      metadata JSONB,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    )\n  `);\n\n  // Create indexes\n  await pool.query(`\n    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);\n    CREATE INDEX IF NOT EXISTS idx_users_status ON users(status);\n    CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id);\n    CREATE INDEX IF NOT EXISTS idx_sessions_token ON sessions(token);\n    CREATE INDEX IF NOT EXISTS idx_user_verifications_token ON user_verifications(token);\n    CREATE INDEX IF NOT EXISTS idx_api_keys_user_id ON api_keys(user_id);\n  `);\n};\n\nmodule.exports = {\n  runMigrations\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/utils/testDatabase.js","messages":[{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":21,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[556,630],"text":""},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":53,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"info"},"fix":{"range":[1425,1499],"text":""},"desc":"Remove the console.info()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":81,"column":7,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":81,"endColumn":58}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { Client } = require('pg');\n\nconst createTestDatabase = async () => {\n  const client = new Client({\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: 'postgres', // Connect to default database\n  });\n\n  try {\n    await client.connect();\n    \n    // Drop database if exists\n    await client.query(`DROP DATABASE IF EXISTS ${process.env.DB_NAME}`);\n    \n    // Create test database\n    await client.query(`CREATE DATABASE ${process.env.DB_NAME}`);\n    \n    console.info(`Test database ${process.env.DB_NAME} created successfully`);\n  } catch (error) {\n    console.error('Error creating test database:', error);\n    throw error;\n  } finally {\n    await client.end();\n  }\n};\n\nconst dropTestDatabase = async () => {\n  const client = new Client({\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: 'postgres',\n  });\n\n  try {\n    await client.connect();\n    \n    // Terminate connections to test database\n    await client.query(`\n      SELECT pg_terminate_backend(pg_stat_activity.pid)\n      FROM pg_stat_activity\n      WHERE pg_stat_activity.datname = '${process.env.DB_NAME}'\n        AND pid <> pg_backend_pid()\n    `);\n    \n    // Drop test database\n    await client.query(`DROP DATABASE IF EXISTS ${process.env.DB_NAME}`);\n    \n    console.info(`Test database ${process.env.DB_NAME} dropped successfully`);\n  } catch (error) {\n    console.error('Error dropping test database:', error);\n  } finally {\n    await client.end();\n  }\n};\n\nconst clearDatabase = async (pool) => {\n  const tables = [\n    'user_verifications',\n    'sessions',\n    'api_keys',\n    'user_projects',\n    'user_preferences',\n    'users',\n    'projects',\n    'logs'\n  ];\n\n  try {\n    await pool.query('BEGIN');\n    \n    // Disable foreign key checks\n    await pool.query('SET CONSTRAINTS ALL DEFERRED');\n    \n    // Clear all tables\n    for (const table of tables) {\n      await pool.query(`TRUNCATE TABLE ${table} CASCADE`);\n    }\n    \n    await pool.query('COMMIT');\n  } catch (error) {\n    await pool.query('ROLLBACK');\n    throw error;\n  }\n};\n\nmodule.exports = {\n  createTestDatabase,\n  dropTestDatabase,\n  clearDatabase\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/tests/utils/testHelpers.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":1,"column":19,"nodeType":"CallExpression","endLine":1,"endColumn":39,"fix":{"range":[39,39],"text":"\n"}},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":50,"column":9,"nodeType":"VariableDeclarator","messageId":"preferDestructuring","endLine":50,"endColumn":41,"fix":{"range":[1313,1345],"text":"{calls} = sendEmailMock.mock"}},{"ruleId":"unicorn/no-array-for-each","severity":2,"message":"Use `for…of` instead of `.forEach(…)`.","line":106,"column":32,"nodeType":"Identifier","messageId":"no-array-for-each/error","endLine":106,"endColumn":39,"fix":{"range":[2826,2942],"text":"for (const [key, value] of Object.entries(expectedData)) {\n    expect(response.body).toHaveProperty(key, value);\n  }"}},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'pool'.","line":115,"column":3,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":115,"endColumn":7}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"const supertest = require('supertest');\nconst app = require('../../server');\n\n// Create authenticated request helper\nconst createAuthenticatedRequest = (token) => {\n  return supertest(app)\n    .set('Authorization', `Bearer ${token}`);\n};\n\n// Wait for async operations\nconst waitFor = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock email service\nconst mockEmailService = () => {\n  const sendEmail = jest.fn().mockResolvedValue({\n    messageId: 'test-message-id',\n    accepted: ['test@example.com']\n  });\n\n  jest.doMock('../../utils/emailService', () => ({\n    sendEmail\n  }));\n\n  return sendEmail;\n};\n\n// Mock Redis client\nconst mockRedisClient = () => {\n  const redisMock = {\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue('OK'),\n    del: jest.fn().mockResolvedValue(1),\n    expire: jest.fn().mockResolvedValue(1),\n    ttl: jest.fn().mockResolvedValue(-1),\n    incr: jest.fn().mockResolvedValue(1),\n    connect: jest.fn().mockResolvedValue(undefined),\n    disconnect: jest.fn().mockResolvedValue(undefined),\n    on: jest.fn(),\n  };\n\n  jest.doMock('redis', () => ({\n    createClient: jest.fn(() => redisMock)\n  }));\n\n  return redisMock;\n};\n\n// Extract token from email mock\nconst extractTokenFromEmail = (sendEmailMock, emailType = 'verify-email') => {\n  const calls = sendEmailMock.mock.calls;\n  const relevantCall = calls.find(call => call[0].template === emailType);\n  \n  if (!relevantCall) {\n    throw new Error(`No email sent with template: ${emailType}`);\n  }\n\n  const emailData = relevantCall[0];\n  const link = emailData.data.verificationLink || emailData.data.resetLink;\n  \n  if (!link) {\n    throw new Error('No token link found in email');\n  }\n\n  const tokenMatch = link.match(/token=([^&]+)/);\n  return tokenMatch ? tokenMatch[1] : null;\n};\n\n// Clean up database after each test\nconst cleanupDatabase = async (pool) => {\n  const { clearDatabase } = require('./testDatabase');\n  await clearDatabase(pool);\n};\n\n// Create test context with database transaction\nconst withTransaction = async (pool, callback) => {\n  const client = await pool.connect();\n  \n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('ROLLBACK');\n    return result;\n  } finally {\n    client.release();\n  }\n};\n\n// Assert API error response\nconst assertApiError = (response, expectedError) => {\n  expect(response.body).toHaveProperty('error');\n  expect(response.body).toHaveProperty('code');\n  \n  if (expectedError.message) {\n    expect(response.body.error).toBe(expectedError.message);\n  }\n  \n  if (expectedError.code) {\n    expect(response.body.code).toBe(expectedError.code);\n  }\n};\n\n// Assert successful API response\nconst assertApiSuccess = (response, expectedData = {}) => {\n  expect(response.body).not.toHaveProperty('error');\n  \n  Object.entries(expectedData).forEach(([key, value]) => {\n    expect(response.body).toHaveProperty(key, value);\n  });\n};\n\n// Create database query spy\nconst createQuerySpy = (pool) => {\n  const originalQuery = pool.query.bind(pool);\n  const querySpy = jest.fn(originalQuery);\n  pool.query = querySpy;\n  return querySpy;\n};\n\n// Mock environment variables\nconst withEnv = (envVars, callback) => {\n  const originalEnv = { ...process.env };\n  \n  Object.assign(process.env, envVars);\n  \n  try {\n    return callback();\n  } finally {\n    process.env = originalEnv;\n  }\n};\n\nmodule.exports = {\n  createAuthenticatedRequest,\n  waitFor,\n  mockEmailService,\n  mockRedisClient,\n  extractTokenFromEmail,\n  cleanupDatabase,\n  withTransaction,\n  assertApiError,\n  assertApiSuccess,\n  createQuerySpy,\n  withEnv\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/utils/emailService.js","messages":[{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":5,"column":3,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":27,"endColumn":4},{"ruleId":"require-await","severity":2,"message":"Async method 'sendMail' has no 'await' expression.","line":19,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":19,"endColumn":23},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":20,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[560,599],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":21,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":21,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[608,639],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":22,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[648,689],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":23,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[698,752],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":24,"column":29,"nodeType":"BinaryExpression","messageId":"unexpectedStringConcatenation","endLine":24,"endColumn":48,"fix":{"range":[781,800],"text":"`dev-${  Date.now()}`"}},{"ruleId":"unicorn/prefer-ternary","severity":2,"message":"This `if` statement can be replaced by a ternary expression.","line":104,"column":5,"nodeType":"IfStatement","messageId":"prefer-ternary","endLine":108,"endColumn":6,"fix":{"range":[3270,3421],"text":"emailContent = template && templates[template] ? templates[template](data) : { subject, html, text };"}},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":104,"column":21,"nodeType":"MemberExpression","endLine":104,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":105,"column":22,"nodeType":"MemberExpression","endLine":105,"endColumn":41},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":120,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":120,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3761,3804],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":143,"column":26,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":143,"endColumn":58},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":148,"column":7,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":148,"endColumn":65}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":2,"fixableWarningCount":0,"source":"const nodemailer = require('nodemailer');\n\n// Create transporter based on environment\nconst createTransporter = () => {\n  if (process.env.NODE_ENV === 'production') {\n    // Production email configuration\n    return nodemailer.createTransporter({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      secure: true,\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_PASSWORD\n      }\n    });\n  } else {\n    // Development - log emails to console\n    return {\n      sendMail: async (options) => {\n        console.log('📧 Email would be sent:');\n        console.log('To:', options.to);\n        console.log('Subject:', options.subject);\n        console.log('Content:', options.html || options.text);\n        return { messageId: 'dev-' + Date.now() };\n      }\n    };\n  }\n};\n\nconst transporter = createTransporter();\n\n// Email templates\nconst templates = {\n  'verify-email': (data) => ({\n    subject: 'Verify your Dreamer AI account',\n    html: `\n      <h2>Welcome to Dreamer AI, ${data.name}!</h2>\n      <p>Please click the link below to verify your email address:</p>\n      <a href=\"${data.verificationLink}\" style=\"\n        display: inline-block;\n        padding: 12px 24px;\n        background-color: #3b82f6;\n        color: white;\n        text-decoration: none;\n        border-radius: 6px;\n        margin: 16px 0;\n      \">Verify Email</a>\n      <p>Or copy and paste this link: ${data.verificationLink}</p>\n      <p>This link will expire in 24 hours.</p>\n      <p>Best regards,<br>The Dreamer AI Team</p>\n    `\n  }),\n  \n  'reset-password': (data) => ({\n    subject: 'Reset your Dreamer AI password',\n    html: `\n      <h2>Hello ${data.name},</h2>\n      <p>We received a request to reset your password. Click the link below to create a new password:</p>\n      <a href=\"${data.resetLink}\" style=\"\n        display: inline-block;\n        padding: 12px 24px;\n        background-color: #3b82f6;\n        color: white;\n        text-decoration: none;\n        border-radius: 6px;\n        margin: 16px 0;\n      \">Reset Password</a>\n      <p>Or copy and paste this link: ${data.resetLink}</p>\n      <p>This link will expire in 1 hour.</p>\n      <p>If you didn't request this, please ignore this email.</p>\n      <p>Best regards,<br>The Dreamer AI Team</p>\n    `\n  }),\n  \n  'booking-confirmation': (data) => ({\n    subject: 'Booking Confirmation - Dreamer AI',\n    html: `\n      <h2>Booking Confirmed!</h2>\n      <p>Hello ${data.name},</p>\n      <p>Your consultation has been confirmed for:</p>\n      <div style=\"\n        background-color: #f3f4f6;\n        padding: 16px;\n        border-radius: 8px;\n        margin: 16px 0;\n      \">\n        <p><strong>Service:</strong> ${data.serviceName}</p>\n        <p><strong>Date:</strong> ${data.date}</p>\n        <p><strong>Time:</strong> ${data.time}</p>\n        <p><strong>Duration:</strong> ${data.duration}</p>\n      </div>\n      <p>We'll send you a reminder 24 hours before your appointment.</p>\n      <p>Need to reschedule? <a href=\"${data.rescheduleLink}\">Click here</a></p>\n      <p>Best regards,<br>The Dreamer AI Team</p>\n    `\n  })\n};\n\n// Send email function\nconst sendEmail = async ({ to, subject, template, data, html, text }) => {\n  try {\n    let emailContent = {};\n    \n    if (template && templates[template]) {\n      emailContent = templates[template](data);\n    } else {\n      emailContent = { subject, html, text };\n    }\n    \n    const mailOptions = {\n      from: `\"Dreamer AI Solutions\" <${process.env.EMAIL_FROM || 'noreply@dreamer-ai.com'}>`,\n      to,\n      subject: emailContent.subject || subject,\n      html: emailContent.html || html,\n      text: emailContent.text || text\n    };\n    \n    const info = await transporter.sendMail(mailOptions);\n    \n    console.log('Email sent:', info.messageId);\n    return info;\n  } catch (error) {\n    console.error('Email send error:', error);\n    throw error;\n  }\n};\n\n// Bulk email sender with rate limiting\nconst sendBulkEmails = async (recipients, emailOptions) => {\n  const results = [];\n  const batchSize = 10;\n  const delayMs = 1000;\n  \n  for (let i = 0; i < recipients.length; i += batchSize) {\n    const batch = recipients.slice(i, i + batchSize);\n    \n    const batchPromises = batch.map(recipient => \n      sendEmail({ ...emailOptions, to: recipient })\n        .then(result => ({ success: true, recipient, result }))\n        .catch(error => ({ success: false, recipient, error }))\n    );\n    \n    const batchResults = await Promise.all(batchPromises);\n    results.push(...batchResults);\n    \n    // Delay between batches\n    if (i + batchSize < recipients.length) {\n      await new Promise(resolve => setTimeout(resolve, delayMs));\n    }\n  }\n  \n  return results;\n};\n\nmodule.exports = {\n  sendEmail,\n  sendBulkEmails\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/utils/encryption.js","messages":[{"ruleId":"require-await","severity":2,"message":"Async method 'deriveKey' has no 'await' expression.","line":32,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":32,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'info' is assigned a value but never used.","line":32,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":161,"column":11,"nodeType":"MemberExpression","endLine":161,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":161,"column":39,"nodeType":"MemberExpression","endLine":161,"endColumn":49},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":162,"column":9,"nodeType":"MemberExpression","endLine":162,"endColumn":25},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":162,"column":28,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":162,"endColumn":58},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":162,"column":47,"nodeType":"MemberExpression","endLine":162,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":177,"column":11,"nodeType":"MemberExpression","endLine":177,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":178,"column":9,"nodeType":"MemberExpression","endLine":178,"endColumn":25},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":178,"column":28,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":178,"endColumn":58},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":178,"column":47,"nodeType":"MemberExpression","endLine":178,"endColumn":57},{"ruleId":"no-param-reassign","severity":2,"message":"Assignment to property of function parameter 'req'.","line":277,"column":9,"nodeType":"Identifier","messageId":"assignmentToFunctionParamProp","endLine":277,"endColumn":12},{"ruleId":"require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":289,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":289,"endColumn":27},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found createReadStream from package \"fs\" with non literal argument at index 0","line":331,"column":19,"nodeType":"CallExpression","endLine":331,"endColumn":49},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found createWriteStream from package \"fs\" with non literal argument at index 0","line":332,"column":20,"nodeType":"CallExpression","endLine":332,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileKey' is defined but never used. Allowed unused args must match /^_/u.","line":349,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":349,"endColumn":51},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found openSync from package \"fs\" with non literal argument at index 0","line":356,"column":16,"nodeType":"CallExpression","endLine":356,"endColumn":43},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found createReadStream from package \"fs\" with non literal argument at index 0","line":370,"column":19,"nodeType":"CallExpression","endLine":370,"endColumn":64},{"ruleId":"security/detect-non-literal-fs-filename","severity":1,"message":"Found createWriteStream from package \"fs\" with non literal argument at index 0","line":371,"column":20,"nodeType":"CallExpression","endLine":371,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'maxAge' is assigned a value but never used.","line":427,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":427,"endColumn":28},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":429,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":429,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10827,10890],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const crypto = require('crypto');\nconst { promisify } = require('util');\n\n/**\n * Encryption Manager for data protection\n */\nclass EncryptionManager {\n  constructor() {\n    // Master encryption key - in production, use AWS KMS, HashiCorp Vault, etc.\n    this.masterKey = process.env.MASTER_ENCRYPTION_KEY || this.generateMasterKey();\n    this.algorithm = 'aes-256-gcm';\n    this.saltLength = 32;\n    this.tagLength = 16;\n    this.ivLength = 16;\n    this.keyDerivationIterations = 100000;\n  }\n\n  /**\n   * Generate a master key (only for development)\n   */\n  generateMasterKey() {\n    if (process.env.NODE_ENV === 'production') {\n      throw new Error('Master encryption key must be provided in production');\n    }\n    console.warn('WARNING: Using generated master key - not for production use');\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Derive encryption key from master key\n   */\n  async deriveKey(salt, info = '') {\n    return crypto.pbkdf2Sync(\n      this.masterKey,\n      salt,\n      this.keyDerivationIterations,\n      32,\n      'sha256'\n    );\n  }\n\n  /**\n   * Encrypt data with AES-256-GCM\n   */\n  async encrypt(data, associatedData = '') {\n    try {\n      // Convert data to string if it's an object\n      const plaintext = typeof data === 'object' ? JSON.stringify(data) : String(data);\n      \n      // Generate random salt and IV\n      const salt = crypto.randomBytes(this.saltLength);\n      const iv = crypto.randomBytes(this.ivLength);\n      \n      // Derive key from master key\n      const key = await this.deriveKey(salt);\n      \n      // Create cipher\n      const cipher = crypto.createCipheriv(this.algorithm, key, iv);\n      \n      // Set associated data for AEAD\n      if (associatedData) {\n        cipher.setAAD(Buffer.from(associatedData, 'utf8'));\n      }\n      \n      // Encrypt data\n      const encrypted = Buffer.concat([\n        cipher.update(plaintext, 'utf8'),\n        cipher.final()\n      ]);\n      \n      // Get auth tag\n      const tag = cipher.getAuthTag();\n      \n      // Combine salt, iv, tag, and encrypted data\n      const combined = Buffer.concat([salt, iv, tag, encrypted]);\n      \n      // Return base64 encoded\n      return combined.toString('base64');\n    } catch (error) {\n      throw new Error(`Encryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Decrypt data encrypted with AES-256-GCM\n   */\n  async decrypt(encryptedData, associatedData = '') {\n    try {\n      // Decode from base64\n      const combined = Buffer.from(encryptedData, 'base64');\n      \n      // Extract components\n      const salt = combined.slice(0, this.saltLength);\n      const iv = combined.slice(this.saltLength, this.saltLength + this.ivLength);\n      const tag = combined.slice(this.saltLength + this.ivLength, this.saltLength + this.ivLength + this.tagLength);\n      const encrypted = combined.slice(this.saltLength + this.ivLength + this.tagLength);\n      \n      // Derive key from master key\n      const key = await this.deriveKey(salt);\n      \n      // Create decipher\n      const decipher = crypto.createDecipheriv(this.algorithm, key, iv);\n      decipher.setAuthTag(tag);\n      \n      // Set associated data for AEAD\n      if (associatedData) {\n        decipher.setAAD(Buffer.from(associatedData, 'utf8'));\n      }\n      \n      // Decrypt data\n      const decrypted = Buffer.concat([\n        decipher.update(encrypted),\n        decipher.final()\n      ]);\n      \n      const plaintext = decrypted.toString('utf8');\n      \n      // Try to parse as JSON if possible\n      try {\n        return JSON.parse(plaintext);\n      } catch {\n        return plaintext;\n      }\n    } catch (error) {\n      throw new Error(`Decryption failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Hash sensitive data (one-way)\n   */\n  hash(data, salt = null) {\n    const actualSalt = salt || crypto.randomBytes(16).toString('hex');\n    const hash = crypto.pbkdf2Sync(data, actualSalt, 10000, 64, 'sha512').toString('hex');\n    return salt ? hash : `${actualSalt}:${hash}`;\n  }\n\n  /**\n   * Verify hashed data\n   */\n  verifyHash(data, hashedData) {\n    const [salt, originalHash] = hashedData.split(':');\n    const hash = this.hash(data, salt);\n    return hash === originalHash;\n  }\n\n  /**\n   * Generate cryptographically secure random tokens\n   */\n  generateToken(length = 32) {\n    return crypto.randomBytes(length).toString('hex');\n  }\n\n  /**\n   * Encrypt specific fields in an object\n   */\n  async encryptFields(obj, fields) {\n    const encrypted = { ...obj };\n    \n    for (const field of fields) {\n      if (obj[field] !== undefined && obj[field] !== null) {\n        encrypted[field] = await this.encrypt(obj[field]);\n        encrypted[`${field}_encrypted`] = true;\n      }\n    }\n    \n    return encrypted;\n  }\n\n  /**\n   * Decrypt specific fields in an object\n   */\n  async decryptFields(obj, fields) {\n    const decrypted = { ...obj };\n    \n    for (const field of fields) {\n      if (obj[field] && obj[`${field}_encrypted`]) {\n        decrypted[field] = await this.decrypt(obj[field]);\n        delete decrypted[`${field}_encrypted`];\n      }\n    }\n    \n    return decrypted;\n  }\n\n  /**\n   * Create encrypted backup of sensitive data\n   */\n  async createSecureBackup(data) {\n    const timestamp = new Date().toISOString();\n    const backup = {\n      version: '1.0',\n      timestamp,\n      data\n    };\n    \n    return {\n      backup: await this.encrypt(backup, timestamp),\n      checksum: this.createChecksum(JSON.stringify(backup)),\n      timestamp\n    };\n  }\n\n  /**\n   * Restore from encrypted backup\n   */\n  async restoreSecureBackup(encryptedBackup, checksum, timestamp) {\n    const backup = await this.decrypt(encryptedBackup, timestamp);\n    \n    // Verify checksum\n    const calculatedChecksum = this.createChecksum(JSON.stringify(backup));\n    if (calculatedChecksum !== checksum) {\n      throw new Error('Backup integrity check failed');\n    }\n    \n    return backup.data;\n  }\n\n  /**\n   * Create checksum for data integrity\n   */\n  createChecksum(data) {\n    return crypto.createHash('sha256').update(data).digest('hex');\n  }\n\n  /**\n   * Key rotation support\n   */\n  async rotateEncryption(encryptedData, oldKey, newKey) {\n    // Temporarily use old key\n    const tempMasterKey = this.masterKey;\n    this.masterKey = oldKey;\n    \n    // Decrypt with old key\n    const decrypted = await this.decrypt(encryptedData);\n    \n    // Use new key\n    this.masterKey = newKey;\n    \n    // Encrypt with new key\n    const reencrypted = await this.encrypt(decrypted);\n    \n    // Restore original key\n    this.masterKey = tempMasterKey;\n    \n    return reencrypted;\n  }\n}\n\n/**\n * Field-level encryption for database\n */\nclass FieldEncryption {\n  constructor(encryptionManager) {\n    this.encryption = encryptionManager;\n    this.encryptedFields = new Map();\n  }\n\n  /**\n   * Register fields for encryption\n   */\n  registerFields(collection, fields) {\n    this.encryptedFields.set(collection, fields);\n  }\n\n  /**\n   * Middleware for encrypting before save\n   */\n  encryptMiddleware(collection) {\n    return async (req, res, next) => {\n      const fields = this.encryptedFields.get(collection);\n      if (!fields || !req.body) {\n        return next();\n      }\n      \n      try {\n        req.body = await this.encryption.encryptFields(req.body, fields);\n        next();\n      } catch (error) {\n        next(error);\n      }\n    };\n  }\n\n  /**\n   * Middleware for decrypting after fetch\n   */\n  decryptMiddleware(collection) {\n    return async (data) => {\n      const fields = this.encryptedFields.get(collection);\n      if (!fields || !data) {\n        return data;\n      }\n      \n      if (Array.isArray(data)) {\n        return Promise.all(data.map(item => this.encryption.decryptFields(item, fields)));\n      }\n      \n      return this.encryption.decryptFields(data, fields);\n    };\n  }\n}\n\n/**\n * Secure file encryption\n */\nclass FileEncryption {\n  constructor(encryptionManager) {\n    this.encryption = encryptionManager;\n    this.chunkSize = 64 * 1024; // 64KB chunks\n  }\n\n  /**\n   * Encrypt file stream\n   */\n  async encryptFile(inputPath, outputPath) {\n    const fs = require('fs');\n    const stream = require('stream');\n    const pipeline = promisify(stream.pipeline);\n    \n    // Generate file-specific key\n    const fileKey = this.encryption.generateToken(32);\n    const salt = crypto.randomBytes(32);\n    const key = await this.encryption.deriveKey(salt);\n    const iv = crypto.randomBytes(16);\n    \n    // Create cipher\n    const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n    \n    // Create streams\n    const input = fs.createReadStream(inputPath);\n    const output = fs.createWriteStream(outputPath);\n    \n    // Write header (salt + iv)\n    output.write(Buffer.concat([salt, iv]));\n    \n    // Encrypt file\n    await pipeline(input, cipher, output);\n    \n    return {\n      encryptedPath: outputPath,\n      fileKey: fileKey.toString('base64')\n    };\n  }\n\n  /**\n   * Decrypt file stream\n   */\n  async decryptFile(inputPath, outputPath, fileKey) {\n    const fs = require('fs');\n    const stream = require('stream');\n    const pipeline = promisify(stream.pipeline);\n    \n    // Read header\n    const header = Buffer.alloc(48); // 32 bytes salt + 16 bytes iv\n    const fd = fs.openSync(inputPath, 'r');\n    fs.readSync(fd, header, 0, 48, 0);\n    fs.closeSync(fd);\n    \n    const salt = header.slice(0, 32);\n    const iv = header.slice(32, 48);\n    \n    // Derive key\n    const key = await this.encryption.deriveKey(salt);\n    \n    // Create decipher\n    const decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);\n    \n    // Create streams\n    const input = fs.createReadStream(inputPath, { start: 48 });\n    const output = fs.createWriteStream(outputPath);\n    \n    // Decrypt file\n    await pipeline(input, decipher, output);\n    \n    return outputPath;\n  }\n}\n\n/**\n * Tokenization for sensitive data\n */\nclass Tokenization {\n  constructor() {\n    this.tokens = new Map();\n    this.reverseTokens = new Map();\n  }\n\n  /**\n   * Tokenize sensitive data\n   */\n  tokenize(data, type = 'default') {\n    const token = `${type}_${crypto.randomBytes(16).toString('hex')}`;\n    this.tokens.set(token, data);\n    this.reverseTokens.set(`${type}:${data}`, token);\n    return token;\n  }\n\n  /**\n   * Detokenize\n   */\n  detokenize(token) {\n    return this.tokens.get(token);\n  }\n\n  /**\n   * Get token for data if exists\n   */\n  getToken(data, type = 'default') {\n    return this.reverseTokens.get(`${type}:${data}`);\n  }\n\n  /**\n   * Remove token\n   */\n  removeToken(token) {\n    const data = this.tokens.get(token);\n    if (data) {\n      this.tokens.delete(token);\n      this.reverseTokens.delete(`${token.split('_')[0]}:${data}`);\n    }\n  }\n\n  /**\n   * Clean expired tokens\n   */\n  cleanExpiredTokens(maxAge = 3600000) { // 1 hour default\n    // In production, implement with Redis TTL\n    console.log('Token cleanup not implemented in memory storage');\n  }\n}\n\n// Create singleton instances\nconst encryptionManager = new EncryptionManager();\nconst fieldEncryption = new FieldEncryption(encryptionManager);\nconst fileEncryption = new FileEncryption(encryptionManager);\nconst tokenization = new Tokenization();\n\n// Register encrypted fields for different collections\nfieldEncryption.registerFields('users', ['email', 'phone', 'ssn', 'creditCard']);\nfieldEncryption.registerFields('payments', ['cardNumber', 'cvv', 'billingAddress']);\nfieldEncryption.registerFields('messages', ['content', 'attachments']);\n\nmodule.exports = {\n  encryptionManager,\n  fieldEncryption,\n  fileEncryption,\n  tokenization,\n  EncryptionManager,\n  FieldEncryption,\n  FileEncryption,\n  Tokenization\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/utils/securityMonitoring.js","messages":[{"ruleId":"import/order","severity":2,"message":"There should be at least one empty line between import groups","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[73,73],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`crypto` import should occur before import of `events`","line":2,"column":16,"nodeType":"CallExpression","endLine":2,"endColumn":33,"fix":{"range":[0,74],"text":"const crypto = require('crypto');\nconst EventEmitter = require('events');\n"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'severity' is assigned a value but never used.","line":178,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startDate' is assigned a value but never used.","line":178,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endDate' is assigned a value but never used.","line":178,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":178,"endColumn":47},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":187,"column":23,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":187,"endColumn":49},{"ruleId":"unicorn/better-regex","severity":2,"message":"/[;&|`$()]/g can be optimized to /[$&();`|]/g.","line":254,"column":7,"nodeType":"Literal","messageId":"better-regex","endLine":254,"endColumn":19,"fix":{"range":[6783,6795],"text":"/[$&();`|]/g"}},{"ruleId":"unicorn/better-regex","severity":2,"message":"/\\$\\{.*\\}/g can be optimized to /\\${.*}/g.","line":255,"column":7,"nodeType":"Literal","messageId":"better-regex","endLine":255,"endColumn":18,"fix":{"range":[6803,6814],"text":"/\\${.*}/g"}},{"ruleId":"no-return-await","severity":2,"message":"Redundant use of `await` on a return value.","line":360,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":360,"endColumn":73,"suggestions":[{"messageId":"removeAwait","fix":{"range":[9516,9522],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"require-await","severity":2,"message":"Async method 'checkGeographicAnomaly' has no 'await' expression.","line":366,"column":3,"nodeType":"FunctionExpression","messageId":"missingAwait","endLine":366,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":366,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":366,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used. Allowed unused args must match /^_/u.","line":375,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":375,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dayOfWeek' is assigned a value but never used.","line":377,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":377,"endColumn":20},{"ruleId":"no-console","severity":2,"message":"Unexpected console statement.","line":412,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10669,10712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":474,"column":18,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":478,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'targetId' is assigned a value but never used.","line":571,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":571,"endColumn":29},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":578,"column":23,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":578,"endColumn":50},{"ruleId":"no-await-in-loop","severity":2,"message":"Unexpected `await` inside a loop.","line":599,"column":21,"nodeType":"AwaitExpression","messageId":"unexpectedAwait","endLine":599,"endColumn":47}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const EventEmitter = require('events');\nconst crypto = require('crypto');\nconst redis = require('ioredis');\nconst winston = require('winston');\nconst { ElasticsearchTransport } = require('winston-elasticsearch');\n\n// Initialize Redis client\nconst redisClient = new redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: process.env.REDIS_PORT || 6379,\n  password: process.env.REDIS_PASSWORD\n});\n\n/**\n * Security Event Types\n */\nconst SecurityEventTypes = {\n  // Authentication Events\n  AUTH_SUCCESS: 'auth.success',\n  AUTH_FAILURE: 'auth.failure',\n  AUTH_LOCKOUT: 'auth.lockout',\n  PASSWORD_RESET: 'auth.password_reset',\n  MFA_ENABLED: 'auth.mfa_enabled',\n  MFA_DISABLED: 'auth.mfa_disabled',\n  \n  // Access Control Events\n  ACCESS_GRANTED: 'access.granted',\n  ACCESS_DENIED: 'access.denied',\n  PRIVILEGE_ESCALATION: 'access.privilege_escalation',\n  UNAUTHORIZED_ACCESS: 'access.unauthorized',\n  \n  // Data Events\n  DATA_ACCESS: 'data.access',\n  DATA_MODIFICATION: 'data.modification',\n  DATA_DELETION: 'data.deletion',\n  DATA_EXPORT: 'data.export',\n  DATA_BREACH_ATTEMPT: 'data.breach_attempt',\n  \n  // System Events\n  SYSTEM_START: 'system.start',\n  SYSTEM_STOP: 'system.stop',\n  CONFIG_CHANGE: 'system.config_change',\n  SECURITY_UPDATE: 'system.security_update',\n  \n  // Threat Events\n  INJECTION_ATTEMPT: 'threat.injection',\n  XSS_ATTEMPT: 'threat.xss',\n  CSRF_ATTEMPT: 'threat.csrf',\n  BRUTE_FORCE: 'threat.brute_force',\n  RATE_LIMIT_EXCEEDED: 'threat.rate_limit',\n  SUSPICIOUS_ACTIVITY: 'threat.suspicious',\n  MALWARE_DETECTED: 'threat.malware',\n  \n  // Compliance Events\n  GDPR_REQUEST: 'compliance.gdpr_request',\n  DATA_RETENTION: 'compliance.data_retention',\n  AUDIT_ACCESS: 'compliance.audit_access'\n};\n\n/**\n * Security Logger Configuration\n */\nclass SecurityLogger {\n  constructor() {\n    // Configure Winston logger\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      defaultMeta: { \n        service: 'dreamer-ai-security',\n        environment: process.env.NODE_ENV || 'development'\n      },\n      transports: [\n        // Console transport for development\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        }),\n        \n        // File transport for security events\n        new winston.transports.File({\n          filename: 'logs/security-error.log',\n          level: 'error',\n          maxsize: 10485760, // 10MB\n          maxFiles: 5\n        }),\n        \n        new winston.transports.File({\n          filename: 'logs/security-combined.log',\n          maxsize: 10485760, // 10MB\n          maxFiles: 10\n        })\n      ]\n    });\n    \n    // Add Elasticsearch transport in production\n    if (process.env.ELASTICSEARCH_URL) {\n      this.logger.add(new ElasticsearchTransport({\n        level: 'info',\n        clientOpts: { node: process.env.ELASTICSEARCH_URL },\n        index: 'security-logs'\n      }));\n    }\n  }\n  \n  /**\n   * Log security event\n   */\n  logEvent(eventType, details, severity = 'info') {\n    const event = {\n      id: crypto.randomBytes(16).toString('hex'),\n      type: eventType,\n      timestamp: new Date().toISOString(),\n      severity,\n      details,\n      correlationId: details.correlationId || crypto.randomBytes(8).toString('hex')\n    };\n    \n    // Log to Winston\n    this.logger.log(severity, eventType, event);\n    \n    // Store in Redis for real-time monitoring\n    this.storeEvent(event);\n    \n    // Trigger alerts for critical events\n    if (severity === 'critical' || severity === 'error') {\n      this.triggerAlert(event);\n    }\n    \n    return event;\n  }\n  \n  /**\n   * Store event in Redis\n   */\n  async storeEvent(event) {\n    const key = `security:events:${event.type}:${event.timestamp}`;\n    await redisClient.setex(key, 86400 * 30, JSON.stringify(event)); // Keep for 30 days\n    \n    // Add to time series for monitoring\n    await redisClient.zadd(\n      `security:timeline:${event.type}`,\n      Date.now(),\n      event.id\n    );\n    \n    // Update counters\n    await redisClient.hincrby('security:counters', event.type, 1);\n    await redisClient.hincrby('security:counters:daily', `${event.type}:${new Date().toISOString().split('T')[0]}`, 1);\n  }\n  \n  /**\n   * Trigger security alert\n   */\n  async triggerAlert(event) {\n    // Implement alert mechanisms\n    console.error('[SECURITY ALERT]', event);\n    \n    // Add to alert queue\n    await redisClient.lpush('security:alerts', JSON.stringify(event));\n    \n    // Send notifications (implement based on your notification service)\n    // await sendEmail(event);\n    // await sendSlack(event);\n    // await sendPagerDuty(event);\n  }\n  \n  /**\n   * Query security events\n   */\n  async queryEvents(filters = {}) {\n    const { type, severity, startDate, endDate, limit = 100 } = filters;\n    \n    // Build query based on filters\n    // This is a simplified implementation - use Elasticsearch for complex queries\n    const events = [];\n    \n    if (type) {\n      const keys = await redisClient.keys(`security:events:${type}:*`);\n      for (const key of keys.slice(0, limit)) {\n        const event = await redisClient.get(key);\n        if (event) events.push(JSON.parse(event));\n      }\n    }\n    \n    return events;\n  }\n  \n  /**\n   * Get security metrics\n   */\n  async getMetrics() {\n    const counters = await redisClient.hgetall('security:counters');\n    const dailyCounters = await redisClient.hgetall('security:counters:daily');\n    \n    return {\n      total: counters,\n      daily: dailyCounters,\n      timestamp: new Date().toISOString()\n    };\n  }\n}\n\n/**\n * Threat Detection System\n */\nclass ThreatDetector extends EventEmitter {\n  constructor(securityLogger) {\n    super();\n    this.logger = securityLogger;\n    this.patterns = new Map();\n    this.thresholds = new Map();\n    \n    this.initializePatterns();\n    this.initializeThresholds();\n  }\n  \n  /**\n   * Initialize threat patterns\n   */\n  initializePatterns() {\n    // SQL Injection patterns\n    this.patterns.set('sql_injection', [\n      /(\\b(union|select|insert|update|delete|drop|create|alter|exec|execute)\\b)/gi,\n      /(-{2}|\\/\\*|\\*\\/)/g,\n      /(';|\";|`|]|\\\\)/g\n    ]);\n    \n    // XSS patterns\n    this.patterns.set('xss', [\n      /<script[^>]*>.*?<\\/script>/gi,\n      /javascript:/gi,\n      /on\\w+\\s*=/gi,\n      /<iframe/gi,\n      /<object/gi\n    ]);\n    \n    // Path traversal patterns\n    this.patterns.set('path_traversal', [\n      /\\.\\.\\//g,\n      /\\.\\.\\\\+/g,\n      /%2e%2e/gi,\n      /%252e%252e/gi\n    ]);\n    \n    // Command injection patterns\n    this.patterns.set('command_injection', [\n      /[;&|`$()]/g,\n      /\\$\\{.*\\}/g,\n      /\\$\\(.*\\)/g\n    ]);\n  }\n  \n  /**\n   * Initialize threat thresholds\n   */\n  initializeThresholds() {\n    this.thresholds.set('failed_login', { count: 5, window: 300 }); // 5 attempts in 5 minutes\n    this.thresholds.set('rate_limit', { count: 100, window: 60 }); // 100 requests per minute\n    this.thresholds.set('suspicious_activity', { count: 10, window: 600 }); // 10 events in 10 minutes\n  }\n  \n  /**\n   * Detect threats in request\n   */\n  async detectThreats(req) {\n    const threats = [];\n    \n    // Check for injection attacks\n    const input = JSON.stringify({\n      body: req.body,\n      query: req.query,\n      params: req.params\n    });\n    \n    for (const [threatType, patterns] of this.patterns) {\n      for (const pattern of patterns) {\n        if (pattern.test(input)) {\n          threats.push({\n            type: threatType,\n            pattern: pattern.toString(),\n            severity: 'high'\n          });\n        }\n      }\n    }\n    \n    // Check for anomalous behavior\n    const anomalies = await this.detectAnomalies(req);\n    threats.push(...anomalies);\n    \n    // Log detected threats\n    if (threats.length > 0) {\n      this.logger.logEvent(SecurityEventTypes.SUSPICIOUS_ACTIVITY, {\n        ip: req.ip,\n        url: req.originalUrl,\n        threats,\n        headers: req.headers\n      }, 'warning');\n      \n      this.emit('threat-detected', { req, threats });\n    }\n    \n    return threats;\n  }\n  \n  /**\n   * Detect anomalous behavior\n   */\n  async detectAnomalies(req) {\n    const anomalies = [];\n    const userKey = req.user ? req.user.id : req.ip;\n    \n    // Check request rate\n    const requestCount = await this.getRequestCount(userKey);\n    if (requestCount > this.thresholds.get('rate_limit').count) {\n      anomalies.push({\n        type: 'rate_anomaly',\n        severity: 'medium',\n        count: requestCount\n      });\n    }\n    \n    // Check geographic anomaly (if IP geolocation is available)\n    const geoAnomaly = await this.checkGeographicAnomaly(req);\n    if (geoAnomaly) {\n      anomalies.push(geoAnomaly);\n    }\n    \n    // Check time-based anomaly\n    const timeAnomaly = this.checkTimeAnomaly(req);\n    if (timeAnomaly) {\n      anomalies.push(timeAnomaly);\n    }\n    \n    return anomalies;\n  }\n  \n  /**\n   * Get request count for rate limiting\n   */\n  async getRequestCount(key) {\n    const window = 60; // 1 minute window\n    const now = Date.now();\n    const windowStart = now - (window * 1000);\n    \n    // Remove old entries\n    await redisClient.zremrangebyscore(`requests:${key}`, '-inf', windowStart);\n    \n    // Add current request\n    await redisClient.zadd(`requests:${key}`, now, now);\n    \n    // Count requests in window\n    return await redisClient.zcount(`requests:${key}`, windowStart, now);\n  }\n  \n  /**\n   * Check for geographic anomalies\n   */\n  async checkGeographicAnomaly(req) {\n    // Implement IP geolocation check\n    // This is a placeholder - integrate with IP geolocation service\n    return null;\n  }\n  \n  /**\n   * Check for time-based anomalies\n   */\n  checkTimeAnomaly(req) {\n    const hour = new Date().getHours();\n    const dayOfWeek = new Date().getDay();\n    \n    // Check for unusual access times\n    if (hour >= 2 && hour <= 5) {\n      return {\n        type: 'time_anomaly',\n        severity: 'low',\n        description: 'Access during unusual hours'\n      };\n    }\n    \n    return null;\n  }\n}\n\n/**\n * Security Monitoring Dashboard\n */\nclass SecurityMonitor {\n  constructor(securityLogger, threatDetector) {\n    this.logger = securityLogger;\n    this.detector = threatDetector;\n    this.metrics = new Map();\n  }\n  \n  /**\n   * Start monitoring\n   */\n  start() {\n    // Update metrics every minute\n    setInterval(() => this.updateMetrics(), 60000);\n    \n    // Check for security alerts every 5 minutes\n    setInterval(() => this.checkAlerts(), 300000);\n    \n    console.log('Security monitoring started');\n  }\n  \n  /**\n   * Update security metrics\n   */\n  async updateMetrics() {\n    const metrics = await this.logger.getMetrics();\n    \n    // Calculate rates\n    const authFailureRate = metrics.total[SecurityEventTypes.AUTH_FAILURE] || 0;\n    const authSuccessRate = metrics.total[SecurityEventTypes.AUTH_SUCCESS] || 0;\n    \n    this.metrics.set('auth_failure_rate', authFailureRate / (authFailureRate + authSuccessRate));\n    this.metrics.set('total_threats', Object.values(metrics.total).reduce((a, b) => a + b, 0));\n    \n    // Store metrics\n    await redisClient.hset('security:metrics', Object.fromEntries(this.metrics));\n  }\n  \n  /**\n   * Check for security alerts\n   */\n  async checkAlerts() {\n    const alerts = [];\n    \n    // Check authentication failure rate\n    const authFailureRate = this.metrics.get('auth_failure_rate') || 0;\n    if (authFailureRate > 0.3) {\n      alerts.push({\n        type: 'high_auth_failure_rate',\n        severity: 'high',\n        value: authFailureRate\n      });\n    }\n    \n    // Check for threat spikes\n    const recentThreats = await this.getRecentThreatCount();\n    if (recentThreats > 50) {\n      alerts.push({\n        type: 'threat_spike',\n        severity: 'critical',\n        value: recentThreats\n      });\n    }\n    \n    // Process alerts\n    for (const alert of alerts) {\n      this.logger.logEvent(SecurityEventTypes.SUSPICIOUS_ACTIVITY, alert, alert.severity);\n    }\n  }\n  \n  /**\n   * Get recent threat count\n   */\n  async getRecentThreatCount() {\n    const window = 3600000; // 1 hour\n    const now = Date.now();\n    let count = 0;\n    \n    for (const eventType of Object.values(SecurityEventTypes)) {\n      if (eventType.startsWith('threat.')) {\n        count += await redisClient.zcount(\n          `security:timeline:${eventType}`,\n          now - window,\n          now\n        );\n      }\n    }\n    \n    return count;\n  }\n  \n  /**\n   * Get security dashboard data\n   */\n  async getDashboardData() {\n    const metrics = await this.logger.getMetrics();\n    const recentEvents = await this.logger.queryEvents({ limit: 50 });\n    const alerts = await redisClient.lrange('security:alerts', 0, 10);\n    \n    return {\n      metrics: Object.fromEntries(this.metrics),\n      counters: metrics,\n      recentEvents,\n      alerts: alerts.map(a => JSON.parse(a)),\n      status: this.getSecurityStatus()\n    };\n  }\n  \n  /**\n   * Get overall security status\n   */\n  getSecurityStatus() {\n    const authFailureRate = this.metrics.get('auth_failure_rate') || 0;\n    const totalThreats = this.metrics.get('total_threats') || 0;\n    \n    if (authFailureRate > 0.5 || totalThreats > 1000) {\n      return 'critical';\n    } else if (authFailureRate > 0.3 || totalThreats > 500) {\n      return 'warning';\n    } else {\n      return 'healthy';\n    }\n  }\n}\n\n/**\n * Audit Trail System\n */\nclass AuditTrail {\n  constructor(securityLogger) {\n    this.logger = securityLogger;\n  }\n  \n  /**\n   * Log audit event\n   */\n  async log(action, details) {\n    const auditEvent = {\n      id: crypto.randomBytes(16).toString('hex'),\n      timestamp: new Date().toISOString(),\n      action,\n      userId: details.userId,\n      targetId: details.targetId,\n      targetType: details.targetType,\n      changes: details.changes,\n      metadata: details.metadata,\n      ip: details.ip,\n      userAgent: details.userAgent\n    };\n    \n    // Store in audit log\n    const key = `audit:${action}:${auditEvent.timestamp}`;\n    await redisClient.setex(key, 86400 * 365, JSON.stringify(auditEvent)); // Keep for 1 year\n    \n    // Index by user\n    await redisClient.zadd(\n      `audit:user:${details.userId}`,\n      Date.now(),\n      auditEvent.id\n    );\n    \n    // Index by target\n    if (details.targetId) {\n      await redisClient.zadd(\n        `audit:target:${details.targetType}:${details.targetId}`,\n        Date.now(),\n        auditEvent.id\n      );\n    }\n    \n    return auditEvent;\n  }\n  \n  /**\n   * Query audit trail\n   */\n  async query(filters = {}) {\n    const { userId, targetId, targetType, action, startDate, endDate } = filters;\n    const events = [];\n    \n    // Query by user\n    if (userId) {\n      const eventIds = await redisClient.zrange(`audit:user:${userId}`, 0, -1);\n      for (const id of eventIds) {\n        const event = await this.getEventById(id);\n        if (event) events.push(event);\n      }\n    }\n    \n    // Filter by criteria\n    return events.filter(event => {\n      if (action && event.action !== action) return false;\n      if (targetType && event.targetType !== targetType) return false;\n      if (startDate && new Date(event.timestamp) < new Date(startDate)) return false;\n      if (endDate && new Date(event.timestamp) > new Date(endDate)) return false;\n      return true;\n    });\n  }\n  \n  /**\n   * Get audit event by ID\n   */\n  async getEventById(id) {\n    const keys = await redisClient.keys(`audit:*:*`);\n    for (const key of keys) {\n      const event = await redisClient.get(key);\n      if (event) {\n        const parsed = JSON.parse(event);\n        if (parsed.id === id) return parsed;\n      }\n    }\n    return null;\n  }\n}\n\n// Create instances\nconst securityLogger = new SecurityLogger();\nconst threatDetector = new ThreatDetector(securityLogger);\nconst securityMonitor = new SecurityMonitor(securityLogger, threatDetector);\nconst auditTrail = new AuditTrail(securityLogger);\n\n// Start monitoring\nsecurityMonitor.start();\n\nmodule.exports = {\n  SecurityEventTypes,\n  securityLogger,\n  threatDetector,\n  securityMonitor,\n  auditTrail,\n  SecurityLogger,\n  ThreatDetector,\n  SecurityMonitor,\n  AuditTrail\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/backend/utils/tokenUtils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[]}]}]
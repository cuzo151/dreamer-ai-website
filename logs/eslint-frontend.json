[{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/AITools/AITools.test.tsx","messages":[{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":103,"column":53,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":105,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":105,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":110,"column":19,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":111,"column":19,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":112,"column":19,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":113,"column":19,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":132,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":132,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":134,"column":23,"nodeType":"MemberExpression","messageId":"noNodeAccess"}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport AITools from './AITools';\n\n// Mock console.log and alert to avoid noise in tests\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation(() => {});\nconst mockAlert = jest.spyOn(window, 'alert').mockImplementation(() => {});\n\ndescribe('AITools Component', () => {\n  beforeEach(() => {\n    mockConsoleLog.mockClear();\n    mockAlert.mockClear();\n  });\n\n  afterAll(() => {\n    mockConsoleLog.mockRestore();\n    mockAlert.mockRestore();\n  });\n\n  it('renders the AI Tools section with correct title', () => {\n    render(<AITools />);\n    \n    expect(screen.getByText('Our AI-Powered Tools')).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: 'Our AI-Powered Tools' })).toBeInTheDocument();\n  });\n\n  it('renders all tool cards with correct content', () => {\n    render(<AITools />);\n    \n    // Test Document Analysis tool\n    expect(screen.getByText('Document Analysis')).toBeInTheDocument();\n    expect(screen.getByText('Intelligent document processing and extraction with advanced AI capabilities.')).toBeInTheDocument();\n    \n    // Test Voice Recognition tool\n    expect(screen.getByText('Voice Recognition')).toBeInTheDocument();\n    expect(screen.getByText('Convert speech to text with industry-leading accuracy and multiple language support.')).toBeInTheDocument();\n    \n    // Test Predictive Analytics tool\n    expect(screen.getByText('Predictive Analytics')).toBeInTheDocument();\n    expect(screen.getByText('Advanced data analysis and forecasting to drive business intelligence decisions.')).toBeInTheDocument();\n    \n    // Test Process Automation tool\n    expect(screen.getByText('Process Automation')).toBeInTheDocument();\n    expect(screen.getByText('Streamline workflows and automate repetitive tasks with intelligent automation.')).toBeInTheDocument();\n  });\n\n  it('renders action buttons for all tools', () => {\n    render(<AITools />);\n    \n    const tryNowButtons = screen.getAllByText('Try Now');\n    const learnMoreButtons = screen.getAllByText('Learn More');\n    \n    expect(tryNowButtons).toHaveLength(2); // Document Analysis and Voice Recognition\n    expect(learnMoreButtons).toHaveLength(2); // Predictive Analytics and Process Automation\n  });\n\n  it('handles tool click for Document Analysis', () => {\n    render(<AITools />);\n    \n    const documentAnalysisButton = screen.getByRole('button', { name: 'Try Now' });\n    fireEvent.click(documentAnalysisButton);\n    \n    expect(mockConsoleLog).toHaveBeenCalledWith('Clicked on Document Analysis');\n    expect(mockAlert).toHaveBeenCalledWith('Document Analysis - Coming Soon!');\n  });\n\n  it('handles tool click for Voice Recognition', () => {\n    render(<AITools />);\n    \n    const buttons = screen.getAllByText('Try Now');\n    const voiceRecognitionButton = buttons[1]; // Second \"Try Now\" button is for Voice Recognition\n    fireEvent.click(voiceRecognitionButton);\n    \n    expect(mockConsoleLog).toHaveBeenCalledWith('Clicked on Voice Recognition');\n    expect(mockAlert).toHaveBeenCalledWith('Voice Recognition - Coming Soon!');\n  });\n\n  it('handles tool click for Predictive Analytics', () => {\n    render(<AITools />);\n    \n    const predictiveAnalyticsButton = screen.getAllByText('Learn More')[0];\n    fireEvent.click(predictiveAnalyticsButton);\n    \n    expect(mockConsoleLog).toHaveBeenCalledWith('Clicked on Predictive Analytics');\n    expect(mockAlert).toHaveBeenCalledWith('Predictive Analytics - Coming Soon!');\n  });\n\n  it('handles tool click for Process Automation', () => {\n    render(<AITools />);\n    \n    const processAutomationButton = screen.getAllByText('Learn More')[1];\n    fireEvent.click(processAutomationButton);\n    \n    expect(mockConsoleLog).toHaveBeenCalledWith('Clicked on Process Automation');\n    expect(mockAlert).toHaveBeenCalledWith('Process Automation - Coming Soon!');\n  });\n\n  it('has proper HTML structure and CSS classes', () => {\n    render(<AITools />);\n    \n    expect(screen.getByRole('main')).toHaveClass('ai-tools-section');\n    expect(screen.getByText('Our AI-Powered Tools').closest('div')).toHaveClass('ai-tools');\n    \n    const toolCards = document.querySelectorAll('.tool-card');\n    expect(toolCards).toHaveLength(4);\n    \n    toolCards.forEach(card => {\n      expect(card).toHaveClass('tool-card');\n      expect(card.querySelector('.tool-icon')).toBeInTheDocument();\n      expect(card.querySelector('h3')).toBeInTheDocument();\n      expect(card.querySelector('p')).toBeInTheDocument();\n      expect(card.querySelector('.btn.btn-primary')).toBeInTheDocument();\n    });\n  });\n\n  it('renders with correct accessibility attributes', () => {\n    render(<AITools />);\n    \n    const section = screen.getByRole('main');\n    expect(section).toHaveAttribute('id', 'ai-tools');\n    \n    const buttons = screen.getAllByRole('button');\n    buttons.forEach(button => {\n      expect(button).toHaveClass('btn', 'btn-primary');\n    });\n  });\n\n  it('has proper responsive grid structure', () => {\n    render(<AITools />);\n    \n    const toolsGrid = document.querySelector('.tools-grid');\n    expect(toolsGrid).toBeInTheDocument();\n    expect(toolsGrid?.children).toHaveLength(4);\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/AITools/AITools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/About/About.test.tsx","messages":[{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":86,"column":31,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":86,"column":31,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":89,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":89,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":91,"column":23,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":93,"column":33,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":93,"column":33,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":95,"column":24,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":102,"column":33,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":102,"column":33,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":106,"column":34,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":106,"column":34,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":114,"column":37,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":114,"column":37,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":118,"column":30,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":118,"column":30,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":121,"column":35,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":121,"column":35,"nodeType":"MemberExpression","messageId":"noNodeAccess"}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport About from './About';\n\ndescribe('About Component', () => {\n  it('renders the About section with correct structure', () => {\n    render(<About />);\n    \n    expect(screen.getByText('About Us')).toBeInTheDocument();\n    expect(screen.getByText('Pioneering the Future of AI Solutions')).toBeInTheDocument();\n  });\n\n  it('renders the company description', () => {\n    render(<About />);\n    \n    expect(screen.getByText(/At Dreamer AI Solutions, we transform visionary ideas/)).toBeInTheDocument();\n    expect(screen.getByText(/From vision to reality/)).toBeInTheDocument();\n  });\n\n  it('renders all statistics with correct values', () => {\n    render(<About />);\n    \n    expect(screen.getByText('5+')).toBeInTheDocument();\n    expect(screen.getByText('Years of AI Innovation')).toBeInTheDocument();\n    \n    expect(screen.getByText('100+')).toBeInTheDocument();\n    expect(screen.getByText('Enterprise Clients')).toBeInTheDocument();\n    \n    expect(screen.getByText('50+')).toBeInTheDocument();\n    expect(screen.getByText('AI Models Deployed')).toBeInTheDocument();\n    \n    expect(screen.getByText('99%')).toBeInTheDocument();\n    expect(screen.getByText('Success Rate')).toBeInTheDocument();\n  });\n\n  it('renders all company values with descriptions', () => {\n    render(<About />);\n    \n    // Innovation First\n    expect(screen.getByText('Innovation First')).toBeInTheDocument();\n    expect(screen.getByText(\"We push the boundaries of what's possible with artificial intelligence.\")).toBeInTheDocument();\n    \n    // Enterprise Grade\n    expect(screen.getByText('Enterprise Grade')).toBeInTheDocument();\n    expect(screen.getByText('Security, reliability, and compliance are built into every solution.')).toBeInTheDocument();\n    \n    // Client Success\n    expect(screen.getByText('Client Success')).toBeInTheDocument();\n    expect(screen.getByText('Your success is our mission. We partner with you for long-term growth.')).toBeInTheDocument();\n    \n    // Continuous Learning\n    expect(screen.getByText('Continuous Learning')).toBeInTheDocument();\n    expect(screen.getByText('We stay ahead of AI trends to deliver cutting-edge solutions.')).toBeInTheDocument();\n  });\n\n  it('renders founder section', () => {\n    render(<About />);\n    \n    expect(screen.getByText('Meet Our Founder & CEO')).toBeInTheDocument();\n    expect(screen.getByText('J. LaSalle')).toBeInTheDocument();\n  });\n\n  it('renders founder information', () => {\n    render(<About />);\n    \n    expect(screen.getByText('J. LaSalle')).toBeInTheDocument();\n    expect(screen.getByText(/Founded with a vision to democratize artificial intelligence/)).toBeInTheDocument();\n    expect(screen.getByText('Connect on LinkedIn')).toBeInTheDocument();\n  });\n\n  it('renders call to action section', () => {\n    render(<About />);\n    \n    expect(screen.getByText('Ready to Transform Your Business?')).toBeInTheDocument();\n    expect(screen.getByText('Start Your AI Journey')).toBeInTheDocument();\n  });\n\n  it('has proper HTML structure and CSS classes', () => {\n    render(<About />);\n    \n    const section = screen.getByRole('main');\n    expect(section).toHaveClass('about-section');\n    expect(section).toHaveAttribute('id', 'about');\n    \n    const container = section.querySelector('.container');\n    expect(container).toBeInTheDocument();\n    \n    const statsGrid = document.querySelector('.stats-grid');\n    expect(statsGrid).toBeInTheDocument();\n    expect(statsGrid?.children).toHaveLength(4);\n    \n    const valuesGrid = document.querySelector('.values-grid');\n    expect(valuesGrid).toBeInTheDocument();\n    expect(valuesGrid?.children).toHaveLength(4);\n  });\n\n  it('renders HeroIcon components for values', () => {\n    render(<About />);\n    \n    // Check that icon containers exist for each value\n    const valueCards = document.querySelectorAll('.value-card');\n    expect(valueCards).toHaveLength(4);\n    \n    valueCards.forEach(card => {\n      const iconContainer = card.querySelector('.value-icon');\n      expect(iconContainer).toBeInTheDocument();\n    });\n  });\n\n  it('renders leader profile images and social links', () => {\n    render(<About />);\n    \n    const leaderProfiles = document.querySelectorAll('.leader-profile');\n    expect(leaderProfiles).toHaveLength(2);\n    \n    leaderProfiles.forEach(profile => {\n      const avatar = profile.querySelector('.leader-avatar');\n      expect(avatar).toBeInTheDocument();\n      \n      const socialLinks = profile.querySelector('.social-links');\n      expect(socialLinks).toBeInTheDocument();\n    });\n  });\n\n  it('has accessible heading hierarchy', () => {\n    render(<About />);\n    \n    const aboutHeading = screen.getByRole('heading', { level: 2, name: 'About Us' });\n    expect(aboutHeading).toBeInTheDocument();\n    \n    const storyHeading = screen.getByRole('heading', { level: 3, name: 'Our Story' });\n    expect(storyHeading).toBeInTheDocument();\n    \n    const founderHeading = screen.getByRole('heading', { level: 3, name: 'Meet Our Founder & CEO' });\n    expect(founderHeading).toBeInTheDocument();\n  });\n\n  it('renders LinkedIn link with proper attributes', () => {\n    render(<About />);\n    \n    const linkedinLink = screen.getByRole('link', { name: 'Connect on LinkedIn' });\n    expect(linkedinLink).toHaveAttribute('href', 'https://www.linkedin.com/in/jlasalle973');\n    expect(linkedinLink).toHaveAttribute('target', '_blank');\n    expect(linkedinLink).toHaveAttribute('rel', 'noopener noreferrer');\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/About/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/AnimatedBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/AnimatedButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/AnimatedCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/AnimatedSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/LoadingAnimation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/ParallaxSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/ScrollIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Animation/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/AuthModal/AuthModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Capabilities/Capabilities.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Contact/Contact.test.tsx","messages":[{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":211,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":211,"column":32,"nodeType":"MemberExpression","messageId":"noNodeAccess"}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, waitFor } from '../../test-utils/testUtils';\nimport userEvent from '@testing-library/user-event';\nimport axios from 'axios';\nimport Contact from './Contact';\n\n// Mock axios\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\n// Mock child components\njest.mock('../Animation/AnimatedSection', () => ({\n  __esModule: true,\n  default: ({ children }: any) => <div data-testid=\"animated-section\">{children}</div>,\n}));\n\njest.mock('../Animation/AnimatedButton', () => ({\n  __esModule: true,\n  default: ({ children, onClick, disabled }: any) => (\n    <button onClick={onClick} disabled={disabled} data-testid=\"animated-button\">\n      {children}\n    </button>\n  ),\n}));\n\njest.mock('../Animation/LoadingAnimation', () => ({\n  __esModule: true,\n  default: () => <div data-testid=\"loading-animation\">Loading...</div>,\n}));\n\njest.mock('../../hooks/useReducedMotion', () => ({\n  useReducedMotion: () => false,\n}));\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n    h2: ({ children, ...props }: any) => <h2 {...props}>{children}</h2>,\n    p: ({ children, ...props }: any) => <p {...props}>{children}</p>,\n    form: ({ children, ...props }: any) => <form {...props}>{children}</form>,\n  },\n  AnimatePresence: ({ children }: any) => <>{children}</>,\n}));\n\ndescribe('Contact Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders contact form with all fields', () => {\n    render(<Contact />);\n\n    // Check headings\n    expect(screen.getByText('Contact Us')).toBeInTheDocument();\n    expect(screen.getByText(\"Let's Transform Your Business Together\")).toBeInTheDocument();\n    \n    // Check form fields\n    expect(screen.getByLabelText(/name/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/company/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/inquiry type/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/message/i)).toBeInTheDocument();\n    \n    // Check submit button\n    expect(screen.getByTestId('animated-button')).toHaveTextContent('Send Message');\n  });\n\n  it('renders contact information', () => {\n    render(<Contact />);\n\n    expect(screen.getByText('Get in Touch')).toBeInTheDocument();\n    expect(screen.getByText('support@dreamerai.io')).toBeInTheDocument();\n    expect(screen.getByText('jlasalle@dreamerai.io')).toBeInTheDocument();\n    expect(screen.getByText('Available upon request')).toBeInTheDocument();\n    expect(screen.getByText('dreamerai.io')).toBeInTheDocument();\n  });\n\n  it('handles form input changes', async () => {\n    render(<Contact />);\n\n    const nameInput = screen.getByLabelText(/name/i);\n    const emailInput = screen.getByLabelText(/email/i);\n    const companyInput = screen.getByLabelText(/company/i);\n    const typeSelect = screen.getByLabelText(/inquiry type/i);\n    const messageTextarea = screen.getByLabelText(/message/i);\n\n    await userEvent.type(nameInput, 'John Doe');\n    await userEvent.type(emailInput, 'john@example.com');\n    await userEvent.type(companyInput, 'Test Corp');\n    await userEvent.selectOptions(typeSelect, 'demo');\n    await userEvent.type(messageTextarea, 'I would like a demo');\n\n    expect(nameInput).toHaveValue('John Doe');\n    expect(emailInput).toHaveValue('john@example.com');\n    expect(companyInput).toHaveValue('Test Corp');\n    expect(typeSelect).toHaveValue('demo');\n    expect(messageTextarea).toHaveValue('I would like a demo');\n  });\n\n  it('submits form successfully', async () => {\n    mockedAxios.post.mockResolvedValueOnce({ data: { success: true } });\n\n    render(<Contact />);\n\n    // Fill form\n    await userEvent.type(screen.getByLabelText(/name/i), 'John Doe');\n    await userEvent.type(screen.getByLabelText(/email/i), 'john@example.com');\n    await userEvent.type(screen.getByLabelText(/message/i), 'Test message');\n\n    // Submit form\n    const submitButton = screen.getByTestId('animated-button');\n    await userEvent.click(submitButton);\n\n    // Check API call\n    expect(mockedAxios.post).toHaveBeenCalledWith(\n      'http://localhost:5000/api/contact/submit',\n      {\n        name: 'John Doe',\n        email: 'john@example.com',\n        company: '',\n        message: 'Test message',\n        type: 'general'\n      }\n    );\n\n    // Check success message\n    await waitFor(() => {\n      expect(screen.getByText(/thank you for contacting us/i)).toBeInTheDocument();\n    });\n\n    // Check form is reset\n    expect(screen.getByLabelText(/name/i)).toHaveValue('');\n    expect(screen.getByLabelText(/email/i)).toHaveValue('');\n    expect(screen.getByLabelText(/message/i)).toHaveValue('');\n  });\n\n  it('handles form submission error', async () => {\n    mockedAxios.post.mockRejectedValueOnce(new Error('Network error'));\n\n    render(<Contact />);\n\n    // Fill and submit form\n    await userEvent.type(screen.getByLabelText(/name/i), 'John Doe');\n    await userEvent.type(screen.getByLabelText(/email/i), 'john@example.com');\n    await userEvent.type(screen.getByLabelText(/message/i), 'Test message');\n    \n    const submitButton = screen.getByTestId('animated-button');\n    await userEvent.click(submitButton);\n\n    // Check error message\n    await waitFor(() => {\n      expect(screen.getByText(/something went wrong/i)).toBeInTheDocument();\n    });\n  });\n\n  it('shows loading state during submission', async () => {\n    // Mock a delayed response\n    mockedAxios.post.mockImplementation(() => \n      new Promise(resolve => setTimeout(() => resolve({ data: { success: true } }), 100))\n    );\n\n    render(<Contact />);\n\n    // Fill and submit form\n    await userEvent.type(screen.getByLabelText(/name/i), 'John Doe');\n    await userEvent.type(screen.getByLabelText(/email/i), 'john@example.com');\n    await userEvent.type(screen.getByLabelText(/message/i), 'Test message');\n    \n    const submitButton = screen.getByTestId('animated-button');\n    await userEvent.click(submitButton);\n\n    // Check loading state\n    expect(screen.getByTestId('loading-animation')).toBeInTheDocument();\n    expect(screen.getByText('Sending...')).toBeInTheDocument();\n    expect(submitButton).toBeDisabled();\n\n    // Wait for submission to complete\n    await waitFor(() => {\n      expect(screen.queryByTestId('loading-animation')).not.toBeInTheDocument();\n    });\n  });\n\n  it('validates required fields', async () => {\n    render(<Contact />);\n\n    const nameInput = screen.getByLabelText(/name/i);\n    const emailInput = screen.getByLabelText(/email/i);\n    const messageTextarea = screen.getByLabelText(/message/i);\n\n    // Check required attributes\n    expect(nameInput).toBeRequired();\n    expect(emailInput).toBeRequired();\n    expect(messageTextarea).toBeRequired();\n\n    // Company field should not be required\n    expect(screen.getByLabelText(/company/i)).not.toBeRequired();\n  });\n\n  it('validates email format', () => {\n    render(<Contact />);\n    \n    const emailInput = screen.getByLabelText(/email/i);\n    expect(emailInput).toHaveAttribute('type', 'email');\n  });\n\n  it('has correct inquiry type options', () => {\n    render(<Contact />);\n    \n    const typeSelect = screen.getByLabelText(/inquiry type/i);\n    const options = typeSelect.querySelectorAll('option');\n    \n    expect(options).toHaveLength(4);\n    expect(options[0]).toHaveTextContent('General Inquiry');\n    expect(options[1]).toHaveTextContent('Request Demo');\n    expect(options[2]).toHaveTextContent('Technical Support');\n    expect(options[3]).toHaveTextContent('Partnership');\n  });\n});","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Contact/Contact.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/ElevenLabsChat/ElevenLabsChat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Footer/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Header/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Hero/Hero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Interactive/DemoResult.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Interactive/Interactive.test.tsx","messages":[{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":152,"column":35,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":152,"column":35,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":194,"column":9,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":194,"endColumn":51},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":195,"column":9,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":195,"endColumn":50},{"ruleId":"testing-library/no-wait-for-multiple-assertions","severity":2,"message":"Avoid using multiple assertions within `waitFor` callback","line":196,"column":9,"nodeType":"ExpressionStatement","messageId":"noWaitForMultipleAssertion","endLine":196,"endColumn":53}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, waitFor } from '../../test-utils/testUtils';\nimport userEvent from '@testing-library/user-event';\nimport axios from 'axios';\nimport Interactive from './Interactive';\n\n// Mock axios\njest.mock('axios');\nconst mockedAxios = axios as jest.Mocked<typeof axios>;\n\n// Mock DemoResult component\njest.mock('./DemoResult', () => ({\n  __esModule: true,\n  default: ({ result, type }: any) => (\n    <div data-testid={`demo-result-${type}`}>{result}</div>\n  ),\n}));\n\ndescribe('Interactive Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders all demo buttons', () => {\n    render(<Interactive />);\n\n    expect(screen.getByText('Experience Dreamer AI in Action')).toBeInTheDocument();\n    expect(screen.getByText('Document Analysis')).toBeInTheDocument();\n    expect(screen.getByText('Voice Transcription')).toBeInTheDocument();\n    expect(screen.getByText('Voice Cloning')).toBeInTheDocument();\n    expect(screen.getByText('Lead Generator')).toBeInTheDocument();\n  });\n\n  it('shows document analysis demo by default', () => {\n    render(<Interactive />);\n\n    expect(screen.getByText('Document Analysis Demo')).toBeInTheDocument();\n    expect(screen.getByPlaceholderText(/paste your document text here/i)).toBeInTheDocument();\n  });\n\n  describe('Document Analysis Demo', () => {\n    it('handles document analysis successfully', async () => {\n      const mockResponse = {\n        data: {\n          analysis: 'Legal document analysis results',\n          confidence: 0.95\n        }\n      };\n      mockedAxios.post.mockResolvedValueOnce(mockResponse);\n\n      render(<Interactive />);\n\n      const textarea = screen.getByPlaceholderText(/paste your document text here/i);\n      await userEvent.type(textarea, 'This is a legal document for testing');\n\n      const analyzeButton = screen.getByText('Analyze Document');\n      await userEvent.click(analyzeButton);\n\n      expect(mockedAxios.post).toHaveBeenCalledWith(\n        'http://localhost:5000/api/showcase/analyze-document',\n        {\n          text: 'This is a legal document for testing',\n          type: 'legal'\n        }\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('demo-result-document')).toBeInTheDocument();\n      });\n    });\n\n    it('handles document analysis error', async () => {\n      mockedAxios.post.mockRejectedValueOnce(new Error('API Error'));\n\n      render(<Interactive />);\n\n      const textarea = screen.getByPlaceholderText(/paste your document text here/i);\n      await userEvent.type(textarea, 'Test document');\n\n      const analyzeButton = screen.getByText('Analyze Document');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/demo service temporarily unavailable/i)).toBeInTheDocument();\n      });\n    });\n\n    it('disables analyze button when text is empty', () => {\n      render(<Interactive />);\n\n      const analyzeButton = screen.getByText('Analyze Document');\n      expect(analyzeButton).toBeDisabled();\n    });\n\n    it('shows loading state during analysis', async () => {\n      // Mock a delayed response\n      mockedAxios.post.mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve({ data: {} }), 100))\n      );\n\n      render(<Interactive />);\n\n      await userEvent.type(screen.getByPlaceholderText(/paste your document text here/i), 'Test');\n      await userEvent.click(screen.getByText('Analyze Document'));\n\n      expect(screen.getByText('Analyzing...')).toBeInTheDocument();\n      expect(screen.getByText('Analyzing...')).toBeDisabled();\n    });\n  });\n\n  describe('Voice Transcription Demo', () => {\n    it('switches to voice transcription demo', async () => {\n      render(<Interactive />);\n\n      const voiceButton = screen.getByText('Voice Transcription');\n      await userEvent.click(voiceButton);\n\n      expect(screen.getByText('Voice Transcription Demo')).toBeInTheDocument();\n      expect(screen.getByText(/99.2% accuracy/i)).toBeInTheDocument();\n      expect(screen.getByText(/multi-language support/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Voice Cloning Demo', () => {\n    it('switches to voice cloning demo and generates voice', async () => {\n      render(<Interactive />);\n\n      const voiceCloneButton = screen.getByText('Voice Cloning');\n      await userEvent.click(voiceCloneButton);\n\n      expect(screen.getByText('Voice Cloning Demo')).toBeInTheDocument();\n\n      const textarea = screen.getByPlaceholderText(/enter text to convert/i);\n      await userEvent.type(textarea, 'Welcome to our services');\n\n      const generateButton = screen.getByText('Generate Voice');\n      await userEvent.click(generateButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('demo-result-voiceclone')).toBeInTheDocument();\n      });\n    });\n\n    it('has voice type options', async () => {\n      render(<Interactive />);\n\n      await userEvent.click(screen.getByText('Voice Cloning'));\n\n      const voiceSelect = screen.getByRole('combobox');\n      expect(voiceSelect).toBeInTheDocument();\n      \n      const options = voiceSelect.querySelectorAll('option');\n      expect(options).toHaveLength(3);\n      expect(options[0]).toHaveTextContent('Professional Business Voice');\n      expect(options[1]).toHaveTextContent('Legal Expert Voice');\n      expect(options[2]).toHaveTextContent('Warm Customer Service');\n    });\n\n    it('disables generate button when text is empty', async () => {\n      render(<Interactive />);\n\n      await userEvent.click(screen.getByText('Voice Cloning'));\n      \n      const generateButton = screen.getByText('Generate Voice');\n      expect(generateButton).toBeDisabled();\n    });\n  });\n\n  describe('Lead Generator Demo', () => {\n    it('switches to lead generator demo and generates leads', async () => {\n      render(<Interactive />);\n\n      const leadButton = screen.getByText('Lead Generator');\n      await userEvent.click(leadButton);\n\n      expect(screen.getByText('AI Lead Generator Demo')).toBeInTheDocument();\n\n      // Fill form\n      const companyInput = screen.getByPlaceholderText(/company type/i);\n      await userEvent.type(companyInput, 'Law Firms');\n\n      const industrySelect = screen.getByRole('combobox', { name: /select industry/i });\n      await userEvent.selectOptions(industrySelect, 'Legal Services');\n\n      const sizeSelect = screen.getByRole('combobox', { name: /company size/i });\n      await userEvent.selectOptions(sizeSelect, '11-50');\n\n      const generateButton = screen.getByText('Generate Lead Prospects');\n      await userEvent.click(generateButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('demo-result-leads')).toBeInTheDocument();\n        const result = screen.getByTestId('demo-result-leads').textContent;\n        expect(result).toContain('Sarah Johnson');\n        expect(result).toContain('Michael Chen');\n        expect(result).toContain('Emily Rodriguez');\n      });\n    });\n\n    it('disables generate button when required fields are empty', async () => {\n      render(<Interactive />);\n\n      await userEvent.click(screen.getByText('Lead Generator'));\n      \n      const generateButton = screen.getByText('Generate Lead Prospects');\n      expect(generateButton).toBeDisabled();\n    });\n\n    it('shows loading state during lead generation', async () => {\n      render(<Interactive />);\n\n      await userEvent.click(screen.getByText('Lead Generator'));\n      \n      // Fill required fields\n      await userEvent.type(screen.getByPlaceholderText(/company type/i), 'Law Firms');\n      await userEvent.selectOptions(screen.getByRole('combobox', { name: /select industry/i }), 'Legal Services');\n      \n      // Click generate - it will show loading state briefly\n      await userEvent.click(screen.getByText('Generate Lead Prospects'));\n      \n      // The loading state might be too quick to catch, but we can verify the functionality works\n      await waitFor(() => {\n        expect(screen.getByTestId('demo-result-leads')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Demo Navigation', () => {\n    it('switches between demos correctly', async () => {\n      render(<Interactive />);\n\n      // Start with document analysis\n      expect(screen.getByText('Document Analysis Demo')).toBeInTheDocument();\n\n      // Switch to voice\n      await userEvent.click(screen.getByText('Voice Transcription'));\n      expect(screen.getByText('Voice Transcription Demo')).toBeInTheDocument();\n      expect(screen.queryByText('Document Analysis Demo')).not.toBeInTheDocument();\n\n      // Switch to lead generator\n      await userEvent.click(screen.getByText('Lead Generator'));\n      expect(screen.getByText('AI Lead Generator Demo')).toBeInTheDocument();\n      expect(screen.queryByText('Voice Transcription Demo')).not.toBeInTheDocument();\n\n      // Switch back to document\n      await userEvent.click(screen.getByText('Document Analysis'));\n      expect(screen.getByText('Document Analysis Demo')).toBeInTheDocument();\n    });\n\n    it('highlights active demo button', async () => {\n      render(<Interactive />);\n\n      const documentButton = screen.getByRole('button', { name: /document analysis/i });\n      const voiceButton = screen.getByRole('button', { name: /voice transcription/i });\n\n      // Document should be active by default\n      expect(documentButton).toHaveClass('bg-dreamer-blue', 'text-white');\n      expect(voiceButton).toHaveClass('bg-white', 'text-gray-700');\n\n      // Switch to voice\n      await userEvent.click(voiceButton);\n      expect(voiceButton).toHaveClass('bg-dreamer-blue', 'text-white');\n      expect(documentButton).toHaveClass('bg-white', 'text-gray-700');\n    });\n  });\n});","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/Interactive/Interactive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/VideoShowcase/VideoShowcase.test.tsx","messages":[{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":40,"column":31,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":40,"column":31,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":43,"column":38,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":43,"column":38,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":46,"column":43,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":46,"column":43,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":49,"column":36,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":49,"column":36,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":84,"column":37,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":84,"column":37,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":87,"column":36,"nodeType":"MemberExpression","messageId":"noNodeAccess"},{"ruleId":"testing-library/no-node-access","severity":2,"message":"Avoid direct Node access. Prefer using the methods from Testing Library.","line":87,"column":36,"nodeType":"MemberExpression","messageId":"noNodeAccess"}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport VideoShowcase from './VideoShowcase';\n\ndescribe('VideoShowcase Component', () => {\n  it('renders the video showcase section with correct title', () => {\n    render(<VideoShowcase />);\n    \n    expect(screen.getByText('AI Avatar Showcase')).toBeInTheDocument();\n    expect(screen.getByRole('heading', { name: 'AI Avatar Showcase' })).toBeInTheDocument();\n  });\n\n  it('renders the HeyGen iframe with correct attributes', () => {\n    render(<VideoShowcase />);\n    \n    const iframe = screen.getByTitle('HeyGen video player');\n    expect(iframe).toBeInTheDocument();\n    expect(iframe).toHaveAttribute('src', 'https://app.heygen.com/embeds/8b9a648b26dd4891a6ac18059ab4aea7');\n    expect(iframe).toHaveAttribute('width', '100%');\n    expect(iframe).toHaveAttribute('height', '100%');\n    expect(iframe).toHaveAttribute('frameBorder', '0');\n    expect(iframe).toHaveAttribute('allow', 'encrypted-media; fullscreen;');\n    expect(iframe).toHaveAttribute('allowFullScreen');\n  });\n\n  it('renders the video description', () => {\n    render(<VideoShowcase />);\n    \n    expect(screen.getByText('Meet our AI-powered avatar introducing DreamerAI solutions')).toBeInTheDocument();\n  });\n\n  it('has proper HTML structure and CSS classes', () => {\n    render(<VideoShowcase />);\n    \n    const section = screen.getByRole('main');\n    expect(section).toHaveClass('video-showcase-section');\n    expect(section).toHaveAttribute('id', 'video-showcase');\n    \n    const container = section.querySelector('.container');\n    expect(container).toBeInTheDocument();\n    \n    const videoShowcase = container?.querySelector('.video-showcase');\n    expect(videoShowcase).toBeInTheDocument();\n    \n    const videoContainer = videoShowcase?.querySelector('.video-container');\n    expect(videoContainer).toBeInTheDocument();\n    \n    const iframe = videoContainer?.querySelector('.main-video');\n    expect(iframe).toBeInTheDocument();\n    expect(iframe).toHaveClass('main-video');\n  });\n\n  it('has proper video description styling', () => {\n    render(<VideoShowcase />);\n    \n    const description = screen.getByText('Meet our AI-powered avatar introducing DreamerAI solutions');\n    expect(description).toHaveClass('video-description');\n  });\n\n  it('uses the correct HeyGen video ID', () => {\n    render(<VideoShowcase />);\n    \n    const iframe = screen.getByTitle('HeyGen video player');\n    const expectedVideoId = '8b9a648b26dd4891a6ac18059ab4aea7';\n    const expectedSrc = `https://app.heygen.com/embeds/${expectedVideoId}`;\n    \n    expect(iframe).toHaveAttribute('src', expectedSrc);\n  });\n\n  it('is accessible and has proper ARIA attributes', () => {\n    render(<VideoShowcase />);\n    \n    const iframe = screen.getByTitle('HeyGen video player');\n    expect(iframe).toHaveAttribute('title', 'HeyGen video player');\n    \n    const section = screen.getByRole('main');\n    expect(section).toBeInTheDocument();\n  });\n\n  it('has responsive video container structure', () => {\n    render(<VideoShowcase />);\n    \n    const videoContainer = document.querySelector('.video-container');\n    expect(videoContainer).toBeInTheDocument();\n    \n    const iframe = videoContainer?.querySelector('iframe');\n    expect(iframe).toHaveAttribute('width', '100%');\n    expect(iframe).toHaveAttribute('height', '100%');\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/components/VideoShowcase/VideoShowcase.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used.","line":1,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":1,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\nimport './VideoShowcase.css';\n\nconst VideoShowcase: React.FC = () => {\n  // HeyGen video ID\n  const heygenVideoId = '8b9a648b26dd4891a6ac18059ab4aea7';\n\n  return (\n    <section id=\"video-showcase\" className=\"video-showcase-section\">\n      <div className=\"container\">\n        <div className=\"video-showcase\">\n          <h2>AI Avatar Showcase</h2>\n          <div className=\"video-container\">\n            <iframe\n              className=\"main-video\"\n              width=\"100%\"\n              height=\"100%\"\n              src={`https://app.heygen.com/embeds/${heygenVideoId}`}\n              title=\"HeyGen video player\"\n              frameBorder=\"0\"\n              allow=\"encrypted-media; fullscreen;\"\n              allowFullScreen\n            />\n          </div>\n          <p className=\"video-description\">\n            Meet our AI-powered avatar introducing DreamerAI solutions\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default VideoShowcase;","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/data/siteConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/hooks/useIntersectionObserver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/hooks/useParallax.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/hooks/useReducedMotion.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/react-app-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/reportWebVitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/services/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/services/apiClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/services/apiServices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/lasaj917/Claude Code/01-Enterprise-Apps/dreamer-ai-website/frontend/src/setupTests.ts","messages":[{"ruleId":"@typescript-eslint/no-useless-constructor","severity":1,"message":"Useless constructor.","line":9,"column":3,"nodeType":"MethodDefinition","messageId":"noUselessConstructor","endLine":9,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  unobserve() {}\n};\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // Deprecated\n    removeListener: jest.fn(), // Deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock scrollTo\nwindow.scrollTo = jest.fn();\n\n// Suppress console errors in tests\nconst originalError = console.error;\nbeforeAll(() => {\n  console.error = (...args) => {\n    if (\n      typeof args[0] === 'string' &&\n      args[0].includes('Warning: ReactDOM.render')\n    ) {\n      return;\n    }\n    originalError.call(console, ...args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n});\n","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]